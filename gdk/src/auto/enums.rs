// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
use glib::error::ErrorDomain;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
use glib::Quark;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkAxisUse")]
pub enum AxisUse {
    #[doc(alias = "GDK_AXIS_IGNORE")]
    Ignore,
    #[doc(alias = "GDK_AXIS_X")]
    X,
    #[doc(alias = "GDK_AXIS_Y")]
    Y,
    #[doc(alias = "GDK_AXIS_PRESSURE")]
    Pressure,
    #[doc(alias = "GDK_AXIS_XTILT")]
    Xtilt,
    #[doc(alias = "GDK_AXIS_YTILT")]
    Ytilt,
    #[doc(alias = "GDK_AXIS_WHEEL")]
    Wheel,
    #[doc(alias = "GDK_AXIS_DISTANCE")]
    Distance,
    #[doc(alias = "GDK_AXIS_ROTATION")]
    Rotation,
    #[doc(alias = "GDK_AXIS_SLIDER")]
    Slider,
    #[doc(alias = "GDK_AXIS_LAST")]
    Last,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for AxisUse {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "AxisUse::{}",
            match *self {
                AxisUse::Ignore => "Ignore",
                AxisUse::X => "X",
                AxisUse::Y => "Y",
                AxisUse::Pressure => "Pressure",
                AxisUse::Xtilt => "Xtilt",
                AxisUse::Ytilt => "Ytilt",
                AxisUse::Wheel => "Wheel",
                AxisUse::Distance => "Distance",
                AxisUse::Rotation => "Rotation",
                AxisUse::Slider => "Slider",
                AxisUse::Last => "Last",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for AxisUse {
    type GlibType = ffi::GdkAxisUse;

    fn into_glib(self) -> ffi::GdkAxisUse {
        match self {
            AxisUse::Ignore => ffi::GDK_AXIS_IGNORE,
            AxisUse::X => ffi::GDK_AXIS_X,
            AxisUse::Y => ffi::GDK_AXIS_Y,
            AxisUse::Pressure => ffi::GDK_AXIS_PRESSURE,
            AxisUse::Xtilt => ffi::GDK_AXIS_XTILT,
            AxisUse::Ytilt => ffi::GDK_AXIS_YTILT,
            AxisUse::Wheel => ffi::GDK_AXIS_WHEEL,
            AxisUse::Distance => ffi::GDK_AXIS_DISTANCE,
            AxisUse::Rotation => ffi::GDK_AXIS_ROTATION,
            AxisUse::Slider => ffi::GDK_AXIS_SLIDER,
            AxisUse::Last => ffi::GDK_AXIS_LAST,
            AxisUse::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkAxisUse> for AxisUse {
    unsafe fn from_glib(value: ffi::GdkAxisUse) -> Self {
        skip_assert_initialized!();
        match value {
            0 => AxisUse::Ignore,
            1 => AxisUse::X,
            2 => AxisUse::Y,
            3 => AxisUse::Pressure,
            4 => AxisUse::Xtilt,
            5 => AxisUse::Ytilt,
            6 => AxisUse::Wheel,
            7 => AxisUse::Distance,
            8 => AxisUse::Rotation,
            9 => AxisUse::Slider,
            10 => AxisUse::Last,
            value => AxisUse::__Unknown(value),
        }
    }
}

impl StaticType for AxisUse {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_axis_use_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for AxisUse {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for AxisUse {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for AxisUse {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkByteOrder")]
pub enum ByteOrder {
    #[doc(alias = "GDK_LSB_FIRST")]
    LsbFirst,
    #[doc(alias = "GDK_MSB_FIRST")]
    MsbFirst,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ByteOrder {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ByteOrder::{}",
            match *self {
                ByteOrder::LsbFirst => "LsbFirst",
                ByteOrder::MsbFirst => "MsbFirst",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ByteOrder {
    type GlibType = ffi::GdkByteOrder;

    fn into_glib(self) -> ffi::GdkByteOrder {
        match self {
            ByteOrder::LsbFirst => ffi::GDK_LSB_FIRST,
            ByteOrder::MsbFirst => ffi::GDK_MSB_FIRST,
            ByteOrder::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkByteOrder> for ByteOrder {
    unsafe fn from_glib(value: ffi::GdkByteOrder) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ByteOrder::LsbFirst,
            1 => ByteOrder::MsbFirst,
            value => ByteOrder::__Unknown(value),
        }
    }
}

impl StaticType for ByteOrder {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_byte_order_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ByteOrder {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ByteOrder {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ByteOrder {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkCrossingMode")]
pub enum CrossingMode {
    #[doc(alias = "GDK_CROSSING_NORMAL")]
    Normal,
    #[doc(alias = "GDK_CROSSING_GRAB")]
    Grab,
    #[doc(alias = "GDK_CROSSING_UNGRAB")]
    Ungrab,
    #[doc(alias = "GDK_CROSSING_GTK_GRAB")]
    GtkGrab,
    #[doc(alias = "GDK_CROSSING_GTK_UNGRAB")]
    GtkUngrab,
    #[doc(alias = "GDK_CROSSING_STATE_CHANGED")]
    StateChanged,
    #[doc(alias = "GDK_CROSSING_TOUCH_BEGIN")]
    TouchBegin,
    #[doc(alias = "GDK_CROSSING_TOUCH_END")]
    TouchEnd,
    #[doc(alias = "GDK_CROSSING_DEVICE_SWITCH")]
    DeviceSwitch,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CrossingMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "CrossingMode::{}",
            match *self {
                CrossingMode::Normal => "Normal",
                CrossingMode::Grab => "Grab",
                CrossingMode::Ungrab => "Ungrab",
                CrossingMode::GtkGrab => "GtkGrab",
                CrossingMode::GtkUngrab => "GtkUngrab",
                CrossingMode::StateChanged => "StateChanged",
                CrossingMode::TouchBegin => "TouchBegin",
                CrossingMode::TouchEnd => "TouchEnd",
                CrossingMode::DeviceSwitch => "DeviceSwitch",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for CrossingMode {
    type GlibType = ffi::GdkCrossingMode;

    fn into_glib(self) -> ffi::GdkCrossingMode {
        match self {
            CrossingMode::Normal => ffi::GDK_CROSSING_NORMAL,
            CrossingMode::Grab => ffi::GDK_CROSSING_GRAB,
            CrossingMode::Ungrab => ffi::GDK_CROSSING_UNGRAB,
            CrossingMode::GtkGrab => ffi::GDK_CROSSING_GTK_GRAB,
            CrossingMode::GtkUngrab => ffi::GDK_CROSSING_GTK_UNGRAB,
            CrossingMode::StateChanged => ffi::GDK_CROSSING_STATE_CHANGED,
            CrossingMode::TouchBegin => ffi::GDK_CROSSING_TOUCH_BEGIN,
            CrossingMode::TouchEnd => ffi::GDK_CROSSING_TOUCH_END,
            CrossingMode::DeviceSwitch => ffi::GDK_CROSSING_DEVICE_SWITCH,
            CrossingMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkCrossingMode> for CrossingMode {
    unsafe fn from_glib(value: ffi::GdkCrossingMode) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CrossingMode::Normal,
            1 => CrossingMode::Grab,
            2 => CrossingMode::Ungrab,
            3 => CrossingMode::GtkGrab,
            4 => CrossingMode::GtkUngrab,
            5 => CrossingMode::StateChanged,
            6 => CrossingMode::TouchBegin,
            7 => CrossingMode::TouchEnd,
            8 => CrossingMode::DeviceSwitch,
            value => CrossingMode::__Unknown(value),
        }
    }
}

impl StaticType for CrossingMode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_crossing_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for CrossingMode {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for CrossingMode {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for CrossingMode {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkCursorType")]
pub enum CursorType {
    #[doc(alias = "GDK_X_CURSOR")]
    XCursor,
    #[doc(alias = "GDK_ARROW")]
    Arrow,
    #[doc(alias = "GDK_BASED_ARROW_DOWN")]
    BasedArrowDown,
    #[doc(alias = "GDK_BASED_ARROW_UP")]
    BasedArrowUp,
    #[doc(alias = "GDK_BOAT")]
    Boat,
    #[doc(alias = "GDK_BOGOSITY")]
    Bogosity,
    #[doc(alias = "GDK_BOTTOM_LEFT_CORNER")]
    BottomLeftCorner,
    #[doc(alias = "GDK_BOTTOM_RIGHT_CORNER")]
    BottomRightCorner,
    #[doc(alias = "GDK_BOTTOM_SIDE")]
    BottomSide,
    #[doc(alias = "GDK_BOTTOM_TEE")]
    BottomTee,
    #[doc(alias = "GDK_BOX_SPIRAL")]
    BoxSpiral,
    #[doc(alias = "GDK_CENTER_PTR")]
    CenterPtr,
    #[doc(alias = "GDK_CIRCLE")]
    Circle,
    #[doc(alias = "GDK_CLOCK")]
    Clock,
    #[doc(alias = "GDK_COFFEE_MUG")]
    CoffeeMug,
    #[doc(alias = "GDK_CROSS")]
    Cross,
    #[doc(alias = "GDK_CROSS_REVERSE")]
    CrossReverse,
    #[doc(alias = "GDK_CROSSHAIR")]
    Crosshair,
    #[doc(alias = "GDK_DIAMOND_CROSS")]
    DiamondCross,
    #[doc(alias = "GDK_DOT")]
    Dot,
    #[doc(alias = "GDK_DOTBOX")]
    Dotbox,
    #[doc(alias = "GDK_DOUBLE_ARROW")]
    DoubleArrow,
    #[doc(alias = "GDK_DRAFT_LARGE")]
    DraftLarge,
    #[doc(alias = "GDK_DRAFT_SMALL")]
    DraftSmall,
    #[doc(alias = "GDK_DRAPED_BOX")]
    DrapedBox,
    #[doc(alias = "GDK_EXCHANGE")]
    Exchange,
    #[doc(alias = "GDK_FLEUR")]
    Fleur,
    #[doc(alias = "GDK_GOBBLER")]
    Gobbler,
    #[doc(alias = "GDK_GUMBY")]
    Gumby,
    #[doc(alias = "GDK_HAND1")]
    Hand1,
    #[doc(alias = "GDK_HAND2")]
    Hand2,
    #[doc(alias = "GDK_HEART")]
    Heart,
    #[doc(alias = "GDK_ICON")]
    Icon,
    #[doc(alias = "GDK_IRON_CROSS")]
    IronCross,
    #[doc(alias = "GDK_LEFT_PTR")]
    LeftPtr,
    #[doc(alias = "GDK_LEFT_SIDE")]
    LeftSide,
    #[doc(alias = "GDK_LEFT_TEE")]
    LeftTee,
    #[doc(alias = "GDK_LEFTBUTTON")]
    Leftbutton,
    #[doc(alias = "GDK_LL_ANGLE")]
    LlAngle,
    #[doc(alias = "GDK_LR_ANGLE")]
    LrAngle,
    #[doc(alias = "GDK_MAN")]
    Man,
    #[doc(alias = "GDK_MIDDLEBUTTON")]
    Middlebutton,
    #[doc(alias = "GDK_MOUSE")]
    Mouse,
    #[doc(alias = "GDK_PENCIL")]
    Pencil,
    #[doc(alias = "GDK_PIRATE")]
    Pirate,
    #[doc(alias = "GDK_PLUS")]
    Plus,
    #[doc(alias = "GDK_QUESTION_ARROW")]
    QuestionArrow,
    #[doc(alias = "GDK_RIGHT_PTR")]
    RightPtr,
    #[doc(alias = "GDK_RIGHT_SIDE")]
    RightSide,
    #[doc(alias = "GDK_RIGHT_TEE")]
    RightTee,
    #[doc(alias = "GDK_RIGHTBUTTON")]
    Rightbutton,
    #[doc(alias = "GDK_RTL_LOGO")]
    RtlLogo,
    #[doc(alias = "GDK_SAILBOAT")]
    Sailboat,
    #[doc(alias = "GDK_SB_DOWN_ARROW")]
    SbDownArrow,
    #[doc(alias = "GDK_SB_H_DOUBLE_ARROW")]
    SbHDoubleArrow,
    #[doc(alias = "GDK_SB_LEFT_ARROW")]
    SbLeftArrow,
    #[doc(alias = "GDK_SB_RIGHT_ARROW")]
    SbRightArrow,
    #[doc(alias = "GDK_SB_UP_ARROW")]
    SbUpArrow,
    #[doc(alias = "GDK_SB_V_DOUBLE_ARROW")]
    SbVDoubleArrow,
    #[doc(alias = "GDK_SHUTTLE")]
    Shuttle,
    #[doc(alias = "GDK_SIZING")]
    Sizing,
    #[doc(alias = "GDK_SPIDER")]
    Spider,
    #[doc(alias = "GDK_SPRAYCAN")]
    Spraycan,
    #[doc(alias = "GDK_STAR")]
    Star,
    #[doc(alias = "GDK_TARGET")]
    Target,
    #[doc(alias = "GDK_TCROSS")]
    Tcross,
    #[doc(alias = "GDK_TOP_LEFT_ARROW")]
    TopLeftArrow,
    #[doc(alias = "GDK_TOP_LEFT_CORNER")]
    TopLeftCorner,
    #[doc(alias = "GDK_TOP_RIGHT_CORNER")]
    TopRightCorner,
    #[doc(alias = "GDK_TOP_SIDE")]
    TopSide,
    #[doc(alias = "GDK_TOP_TEE")]
    TopTee,
    #[doc(alias = "GDK_TREK")]
    Trek,
    #[doc(alias = "GDK_UL_ANGLE")]
    UlAngle,
    #[doc(alias = "GDK_UMBRELLA")]
    Umbrella,
    #[doc(alias = "GDK_UR_ANGLE")]
    UrAngle,
    #[doc(alias = "GDK_WATCH")]
    Watch,
    #[doc(alias = "GDK_XTERM")]
    Xterm,
    #[doc(alias = "GDK_LAST_CURSOR")]
    LastCursor,
    #[doc(alias = "GDK_BLANK_CURSOR")]
    BlankCursor,
    #[doc(alias = "GDK_CURSOR_IS_PIXMAP")]
    CursorIsPixmap,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CursorType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "CursorType::{}",
            match *self {
                CursorType::XCursor => "XCursor",
                CursorType::Arrow => "Arrow",
                CursorType::BasedArrowDown => "BasedArrowDown",
                CursorType::BasedArrowUp => "BasedArrowUp",
                CursorType::Boat => "Boat",
                CursorType::Bogosity => "Bogosity",
                CursorType::BottomLeftCorner => "BottomLeftCorner",
                CursorType::BottomRightCorner => "BottomRightCorner",
                CursorType::BottomSide => "BottomSide",
                CursorType::BottomTee => "BottomTee",
                CursorType::BoxSpiral => "BoxSpiral",
                CursorType::CenterPtr => "CenterPtr",
                CursorType::Circle => "Circle",
                CursorType::Clock => "Clock",
                CursorType::CoffeeMug => "CoffeeMug",
                CursorType::Cross => "Cross",
                CursorType::CrossReverse => "CrossReverse",
                CursorType::Crosshair => "Crosshair",
                CursorType::DiamondCross => "DiamondCross",
                CursorType::Dot => "Dot",
                CursorType::Dotbox => "Dotbox",
                CursorType::DoubleArrow => "DoubleArrow",
                CursorType::DraftLarge => "DraftLarge",
                CursorType::DraftSmall => "DraftSmall",
                CursorType::DrapedBox => "DrapedBox",
                CursorType::Exchange => "Exchange",
                CursorType::Fleur => "Fleur",
                CursorType::Gobbler => "Gobbler",
                CursorType::Gumby => "Gumby",
                CursorType::Hand1 => "Hand1",
                CursorType::Hand2 => "Hand2",
                CursorType::Heart => "Heart",
                CursorType::Icon => "Icon",
                CursorType::IronCross => "IronCross",
                CursorType::LeftPtr => "LeftPtr",
                CursorType::LeftSide => "LeftSide",
                CursorType::LeftTee => "LeftTee",
                CursorType::Leftbutton => "Leftbutton",
                CursorType::LlAngle => "LlAngle",
                CursorType::LrAngle => "LrAngle",
                CursorType::Man => "Man",
                CursorType::Middlebutton => "Middlebutton",
                CursorType::Mouse => "Mouse",
                CursorType::Pencil => "Pencil",
                CursorType::Pirate => "Pirate",
                CursorType::Plus => "Plus",
                CursorType::QuestionArrow => "QuestionArrow",
                CursorType::RightPtr => "RightPtr",
                CursorType::RightSide => "RightSide",
                CursorType::RightTee => "RightTee",
                CursorType::Rightbutton => "Rightbutton",
                CursorType::RtlLogo => "RtlLogo",
                CursorType::Sailboat => "Sailboat",
                CursorType::SbDownArrow => "SbDownArrow",
                CursorType::SbHDoubleArrow => "SbHDoubleArrow",
                CursorType::SbLeftArrow => "SbLeftArrow",
                CursorType::SbRightArrow => "SbRightArrow",
                CursorType::SbUpArrow => "SbUpArrow",
                CursorType::SbVDoubleArrow => "SbVDoubleArrow",
                CursorType::Shuttle => "Shuttle",
                CursorType::Sizing => "Sizing",
                CursorType::Spider => "Spider",
                CursorType::Spraycan => "Spraycan",
                CursorType::Star => "Star",
                CursorType::Target => "Target",
                CursorType::Tcross => "Tcross",
                CursorType::TopLeftArrow => "TopLeftArrow",
                CursorType::TopLeftCorner => "TopLeftCorner",
                CursorType::TopRightCorner => "TopRightCorner",
                CursorType::TopSide => "TopSide",
                CursorType::TopTee => "TopTee",
                CursorType::Trek => "Trek",
                CursorType::UlAngle => "UlAngle",
                CursorType::Umbrella => "Umbrella",
                CursorType::UrAngle => "UrAngle",
                CursorType::Watch => "Watch",
                CursorType::Xterm => "Xterm",
                CursorType::LastCursor => "LastCursor",
                CursorType::BlankCursor => "BlankCursor",
                CursorType::CursorIsPixmap => "CursorIsPixmap",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for CursorType {
    type GlibType = ffi::GdkCursorType;

    fn into_glib(self) -> ffi::GdkCursorType {
        match self {
            CursorType::XCursor => ffi::GDK_X_CURSOR,
            CursorType::Arrow => ffi::GDK_ARROW,
            CursorType::BasedArrowDown => ffi::GDK_BASED_ARROW_DOWN,
            CursorType::BasedArrowUp => ffi::GDK_BASED_ARROW_UP,
            CursorType::Boat => ffi::GDK_BOAT,
            CursorType::Bogosity => ffi::GDK_BOGOSITY,
            CursorType::BottomLeftCorner => ffi::GDK_BOTTOM_LEFT_CORNER,
            CursorType::BottomRightCorner => ffi::GDK_BOTTOM_RIGHT_CORNER,
            CursorType::BottomSide => ffi::GDK_BOTTOM_SIDE,
            CursorType::BottomTee => ffi::GDK_BOTTOM_TEE,
            CursorType::BoxSpiral => ffi::GDK_BOX_SPIRAL,
            CursorType::CenterPtr => ffi::GDK_CENTER_PTR,
            CursorType::Circle => ffi::GDK_CIRCLE,
            CursorType::Clock => ffi::GDK_CLOCK,
            CursorType::CoffeeMug => ffi::GDK_COFFEE_MUG,
            CursorType::Cross => ffi::GDK_CROSS,
            CursorType::CrossReverse => ffi::GDK_CROSS_REVERSE,
            CursorType::Crosshair => ffi::GDK_CROSSHAIR,
            CursorType::DiamondCross => ffi::GDK_DIAMOND_CROSS,
            CursorType::Dot => ffi::GDK_DOT,
            CursorType::Dotbox => ffi::GDK_DOTBOX,
            CursorType::DoubleArrow => ffi::GDK_DOUBLE_ARROW,
            CursorType::DraftLarge => ffi::GDK_DRAFT_LARGE,
            CursorType::DraftSmall => ffi::GDK_DRAFT_SMALL,
            CursorType::DrapedBox => ffi::GDK_DRAPED_BOX,
            CursorType::Exchange => ffi::GDK_EXCHANGE,
            CursorType::Fleur => ffi::GDK_FLEUR,
            CursorType::Gobbler => ffi::GDK_GOBBLER,
            CursorType::Gumby => ffi::GDK_GUMBY,
            CursorType::Hand1 => ffi::GDK_HAND1,
            CursorType::Hand2 => ffi::GDK_HAND2,
            CursorType::Heart => ffi::GDK_HEART,
            CursorType::Icon => ffi::GDK_ICON,
            CursorType::IronCross => ffi::GDK_IRON_CROSS,
            CursorType::LeftPtr => ffi::GDK_LEFT_PTR,
            CursorType::LeftSide => ffi::GDK_LEFT_SIDE,
            CursorType::LeftTee => ffi::GDK_LEFT_TEE,
            CursorType::Leftbutton => ffi::GDK_LEFTBUTTON,
            CursorType::LlAngle => ffi::GDK_LL_ANGLE,
            CursorType::LrAngle => ffi::GDK_LR_ANGLE,
            CursorType::Man => ffi::GDK_MAN,
            CursorType::Middlebutton => ffi::GDK_MIDDLEBUTTON,
            CursorType::Mouse => ffi::GDK_MOUSE,
            CursorType::Pencil => ffi::GDK_PENCIL,
            CursorType::Pirate => ffi::GDK_PIRATE,
            CursorType::Plus => ffi::GDK_PLUS,
            CursorType::QuestionArrow => ffi::GDK_QUESTION_ARROW,
            CursorType::RightPtr => ffi::GDK_RIGHT_PTR,
            CursorType::RightSide => ffi::GDK_RIGHT_SIDE,
            CursorType::RightTee => ffi::GDK_RIGHT_TEE,
            CursorType::Rightbutton => ffi::GDK_RIGHTBUTTON,
            CursorType::RtlLogo => ffi::GDK_RTL_LOGO,
            CursorType::Sailboat => ffi::GDK_SAILBOAT,
            CursorType::SbDownArrow => ffi::GDK_SB_DOWN_ARROW,
            CursorType::SbHDoubleArrow => ffi::GDK_SB_H_DOUBLE_ARROW,
            CursorType::SbLeftArrow => ffi::GDK_SB_LEFT_ARROW,
            CursorType::SbRightArrow => ffi::GDK_SB_RIGHT_ARROW,
            CursorType::SbUpArrow => ffi::GDK_SB_UP_ARROW,
            CursorType::SbVDoubleArrow => ffi::GDK_SB_V_DOUBLE_ARROW,
            CursorType::Shuttle => ffi::GDK_SHUTTLE,
            CursorType::Sizing => ffi::GDK_SIZING,
            CursorType::Spider => ffi::GDK_SPIDER,
            CursorType::Spraycan => ffi::GDK_SPRAYCAN,
            CursorType::Star => ffi::GDK_STAR,
            CursorType::Target => ffi::GDK_TARGET,
            CursorType::Tcross => ffi::GDK_TCROSS,
            CursorType::TopLeftArrow => ffi::GDK_TOP_LEFT_ARROW,
            CursorType::TopLeftCorner => ffi::GDK_TOP_LEFT_CORNER,
            CursorType::TopRightCorner => ffi::GDK_TOP_RIGHT_CORNER,
            CursorType::TopSide => ffi::GDK_TOP_SIDE,
            CursorType::TopTee => ffi::GDK_TOP_TEE,
            CursorType::Trek => ffi::GDK_TREK,
            CursorType::UlAngle => ffi::GDK_UL_ANGLE,
            CursorType::Umbrella => ffi::GDK_UMBRELLA,
            CursorType::UrAngle => ffi::GDK_UR_ANGLE,
            CursorType::Watch => ffi::GDK_WATCH,
            CursorType::Xterm => ffi::GDK_XTERM,
            CursorType::LastCursor => ffi::GDK_LAST_CURSOR,
            CursorType::BlankCursor => ffi::GDK_BLANK_CURSOR,
            CursorType::CursorIsPixmap => ffi::GDK_CURSOR_IS_PIXMAP,
            CursorType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkCursorType> for CursorType {
    unsafe fn from_glib(value: ffi::GdkCursorType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CursorType::XCursor,
            2 => CursorType::Arrow,
            4 => CursorType::BasedArrowDown,
            6 => CursorType::BasedArrowUp,
            8 => CursorType::Boat,
            10 => CursorType::Bogosity,
            12 => CursorType::BottomLeftCorner,
            14 => CursorType::BottomRightCorner,
            16 => CursorType::BottomSide,
            18 => CursorType::BottomTee,
            20 => CursorType::BoxSpiral,
            22 => CursorType::CenterPtr,
            24 => CursorType::Circle,
            26 => CursorType::Clock,
            28 => CursorType::CoffeeMug,
            30 => CursorType::Cross,
            32 => CursorType::CrossReverse,
            34 => CursorType::Crosshair,
            36 => CursorType::DiamondCross,
            38 => CursorType::Dot,
            40 => CursorType::Dotbox,
            42 => CursorType::DoubleArrow,
            44 => CursorType::DraftLarge,
            46 => CursorType::DraftSmall,
            48 => CursorType::DrapedBox,
            50 => CursorType::Exchange,
            52 => CursorType::Fleur,
            54 => CursorType::Gobbler,
            56 => CursorType::Gumby,
            58 => CursorType::Hand1,
            60 => CursorType::Hand2,
            62 => CursorType::Heart,
            64 => CursorType::Icon,
            66 => CursorType::IronCross,
            68 => CursorType::LeftPtr,
            70 => CursorType::LeftSide,
            72 => CursorType::LeftTee,
            74 => CursorType::Leftbutton,
            76 => CursorType::LlAngle,
            78 => CursorType::LrAngle,
            80 => CursorType::Man,
            82 => CursorType::Middlebutton,
            84 => CursorType::Mouse,
            86 => CursorType::Pencil,
            88 => CursorType::Pirate,
            90 => CursorType::Plus,
            92 => CursorType::QuestionArrow,
            94 => CursorType::RightPtr,
            96 => CursorType::RightSide,
            98 => CursorType::RightTee,
            100 => CursorType::Rightbutton,
            102 => CursorType::RtlLogo,
            104 => CursorType::Sailboat,
            106 => CursorType::SbDownArrow,
            108 => CursorType::SbHDoubleArrow,
            110 => CursorType::SbLeftArrow,
            112 => CursorType::SbRightArrow,
            114 => CursorType::SbUpArrow,
            116 => CursorType::SbVDoubleArrow,
            118 => CursorType::Shuttle,
            120 => CursorType::Sizing,
            122 => CursorType::Spider,
            124 => CursorType::Spraycan,
            126 => CursorType::Star,
            128 => CursorType::Target,
            130 => CursorType::Tcross,
            132 => CursorType::TopLeftArrow,
            134 => CursorType::TopLeftCorner,
            136 => CursorType::TopRightCorner,
            138 => CursorType::TopSide,
            140 => CursorType::TopTee,
            142 => CursorType::Trek,
            144 => CursorType::UlAngle,
            146 => CursorType::Umbrella,
            148 => CursorType::UrAngle,
            150 => CursorType::Watch,
            152 => CursorType::Xterm,
            153 => CursorType::LastCursor,
            -2 => CursorType::BlankCursor,
            -1 => CursorType::CursorIsPixmap,
            value => CursorType::__Unknown(value),
        }
    }
}

impl StaticType for CursorType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_cursor_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for CursorType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for CursorType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for CursorType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkDevicePadFeature")]
pub enum DevicePadFeature {
    #[doc(alias = "GDK_DEVICE_PAD_FEATURE_BUTTON")]
    Button,
    #[doc(alias = "GDK_DEVICE_PAD_FEATURE_RING")]
    Ring,
    #[doc(alias = "GDK_DEVICE_PAD_FEATURE_STRIP")]
    Strip,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl fmt::Display for DevicePadFeature {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DevicePadFeature::{}",
            match *self {
                DevicePadFeature::Button => "Button",
                DevicePadFeature::Ring => "Ring",
                DevicePadFeature::Strip => "Strip",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
#[doc(hidden)]
impl IntoGlib for DevicePadFeature {
    type GlibType = ffi::GdkDevicePadFeature;

    fn into_glib(self) -> ffi::GdkDevicePadFeature {
        match self {
            DevicePadFeature::Button => ffi::GDK_DEVICE_PAD_FEATURE_BUTTON,
            DevicePadFeature::Ring => ffi::GDK_DEVICE_PAD_FEATURE_RING,
            DevicePadFeature::Strip => ffi::GDK_DEVICE_PAD_FEATURE_STRIP,
            DevicePadFeature::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
#[doc(hidden)]
impl FromGlib<ffi::GdkDevicePadFeature> for DevicePadFeature {
    unsafe fn from_glib(value: ffi::GdkDevicePadFeature) -> Self {
        skip_assert_initialized!();
        match value {
            0 => DevicePadFeature::Button,
            1 => DevicePadFeature::Ring,
            2 => DevicePadFeature::Strip,
            value => DevicePadFeature::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl StaticType for DevicePadFeature {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_device_pad_feature_get_type()) }
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl<'a> FromValueOptional<'a> for DevicePadFeature {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl<'a> FromValue<'a> for DevicePadFeature {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl SetValue for DevicePadFeature {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkDeviceToolType")]
pub enum DeviceToolType {
    #[doc(alias = "GDK_DEVICE_TOOL_TYPE_UNKNOWN")]
    Unknown,
    #[doc(alias = "GDK_DEVICE_TOOL_TYPE_PEN")]
    Pen,
    #[doc(alias = "GDK_DEVICE_TOOL_TYPE_ERASER")]
    Eraser,
    #[doc(alias = "GDK_DEVICE_TOOL_TYPE_BRUSH")]
    Brush,
    #[doc(alias = "GDK_DEVICE_TOOL_TYPE_PENCIL")]
    Pencil,
    #[doc(alias = "GDK_DEVICE_TOOL_TYPE_AIRBRUSH")]
    Airbrush,
    #[doc(alias = "GDK_DEVICE_TOOL_TYPE_MOUSE")]
    Mouse,
    #[doc(alias = "GDK_DEVICE_TOOL_TYPE_LENS")]
    Lens,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl fmt::Display for DeviceToolType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DeviceToolType::{}",
            match *self {
                DeviceToolType::Unknown => "Unknown",
                DeviceToolType::Pen => "Pen",
                DeviceToolType::Eraser => "Eraser",
                DeviceToolType::Brush => "Brush",
                DeviceToolType::Pencil => "Pencil",
                DeviceToolType::Airbrush => "Airbrush",
                DeviceToolType::Mouse => "Mouse",
                DeviceToolType::Lens => "Lens",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
#[doc(hidden)]
impl IntoGlib for DeviceToolType {
    type GlibType = ffi::GdkDeviceToolType;

    fn into_glib(self) -> ffi::GdkDeviceToolType {
        match self {
            DeviceToolType::Unknown => ffi::GDK_DEVICE_TOOL_TYPE_UNKNOWN,
            DeviceToolType::Pen => ffi::GDK_DEVICE_TOOL_TYPE_PEN,
            DeviceToolType::Eraser => ffi::GDK_DEVICE_TOOL_TYPE_ERASER,
            DeviceToolType::Brush => ffi::GDK_DEVICE_TOOL_TYPE_BRUSH,
            DeviceToolType::Pencil => ffi::GDK_DEVICE_TOOL_TYPE_PENCIL,
            DeviceToolType::Airbrush => ffi::GDK_DEVICE_TOOL_TYPE_AIRBRUSH,
            DeviceToolType::Mouse => ffi::GDK_DEVICE_TOOL_TYPE_MOUSE,
            DeviceToolType::Lens => ffi::GDK_DEVICE_TOOL_TYPE_LENS,
            DeviceToolType::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
#[doc(hidden)]
impl FromGlib<ffi::GdkDeviceToolType> for DeviceToolType {
    unsafe fn from_glib(value: ffi::GdkDeviceToolType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => DeviceToolType::Unknown,
            1 => DeviceToolType::Pen,
            2 => DeviceToolType::Eraser,
            3 => DeviceToolType::Brush,
            4 => DeviceToolType::Pencil,
            5 => DeviceToolType::Airbrush,
            6 => DeviceToolType::Mouse,
            7 => DeviceToolType::Lens,
            value => DeviceToolType::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl StaticType for DeviceToolType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_device_tool_type_get_type()) }
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl<'a> FromValueOptional<'a> for DeviceToolType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl<'a> FromValue<'a> for DeviceToolType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl SetValue for DeviceToolType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkDeviceType")]
pub enum DeviceType {
    #[doc(alias = "GDK_DEVICE_TYPE_MASTER")]
    Master,
    #[doc(alias = "GDK_DEVICE_TYPE_SLAVE")]
    Slave,
    #[doc(alias = "GDK_DEVICE_TYPE_FLOATING")]
    Floating,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for DeviceType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DeviceType::{}",
            match *self {
                DeviceType::Master => "Master",
                DeviceType::Slave => "Slave",
                DeviceType::Floating => "Floating",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for DeviceType {
    type GlibType = ffi::GdkDeviceType;

    fn into_glib(self) -> ffi::GdkDeviceType {
        match self {
            DeviceType::Master => ffi::GDK_DEVICE_TYPE_MASTER,
            DeviceType::Slave => ffi::GDK_DEVICE_TYPE_SLAVE,
            DeviceType::Floating => ffi::GDK_DEVICE_TYPE_FLOATING,
            DeviceType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkDeviceType> for DeviceType {
    unsafe fn from_glib(value: ffi::GdkDeviceType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => DeviceType::Master,
            1 => DeviceType::Slave,
            2 => DeviceType::Floating,
            value => DeviceType::__Unknown(value),
        }
    }
}

impl StaticType for DeviceType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_device_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for DeviceType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for DeviceType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for DeviceType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[cfg(any(feature = "v3_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_20")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkDragCancelReason")]
pub enum DragCancelReason {
    #[doc(alias = "GDK_DRAG_CANCEL_NO_TARGET")]
    NoTarget,
    #[doc(alias = "GDK_DRAG_CANCEL_USER_CANCELLED")]
    UserCancelled,
    #[doc(alias = "GDK_DRAG_CANCEL_ERROR")]
    Error,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v3_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_20")))]
impl fmt::Display for DragCancelReason {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DragCancelReason::{}",
            match *self {
                DragCancelReason::NoTarget => "NoTarget",
                DragCancelReason::UserCancelled => "UserCancelled",
                DragCancelReason::Error => "Error",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v3_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_20")))]
#[doc(hidden)]
impl IntoGlib for DragCancelReason {
    type GlibType = ffi::GdkDragCancelReason;

    fn into_glib(self) -> ffi::GdkDragCancelReason {
        match self {
            DragCancelReason::NoTarget => ffi::GDK_DRAG_CANCEL_NO_TARGET,
            DragCancelReason::UserCancelled => ffi::GDK_DRAG_CANCEL_USER_CANCELLED,
            DragCancelReason::Error => ffi::GDK_DRAG_CANCEL_ERROR,
            DragCancelReason::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v3_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_20")))]
#[doc(hidden)]
impl FromGlib<ffi::GdkDragCancelReason> for DragCancelReason {
    unsafe fn from_glib(value: ffi::GdkDragCancelReason) -> Self {
        skip_assert_initialized!();
        match value {
            0 => DragCancelReason::NoTarget,
            1 => DragCancelReason::UserCancelled,
            2 => DragCancelReason::Error,
            value => DragCancelReason::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v3_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_20")))]
impl StaticType for DragCancelReason {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_drag_cancel_reason_get_type()) }
    }
}

#[cfg(any(feature = "v3_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_20")))]
impl<'a> FromValueOptional<'a> for DragCancelReason {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v3_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_20")))]
impl<'a> FromValue<'a> for DragCancelReason {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v3_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_20")))]
impl SetValue for DragCancelReason {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkDragProtocol")]
pub enum DragProtocol {
    #[doc(alias = "GDK_DRAG_PROTO_NONE")]
    None,
    #[doc(alias = "GDK_DRAG_PROTO_MOTIF")]
    Motif,
    #[doc(alias = "GDK_DRAG_PROTO_XDND")]
    Xdnd,
    #[doc(alias = "GDK_DRAG_PROTO_ROOTWIN")]
    Rootwin,
    #[doc(alias = "GDK_DRAG_PROTO_WIN32_DROPFILES")]
    Win32Dropfiles,
    #[doc(alias = "GDK_DRAG_PROTO_OLE2")]
    Ole2,
    #[doc(alias = "GDK_DRAG_PROTO_LOCAL")]
    Local,
    #[doc(alias = "GDK_DRAG_PROTO_WAYLAND")]
    Wayland,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for DragProtocol {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DragProtocol::{}",
            match *self {
                DragProtocol::None => "None",
                DragProtocol::Motif => "Motif",
                DragProtocol::Xdnd => "Xdnd",
                DragProtocol::Rootwin => "Rootwin",
                DragProtocol::Win32Dropfiles => "Win32Dropfiles",
                DragProtocol::Ole2 => "Ole2",
                DragProtocol::Local => "Local",
                DragProtocol::Wayland => "Wayland",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for DragProtocol {
    type GlibType = ffi::GdkDragProtocol;

    fn into_glib(self) -> ffi::GdkDragProtocol {
        match self {
            DragProtocol::None => ffi::GDK_DRAG_PROTO_NONE,
            DragProtocol::Motif => ffi::GDK_DRAG_PROTO_MOTIF,
            DragProtocol::Xdnd => ffi::GDK_DRAG_PROTO_XDND,
            DragProtocol::Rootwin => ffi::GDK_DRAG_PROTO_ROOTWIN,
            DragProtocol::Win32Dropfiles => ffi::GDK_DRAG_PROTO_WIN32_DROPFILES,
            DragProtocol::Ole2 => ffi::GDK_DRAG_PROTO_OLE2,
            DragProtocol::Local => ffi::GDK_DRAG_PROTO_LOCAL,
            DragProtocol::Wayland => ffi::GDK_DRAG_PROTO_WAYLAND,
            DragProtocol::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkDragProtocol> for DragProtocol {
    unsafe fn from_glib(value: ffi::GdkDragProtocol) -> Self {
        skip_assert_initialized!();
        match value {
            0 => DragProtocol::None,
            1 => DragProtocol::Motif,
            2 => DragProtocol::Xdnd,
            3 => DragProtocol::Rootwin,
            4 => DragProtocol::Win32Dropfiles,
            5 => DragProtocol::Ole2,
            6 => DragProtocol::Local,
            7 => DragProtocol::Wayland,
            value => DragProtocol::__Unknown(value),
        }
    }
}

impl StaticType for DragProtocol {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_drag_protocol_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for DragProtocol {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for DragProtocol {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for DragProtocol {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkEventType")]
pub enum EventType {
    #[doc(alias = "GDK_NOTHING")]
    Nothing,
    #[doc(alias = "GDK_DELETE")]
    Delete,
    #[doc(alias = "GDK_DESTROY")]
    Destroy,
    #[doc(alias = "GDK_EXPOSE")]
    Expose,
    #[doc(alias = "GDK_MOTION_NOTIFY")]
    MotionNotify,
    #[doc(alias = "GDK_BUTTON_PRESS")]
    ButtonPress,
    #[doc(alias = "GDK_DOUBLE_BUTTON_PRESS")]
    DoubleButtonPress,
    #[doc(alias = "GDK_TRIPLE_BUTTON_PRESS")]
    TripleButtonPress,
    #[doc(alias = "GDK_BUTTON_RELEASE")]
    ButtonRelease,
    #[doc(alias = "GDK_KEY_PRESS")]
    KeyPress,
    #[doc(alias = "GDK_KEY_RELEASE")]
    KeyRelease,
    #[doc(alias = "GDK_ENTER_NOTIFY")]
    EnterNotify,
    #[doc(alias = "GDK_LEAVE_NOTIFY")]
    LeaveNotify,
    #[doc(alias = "GDK_FOCUS_CHANGE")]
    FocusChange,
    #[doc(alias = "GDK_CONFIGURE")]
    Configure,
    #[doc(alias = "GDK_MAP")]
    Map,
    #[doc(alias = "GDK_UNMAP")]
    Unmap,
    #[doc(alias = "GDK_PROPERTY_NOTIFY")]
    PropertyNotify,
    #[doc(alias = "GDK_SELECTION_CLEAR")]
    SelectionClear,
    #[doc(alias = "GDK_SELECTION_REQUEST")]
    SelectionRequest,
    #[doc(alias = "GDK_SELECTION_NOTIFY")]
    SelectionNotify,
    #[doc(alias = "GDK_PROXIMITY_IN")]
    ProximityIn,
    #[doc(alias = "GDK_PROXIMITY_OUT")]
    ProximityOut,
    #[doc(alias = "GDK_DRAG_ENTER")]
    DragEnter,
    #[doc(alias = "GDK_DRAG_LEAVE")]
    DragLeave,
    #[doc(alias = "GDK_DRAG_MOTION")]
    DragMotion,
    #[doc(alias = "GDK_DRAG_STATUS")]
    DragStatus,
    #[doc(alias = "GDK_DROP_START")]
    DropStart,
    #[doc(alias = "GDK_DROP_FINISHED")]
    DropFinished,
    #[doc(alias = "GDK_CLIENT_EVENT")]
    ClientEvent,
    #[doc(alias = "GDK_VISIBILITY_NOTIFY")]
    VisibilityNotify,
    #[doc(alias = "GDK_SCROLL")]
    Scroll,
    #[doc(alias = "GDK_WINDOW_STATE")]
    WindowState,
    #[doc(alias = "GDK_SETTING")]
    Setting,
    #[doc(alias = "GDK_OWNER_CHANGE")]
    OwnerChange,
    #[doc(alias = "GDK_GRAB_BROKEN")]
    GrabBroken,
    #[doc(alias = "GDK_DAMAGE")]
    Damage,
    #[doc(alias = "GDK_TOUCH_BEGIN")]
    TouchBegin,
    #[doc(alias = "GDK_TOUCH_UPDATE")]
    TouchUpdate,
    #[doc(alias = "GDK_TOUCH_END")]
    TouchEnd,
    #[doc(alias = "GDK_TOUCH_CANCEL")]
    TouchCancel,
    #[cfg(any(feature = "v3_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v3_18")))]
    #[doc(alias = "GDK_TOUCHPAD_SWIPE")]
    TouchpadSwipe,
    #[cfg(any(feature = "v3_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v3_18")))]
    #[doc(alias = "GDK_TOUCHPAD_PINCH")]
    TouchpadPinch,
    #[doc(alias = "GDK_PAD_BUTTON_PRESS")]
    PadButtonPress,
    #[doc(alias = "GDK_PAD_BUTTON_RELEASE")]
    PadButtonRelease,
    #[doc(alias = "GDK_PAD_RING")]
    PadRing,
    #[doc(alias = "GDK_PAD_STRIP")]
    PadStrip,
    #[doc(alias = "GDK_PAD_GROUP_MODE")]
    PadGroupMode,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EventType::{}",
            match *self {
                EventType::Nothing => "Nothing",
                EventType::Delete => "Delete",
                EventType::Destroy => "Destroy",
                EventType::Expose => "Expose",
                EventType::MotionNotify => "MotionNotify",
                EventType::ButtonPress => "ButtonPress",
                EventType::DoubleButtonPress => "DoubleButtonPress",
                EventType::TripleButtonPress => "TripleButtonPress",
                EventType::ButtonRelease => "ButtonRelease",
                EventType::KeyPress => "KeyPress",
                EventType::KeyRelease => "KeyRelease",
                EventType::EnterNotify => "EnterNotify",
                EventType::LeaveNotify => "LeaveNotify",
                EventType::FocusChange => "FocusChange",
                EventType::Configure => "Configure",
                EventType::Map => "Map",
                EventType::Unmap => "Unmap",
                EventType::PropertyNotify => "PropertyNotify",
                EventType::SelectionClear => "SelectionClear",
                EventType::SelectionRequest => "SelectionRequest",
                EventType::SelectionNotify => "SelectionNotify",
                EventType::ProximityIn => "ProximityIn",
                EventType::ProximityOut => "ProximityOut",
                EventType::DragEnter => "DragEnter",
                EventType::DragLeave => "DragLeave",
                EventType::DragMotion => "DragMotion",
                EventType::DragStatus => "DragStatus",
                EventType::DropStart => "DropStart",
                EventType::DropFinished => "DropFinished",
                EventType::ClientEvent => "ClientEvent",
                EventType::VisibilityNotify => "VisibilityNotify",
                EventType::Scroll => "Scroll",
                EventType::WindowState => "WindowState",
                EventType::Setting => "Setting",
                EventType::OwnerChange => "OwnerChange",
                EventType::GrabBroken => "GrabBroken",
                EventType::Damage => "Damage",
                EventType::TouchBegin => "TouchBegin",
                EventType::TouchUpdate => "TouchUpdate",
                EventType::TouchEnd => "TouchEnd",
                EventType::TouchCancel => "TouchCancel",
                #[cfg(any(feature = "v3_18", feature = "dox"))]
                EventType::TouchpadSwipe => "TouchpadSwipe",
                #[cfg(any(feature = "v3_18", feature = "dox"))]
                EventType::TouchpadPinch => "TouchpadPinch",
                EventType::PadButtonPress => "PadButtonPress",
                EventType::PadButtonRelease => "PadButtonRelease",
                EventType::PadRing => "PadRing",
                EventType::PadStrip => "PadStrip",
                EventType::PadGroupMode => "PadGroupMode",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for EventType {
    type GlibType = ffi::GdkEventType;

    fn into_glib(self) -> ffi::GdkEventType {
        match self {
            EventType::Nothing => ffi::GDK_NOTHING,
            EventType::Delete => ffi::GDK_DELETE,
            EventType::Destroy => ffi::GDK_DESTROY,
            EventType::Expose => ffi::GDK_EXPOSE,
            EventType::MotionNotify => ffi::GDK_MOTION_NOTIFY,
            EventType::ButtonPress => ffi::GDK_BUTTON_PRESS,
            EventType::DoubleButtonPress => ffi::GDK_DOUBLE_BUTTON_PRESS,
            EventType::TripleButtonPress => ffi::GDK_TRIPLE_BUTTON_PRESS,
            EventType::ButtonRelease => ffi::GDK_BUTTON_RELEASE,
            EventType::KeyPress => ffi::GDK_KEY_PRESS,
            EventType::KeyRelease => ffi::GDK_KEY_RELEASE,
            EventType::EnterNotify => ffi::GDK_ENTER_NOTIFY,
            EventType::LeaveNotify => ffi::GDK_LEAVE_NOTIFY,
            EventType::FocusChange => ffi::GDK_FOCUS_CHANGE,
            EventType::Configure => ffi::GDK_CONFIGURE,
            EventType::Map => ffi::GDK_MAP,
            EventType::Unmap => ffi::GDK_UNMAP,
            EventType::PropertyNotify => ffi::GDK_PROPERTY_NOTIFY,
            EventType::SelectionClear => ffi::GDK_SELECTION_CLEAR,
            EventType::SelectionRequest => ffi::GDK_SELECTION_REQUEST,
            EventType::SelectionNotify => ffi::GDK_SELECTION_NOTIFY,
            EventType::ProximityIn => ffi::GDK_PROXIMITY_IN,
            EventType::ProximityOut => ffi::GDK_PROXIMITY_OUT,
            EventType::DragEnter => ffi::GDK_DRAG_ENTER,
            EventType::DragLeave => ffi::GDK_DRAG_LEAVE,
            EventType::DragMotion => ffi::GDK_DRAG_MOTION,
            EventType::DragStatus => ffi::GDK_DRAG_STATUS,
            EventType::DropStart => ffi::GDK_DROP_START,
            EventType::DropFinished => ffi::GDK_DROP_FINISHED,
            EventType::ClientEvent => ffi::GDK_CLIENT_EVENT,
            EventType::VisibilityNotify => ffi::GDK_VISIBILITY_NOTIFY,
            EventType::Scroll => ffi::GDK_SCROLL,
            EventType::WindowState => ffi::GDK_WINDOW_STATE,
            EventType::Setting => ffi::GDK_SETTING,
            EventType::OwnerChange => ffi::GDK_OWNER_CHANGE,
            EventType::GrabBroken => ffi::GDK_GRAB_BROKEN,
            EventType::Damage => ffi::GDK_DAMAGE,
            EventType::TouchBegin => ffi::GDK_TOUCH_BEGIN,
            EventType::TouchUpdate => ffi::GDK_TOUCH_UPDATE,
            EventType::TouchEnd => ffi::GDK_TOUCH_END,
            EventType::TouchCancel => ffi::GDK_TOUCH_CANCEL,
            #[cfg(any(feature = "v3_18", feature = "dox"))]
            EventType::TouchpadSwipe => ffi::GDK_TOUCHPAD_SWIPE,
            #[cfg(any(feature = "v3_18", feature = "dox"))]
            EventType::TouchpadPinch => ffi::GDK_TOUCHPAD_PINCH,
            EventType::PadButtonPress => ffi::GDK_PAD_BUTTON_PRESS,
            EventType::PadButtonRelease => ffi::GDK_PAD_BUTTON_RELEASE,
            EventType::PadRing => ffi::GDK_PAD_RING,
            EventType::PadStrip => ffi::GDK_PAD_STRIP,
            EventType::PadGroupMode => ffi::GDK_PAD_GROUP_MODE,
            EventType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkEventType> for EventType {
    unsafe fn from_glib(value: ffi::GdkEventType) -> Self {
        skip_assert_initialized!();
        match value {
            -1 => EventType::Nothing,
            0 => EventType::Delete,
            1 => EventType::Destroy,
            2 => EventType::Expose,
            3 => EventType::MotionNotify,
            4 => EventType::ButtonPress,
            5 => EventType::DoubleButtonPress,
            6 => EventType::TripleButtonPress,
            7 => EventType::ButtonRelease,
            8 => EventType::KeyPress,
            9 => EventType::KeyRelease,
            10 => EventType::EnterNotify,
            11 => EventType::LeaveNotify,
            12 => EventType::FocusChange,
            13 => EventType::Configure,
            14 => EventType::Map,
            15 => EventType::Unmap,
            16 => EventType::PropertyNotify,
            17 => EventType::SelectionClear,
            18 => EventType::SelectionRequest,
            19 => EventType::SelectionNotify,
            20 => EventType::ProximityIn,
            21 => EventType::ProximityOut,
            22 => EventType::DragEnter,
            23 => EventType::DragLeave,
            24 => EventType::DragMotion,
            25 => EventType::DragStatus,
            26 => EventType::DropStart,
            27 => EventType::DropFinished,
            28 => EventType::ClientEvent,
            29 => EventType::VisibilityNotify,
            31 => EventType::Scroll,
            32 => EventType::WindowState,
            33 => EventType::Setting,
            34 => EventType::OwnerChange,
            35 => EventType::GrabBroken,
            36 => EventType::Damage,
            37 => EventType::TouchBegin,
            38 => EventType::TouchUpdate,
            39 => EventType::TouchEnd,
            40 => EventType::TouchCancel,
            #[cfg(any(feature = "v3_18", feature = "dox"))]
            41 => EventType::TouchpadSwipe,
            #[cfg(any(feature = "v3_18", feature = "dox"))]
            42 => EventType::TouchpadPinch,
            43 => EventType::PadButtonPress,
            44 => EventType::PadButtonRelease,
            45 => EventType::PadRing,
            46 => EventType::PadStrip,
            47 => EventType::PadGroupMode,
            value => EventType::__Unknown(value),
        }
    }
}

impl StaticType for EventType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_event_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EventType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EventType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EventType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkFullscreenMode")]
pub enum FullscreenMode {
    #[doc(alias = "GDK_FULLSCREEN_ON_CURRENT_MONITOR")]
    CurrentMonitor,
    #[doc(alias = "GDK_FULLSCREEN_ON_ALL_MONITORS")]
    AllMonitors,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FullscreenMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FullscreenMode::{}",
            match *self {
                FullscreenMode::CurrentMonitor => "CurrentMonitor",
                FullscreenMode::AllMonitors => "AllMonitors",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FullscreenMode {
    type GlibType = ffi::GdkFullscreenMode;

    fn into_glib(self) -> ffi::GdkFullscreenMode {
        match self {
            FullscreenMode::CurrentMonitor => ffi::GDK_FULLSCREEN_ON_CURRENT_MONITOR,
            FullscreenMode::AllMonitors => ffi::GDK_FULLSCREEN_ON_ALL_MONITORS,
            FullscreenMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkFullscreenMode> for FullscreenMode {
    unsafe fn from_glib(value: ffi::GdkFullscreenMode) -> Self {
        skip_assert_initialized!();
        match value {
            0 => FullscreenMode::CurrentMonitor,
            1 => FullscreenMode::AllMonitors,
            value => FullscreenMode::__Unknown(value),
        }
    }
}

impl StaticType for FullscreenMode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_fullscreen_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for FullscreenMode {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for FullscreenMode {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for FullscreenMode {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkGLError")]
pub enum GLError {
    #[doc(alias = "GDK_GL_ERROR_NOT_AVAILABLE")]
    NotAvailable,
    #[doc(alias = "GDK_GL_ERROR_UNSUPPORTED_FORMAT")]
    UnsupportedFormat,
    #[doc(alias = "GDK_GL_ERROR_UNSUPPORTED_PROFILE")]
    UnsupportedProfile,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
impl fmt::Display for GLError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "GLError::{}",
            match *self {
                GLError::NotAvailable => "NotAvailable",
                GLError::UnsupportedFormat => "UnsupportedFormat",
                GLError::UnsupportedProfile => "UnsupportedProfile",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
#[doc(hidden)]
impl IntoGlib for GLError {
    type GlibType = ffi::GdkGLError;

    fn into_glib(self) -> ffi::GdkGLError {
        match self {
            GLError::NotAvailable => ffi::GDK_GL_ERROR_NOT_AVAILABLE,
            GLError::UnsupportedFormat => ffi::GDK_GL_ERROR_UNSUPPORTED_FORMAT,
            GLError::UnsupportedProfile => ffi::GDK_GL_ERROR_UNSUPPORTED_PROFILE,
            GLError::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
#[doc(hidden)]
impl FromGlib<ffi::GdkGLError> for GLError {
    unsafe fn from_glib(value: ffi::GdkGLError) -> Self {
        skip_assert_initialized!();
        match value {
            0 => GLError::NotAvailable,
            1 => GLError::UnsupportedFormat,
            2 => GLError::UnsupportedProfile,
            value => GLError::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
impl ErrorDomain for GLError {
    fn domain() -> Quark {
        skip_assert_initialized!();

        unsafe { from_glib(ffi::gdk_gl_error_quark()) }
    }

    fn code(self) -> i32 {
        self.into_glib()
    }

    fn from(code: i32) -> Option<Self> {
        skip_assert_initialized!();
        match code {
            0 => Some(GLError::NotAvailable),
            1 => Some(GLError::UnsupportedFormat),
            2 => Some(GLError::UnsupportedProfile),
            value => Some(GLError::__Unknown(value)),
        }
    }
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
impl StaticType for GLError {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_gl_error_get_type()) }
    }
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
impl<'a> FromValueOptional<'a> for GLError {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
impl<'a> FromValue<'a> for GLError {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_16")))]
impl SetValue for GLError {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkGrabOwnership")]
pub enum GrabOwnership {
    #[doc(alias = "GDK_OWNERSHIP_NONE")]
    None,
    #[doc(alias = "GDK_OWNERSHIP_WINDOW")]
    Window,
    #[doc(alias = "GDK_OWNERSHIP_APPLICATION")]
    Application,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for GrabOwnership {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "GrabOwnership::{}",
            match *self {
                GrabOwnership::None => "None",
                GrabOwnership::Window => "Window",
                GrabOwnership::Application => "Application",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for GrabOwnership {
    type GlibType = ffi::GdkGrabOwnership;

    fn into_glib(self) -> ffi::GdkGrabOwnership {
        match self {
            GrabOwnership::None => ffi::GDK_OWNERSHIP_NONE,
            GrabOwnership::Window => ffi::GDK_OWNERSHIP_WINDOW,
            GrabOwnership::Application => ffi::GDK_OWNERSHIP_APPLICATION,
            GrabOwnership::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkGrabOwnership> for GrabOwnership {
    unsafe fn from_glib(value: ffi::GdkGrabOwnership) -> Self {
        skip_assert_initialized!();
        match value {
            0 => GrabOwnership::None,
            1 => GrabOwnership::Window,
            2 => GrabOwnership::Application,
            value => GrabOwnership::__Unknown(value),
        }
    }
}

impl StaticType for GrabOwnership {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_grab_ownership_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for GrabOwnership {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for GrabOwnership {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for GrabOwnership {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkGrabStatus")]
pub enum GrabStatus {
    #[doc(alias = "GDK_GRAB_SUCCESS")]
    Success,
    #[doc(alias = "GDK_GRAB_ALREADY_GRABBED")]
    AlreadyGrabbed,
    #[doc(alias = "GDK_GRAB_INVALID_TIME")]
    InvalidTime,
    #[doc(alias = "GDK_GRAB_NOT_VIEWABLE")]
    NotViewable,
    #[doc(alias = "GDK_GRAB_FROZEN")]
    Frozen,
    #[doc(alias = "GDK_GRAB_FAILED")]
    Failed,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for GrabStatus {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "GrabStatus::{}",
            match *self {
                GrabStatus::Success => "Success",
                GrabStatus::AlreadyGrabbed => "AlreadyGrabbed",
                GrabStatus::InvalidTime => "InvalidTime",
                GrabStatus::NotViewable => "NotViewable",
                GrabStatus::Frozen => "Frozen",
                GrabStatus::Failed => "Failed",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for GrabStatus {
    type GlibType = ffi::GdkGrabStatus;

    fn into_glib(self) -> ffi::GdkGrabStatus {
        match self {
            GrabStatus::Success => ffi::GDK_GRAB_SUCCESS,
            GrabStatus::AlreadyGrabbed => ffi::GDK_GRAB_ALREADY_GRABBED,
            GrabStatus::InvalidTime => ffi::GDK_GRAB_INVALID_TIME,
            GrabStatus::NotViewable => ffi::GDK_GRAB_NOT_VIEWABLE,
            GrabStatus::Frozen => ffi::GDK_GRAB_FROZEN,
            GrabStatus::Failed => ffi::GDK_GRAB_FAILED,
            GrabStatus::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkGrabStatus> for GrabStatus {
    unsafe fn from_glib(value: ffi::GdkGrabStatus) -> Self {
        skip_assert_initialized!();
        match value {
            0 => GrabStatus::Success,
            1 => GrabStatus::AlreadyGrabbed,
            2 => GrabStatus::InvalidTime,
            3 => GrabStatus::NotViewable,
            4 => GrabStatus::Frozen,
            5 => GrabStatus::Failed,
            value => GrabStatus::__Unknown(value),
        }
    }
}

impl StaticType for GrabStatus {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_grab_status_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for GrabStatus {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for GrabStatus {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for GrabStatus {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkGravity")]
pub enum Gravity {
    #[doc(alias = "GDK_GRAVITY_NORTH_WEST")]
    NorthWest,
    #[doc(alias = "GDK_GRAVITY_NORTH")]
    North,
    #[doc(alias = "GDK_GRAVITY_NORTH_EAST")]
    NorthEast,
    #[doc(alias = "GDK_GRAVITY_WEST")]
    West,
    #[doc(alias = "GDK_GRAVITY_CENTER")]
    Center,
    #[doc(alias = "GDK_GRAVITY_EAST")]
    East,
    #[doc(alias = "GDK_GRAVITY_SOUTH_WEST")]
    SouthWest,
    #[doc(alias = "GDK_GRAVITY_SOUTH")]
    South,
    #[doc(alias = "GDK_GRAVITY_SOUTH_EAST")]
    SouthEast,
    #[doc(alias = "GDK_GRAVITY_STATIC")]
    Static,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Gravity {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Gravity::{}",
            match *self {
                Gravity::NorthWest => "NorthWest",
                Gravity::North => "North",
                Gravity::NorthEast => "NorthEast",
                Gravity::West => "West",
                Gravity::Center => "Center",
                Gravity::East => "East",
                Gravity::SouthWest => "SouthWest",
                Gravity::South => "South",
                Gravity::SouthEast => "SouthEast",
                Gravity::Static => "Static",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Gravity {
    type GlibType = ffi::GdkGravity;

    fn into_glib(self) -> ffi::GdkGravity {
        match self {
            Gravity::NorthWest => ffi::GDK_GRAVITY_NORTH_WEST,
            Gravity::North => ffi::GDK_GRAVITY_NORTH,
            Gravity::NorthEast => ffi::GDK_GRAVITY_NORTH_EAST,
            Gravity::West => ffi::GDK_GRAVITY_WEST,
            Gravity::Center => ffi::GDK_GRAVITY_CENTER,
            Gravity::East => ffi::GDK_GRAVITY_EAST,
            Gravity::SouthWest => ffi::GDK_GRAVITY_SOUTH_WEST,
            Gravity::South => ffi::GDK_GRAVITY_SOUTH,
            Gravity::SouthEast => ffi::GDK_GRAVITY_SOUTH_EAST,
            Gravity::Static => ffi::GDK_GRAVITY_STATIC,
            Gravity::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkGravity> for Gravity {
    unsafe fn from_glib(value: ffi::GdkGravity) -> Self {
        skip_assert_initialized!();
        match value {
            1 => Gravity::NorthWest,
            2 => Gravity::North,
            3 => Gravity::NorthEast,
            4 => Gravity::West,
            5 => Gravity::Center,
            6 => Gravity::East,
            7 => Gravity::SouthWest,
            8 => Gravity::South,
            9 => Gravity::SouthEast,
            10 => Gravity::Static,
            value => Gravity::__Unknown(value),
        }
    }
}

impl StaticType for Gravity {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_gravity_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Gravity {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Gravity {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Gravity {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkInputMode")]
pub enum InputMode {
    #[doc(alias = "GDK_MODE_DISABLED")]
    Disabled,
    #[doc(alias = "GDK_MODE_SCREEN")]
    Screen,
    #[doc(alias = "GDK_MODE_WINDOW")]
    Window,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for InputMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "InputMode::{}",
            match *self {
                InputMode::Disabled => "Disabled",
                InputMode::Screen => "Screen",
                InputMode::Window => "Window",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for InputMode {
    type GlibType = ffi::GdkInputMode;

    fn into_glib(self) -> ffi::GdkInputMode {
        match self {
            InputMode::Disabled => ffi::GDK_MODE_DISABLED,
            InputMode::Screen => ffi::GDK_MODE_SCREEN,
            InputMode::Window => ffi::GDK_MODE_WINDOW,
            InputMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkInputMode> for InputMode {
    unsafe fn from_glib(value: ffi::GdkInputMode) -> Self {
        skip_assert_initialized!();
        match value {
            0 => InputMode::Disabled,
            1 => InputMode::Screen,
            2 => InputMode::Window,
            value => InputMode::__Unknown(value),
        }
    }
}

impl StaticType for InputMode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_input_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for InputMode {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for InputMode {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for InputMode {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkInputSource")]
pub enum InputSource {
    #[doc(alias = "GDK_SOURCE_MOUSE")]
    Mouse,
    #[doc(alias = "GDK_SOURCE_PEN")]
    Pen,
    #[doc(alias = "GDK_SOURCE_ERASER")]
    Eraser,
    #[doc(alias = "GDK_SOURCE_CURSOR")]
    Cursor,
    #[doc(alias = "GDK_SOURCE_KEYBOARD")]
    Keyboard,
    #[doc(alias = "GDK_SOURCE_TOUCHSCREEN")]
    Touchscreen,
    #[doc(alias = "GDK_SOURCE_TOUCHPAD")]
    Touchpad,
    #[doc(alias = "GDK_SOURCE_TRACKPOINT")]
    Trackpoint,
    #[doc(alias = "GDK_SOURCE_TABLET_PAD")]
    TabletPad,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for InputSource {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "InputSource::{}",
            match *self {
                InputSource::Mouse => "Mouse",
                InputSource::Pen => "Pen",
                InputSource::Eraser => "Eraser",
                InputSource::Cursor => "Cursor",
                InputSource::Keyboard => "Keyboard",
                InputSource::Touchscreen => "Touchscreen",
                InputSource::Touchpad => "Touchpad",
                InputSource::Trackpoint => "Trackpoint",
                InputSource::TabletPad => "TabletPad",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for InputSource {
    type GlibType = ffi::GdkInputSource;

    fn into_glib(self) -> ffi::GdkInputSource {
        match self {
            InputSource::Mouse => ffi::GDK_SOURCE_MOUSE,
            InputSource::Pen => ffi::GDK_SOURCE_PEN,
            InputSource::Eraser => ffi::GDK_SOURCE_ERASER,
            InputSource::Cursor => ffi::GDK_SOURCE_CURSOR,
            InputSource::Keyboard => ffi::GDK_SOURCE_KEYBOARD,
            InputSource::Touchscreen => ffi::GDK_SOURCE_TOUCHSCREEN,
            InputSource::Touchpad => ffi::GDK_SOURCE_TOUCHPAD,
            InputSource::Trackpoint => ffi::GDK_SOURCE_TRACKPOINT,
            InputSource::TabletPad => ffi::GDK_SOURCE_TABLET_PAD,
            InputSource::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkInputSource> for InputSource {
    unsafe fn from_glib(value: ffi::GdkInputSource) -> Self {
        skip_assert_initialized!();
        match value {
            0 => InputSource::Mouse,
            1 => InputSource::Pen,
            2 => InputSource::Eraser,
            3 => InputSource::Cursor,
            4 => InputSource::Keyboard,
            5 => InputSource::Touchscreen,
            6 => InputSource::Touchpad,
            7 => InputSource::Trackpoint,
            8 => InputSource::TabletPad,
            value => InputSource::__Unknown(value),
        }
    }
}

impl StaticType for InputSource {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_input_source_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for InputSource {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for InputSource {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for InputSource {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkModifierIntent")]
pub enum ModifierIntent {
    #[doc(alias = "GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR")]
    PrimaryAccelerator,
    #[doc(alias = "GDK_MODIFIER_INTENT_CONTEXT_MENU")]
    ContextMenu,
    #[doc(alias = "GDK_MODIFIER_INTENT_EXTEND_SELECTION")]
    ExtendSelection,
    #[doc(alias = "GDK_MODIFIER_INTENT_MODIFY_SELECTION")]
    ModifySelection,
    #[doc(alias = "GDK_MODIFIER_INTENT_NO_TEXT_INPUT")]
    NoTextInput,
    #[doc(alias = "GDK_MODIFIER_INTENT_SHIFT_GROUP")]
    ShiftGroup,
    #[doc(alias = "GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK")]
    DefaultModMask,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ModifierIntent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ModifierIntent::{}",
            match *self {
                ModifierIntent::PrimaryAccelerator => "PrimaryAccelerator",
                ModifierIntent::ContextMenu => "ContextMenu",
                ModifierIntent::ExtendSelection => "ExtendSelection",
                ModifierIntent::ModifySelection => "ModifySelection",
                ModifierIntent::NoTextInput => "NoTextInput",
                ModifierIntent::ShiftGroup => "ShiftGroup",
                ModifierIntent::DefaultModMask => "DefaultModMask",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ModifierIntent {
    type GlibType = ffi::GdkModifierIntent;

    fn into_glib(self) -> ffi::GdkModifierIntent {
        match self {
            ModifierIntent::PrimaryAccelerator => ffi::GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR,
            ModifierIntent::ContextMenu => ffi::GDK_MODIFIER_INTENT_CONTEXT_MENU,
            ModifierIntent::ExtendSelection => ffi::GDK_MODIFIER_INTENT_EXTEND_SELECTION,
            ModifierIntent::ModifySelection => ffi::GDK_MODIFIER_INTENT_MODIFY_SELECTION,
            ModifierIntent::NoTextInput => ffi::GDK_MODIFIER_INTENT_NO_TEXT_INPUT,
            ModifierIntent::ShiftGroup => ffi::GDK_MODIFIER_INTENT_SHIFT_GROUP,
            ModifierIntent::DefaultModMask => ffi::GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK,
            ModifierIntent::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkModifierIntent> for ModifierIntent {
    unsafe fn from_glib(value: ffi::GdkModifierIntent) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ModifierIntent::PrimaryAccelerator,
            1 => ModifierIntent::ContextMenu,
            2 => ModifierIntent::ExtendSelection,
            3 => ModifierIntent::ModifySelection,
            4 => ModifierIntent::NoTextInput,
            5 => ModifierIntent::ShiftGroup,
            6 => ModifierIntent::DefaultModMask,
            value => ModifierIntent::__Unknown(value),
        }
    }
}

impl StaticType for ModifierIntent {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_modifier_intent_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ModifierIntent {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ModifierIntent {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ModifierIntent {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkNotifyType")]
pub enum NotifyType {
    #[doc(alias = "GDK_NOTIFY_ANCESTOR")]
    Ancestor,
    #[doc(alias = "GDK_NOTIFY_VIRTUAL")]
    Virtual,
    #[doc(alias = "GDK_NOTIFY_INFERIOR")]
    Inferior,
    #[doc(alias = "GDK_NOTIFY_NONLINEAR")]
    Nonlinear,
    #[doc(alias = "GDK_NOTIFY_NONLINEAR_VIRTUAL")]
    NonlinearVirtual,
    #[doc(alias = "GDK_NOTIFY_UNKNOWN")]
    Unknown,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for NotifyType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "NotifyType::{}",
            match *self {
                NotifyType::Ancestor => "Ancestor",
                NotifyType::Virtual => "Virtual",
                NotifyType::Inferior => "Inferior",
                NotifyType::Nonlinear => "Nonlinear",
                NotifyType::NonlinearVirtual => "NonlinearVirtual",
                NotifyType::Unknown => "Unknown",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for NotifyType {
    type GlibType = ffi::GdkNotifyType;

    fn into_glib(self) -> ffi::GdkNotifyType {
        match self {
            NotifyType::Ancestor => ffi::GDK_NOTIFY_ANCESTOR,
            NotifyType::Virtual => ffi::GDK_NOTIFY_VIRTUAL,
            NotifyType::Inferior => ffi::GDK_NOTIFY_INFERIOR,
            NotifyType::Nonlinear => ffi::GDK_NOTIFY_NONLINEAR,
            NotifyType::NonlinearVirtual => ffi::GDK_NOTIFY_NONLINEAR_VIRTUAL,
            NotifyType::Unknown => ffi::GDK_NOTIFY_UNKNOWN,
            NotifyType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkNotifyType> for NotifyType {
    unsafe fn from_glib(value: ffi::GdkNotifyType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => NotifyType::Ancestor,
            1 => NotifyType::Virtual,
            2 => NotifyType::Inferior,
            3 => NotifyType::Nonlinear,
            4 => NotifyType::NonlinearVirtual,
            5 => NotifyType::Unknown,
            value => NotifyType::__Unknown(value),
        }
    }
}

impl StaticType for NotifyType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_notify_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for NotifyType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for NotifyType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for NotifyType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkOwnerChange")]
pub enum OwnerChange {
    #[doc(alias = "GDK_OWNER_CHANGE_NEW_OWNER")]
    NewOwner,
    #[doc(alias = "GDK_OWNER_CHANGE_DESTROY")]
    Destroy,
    #[doc(alias = "GDK_OWNER_CHANGE_CLOSE")]
    Close,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for OwnerChange {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "OwnerChange::{}",
            match *self {
                OwnerChange::NewOwner => "NewOwner",
                OwnerChange::Destroy => "Destroy",
                OwnerChange::Close => "Close",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for OwnerChange {
    type GlibType = ffi::GdkOwnerChange;

    fn into_glib(self) -> ffi::GdkOwnerChange {
        match self {
            OwnerChange::NewOwner => ffi::GDK_OWNER_CHANGE_NEW_OWNER,
            OwnerChange::Destroy => ffi::GDK_OWNER_CHANGE_DESTROY,
            OwnerChange::Close => ffi::GDK_OWNER_CHANGE_CLOSE,
            OwnerChange::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkOwnerChange> for OwnerChange {
    unsafe fn from_glib(value: ffi::GdkOwnerChange) -> Self {
        skip_assert_initialized!();
        match value {
            0 => OwnerChange::NewOwner,
            1 => OwnerChange::Destroy,
            2 => OwnerChange::Close,
            value => OwnerChange::__Unknown(value),
        }
    }
}

impl StaticType for OwnerChange {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_owner_change_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for OwnerChange {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for OwnerChange {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for OwnerChange {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkPropMode")]
pub enum PropMode {
    #[doc(alias = "GDK_PROP_MODE_REPLACE")]
    Replace,
    #[doc(alias = "GDK_PROP_MODE_PREPEND")]
    Prepend,
    #[doc(alias = "GDK_PROP_MODE_APPEND")]
    Append,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for PropMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "PropMode::{}",
            match *self {
                PropMode::Replace => "Replace",
                PropMode::Prepend => "Prepend",
                PropMode::Append => "Append",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for PropMode {
    type GlibType = ffi::GdkPropMode;

    fn into_glib(self) -> ffi::GdkPropMode {
        match self {
            PropMode::Replace => ffi::GDK_PROP_MODE_REPLACE,
            PropMode::Prepend => ffi::GDK_PROP_MODE_PREPEND,
            PropMode::Append => ffi::GDK_PROP_MODE_APPEND,
            PropMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkPropMode> for PropMode {
    unsafe fn from_glib(value: ffi::GdkPropMode) -> Self {
        skip_assert_initialized!();
        match value {
            0 => PropMode::Replace,
            1 => PropMode::Prepend,
            2 => PropMode::Append,
            value => PropMode::__Unknown(value),
        }
    }
}

impl StaticType for PropMode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_prop_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for PropMode {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for PropMode {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for PropMode {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkPropertyState")]
pub enum PropertyState {
    #[doc(alias = "GDK_PROPERTY_NEW_VALUE")]
    NewValue,
    #[doc(alias = "GDK_PROPERTY_DELETE")]
    Delete,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for PropertyState {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "PropertyState::{}",
            match *self {
                PropertyState::NewValue => "NewValue",
                PropertyState::Delete => "Delete",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for PropertyState {
    type GlibType = ffi::GdkPropertyState;

    fn into_glib(self) -> ffi::GdkPropertyState {
        match self {
            PropertyState::NewValue => ffi::GDK_PROPERTY_NEW_VALUE,
            PropertyState::Delete => ffi::GDK_PROPERTY_DELETE,
            PropertyState::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkPropertyState> for PropertyState {
    unsafe fn from_glib(value: ffi::GdkPropertyState) -> Self {
        skip_assert_initialized!();
        match value {
            0 => PropertyState::NewValue,
            1 => PropertyState::Delete,
            value => PropertyState::__Unknown(value),
        }
    }
}

impl StaticType for PropertyState {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_property_state_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for PropertyState {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for PropertyState {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for PropertyState {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkScrollDirection")]
pub enum ScrollDirection {
    #[doc(alias = "GDK_SCROLL_UP")]
    Up,
    #[doc(alias = "GDK_SCROLL_DOWN")]
    Down,
    #[doc(alias = "GDK_SCROLL_LEFT")]
    Left,
    #[doc(alias = "GDK_SCROLL_RIGHT")]
    Right,
    #[doc(alias = "GDK_SCROLL_SMOOTH")]
    Smooth,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ScrollDirection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ScrollDirection::{}",
            match *self {
                ScrollDirection::Up => "Up",
                ScrollDirection::Down => "Down",
                ScrollDirection::Left => "Left",
                ScrollDirection::Right => "Right",
                ScrollDirection::Smooth => "Smooth",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ScrollDirection {
    type GlibType = ffi::GdkScrollDirection;

    fn into_glib(self) -> ffi::GdkScrollDirection {
        match self {
            ScrollDirection::Up => ffi::GDK_SCROLL_UP,
            ScrollDirection::Down => ffi::GDK_SCROLL_DOWN,
            ScrollDirection::Left => ffi::GDK_SCROLL_LEFT,
            ScrollDirection::Right => ffi::GDK_SCROLL_RIGHT,
            ScrollDirection::Smooth => ffi::GDK_SCROLL_SMOOTH,
            ScrollDirection::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkScrollDirection> for ScrollDirection {
    unsafe fn from_glib(value: ffi::GdkScrollDirection) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ScrollDirection::Up,
            1 => ScrollDirection::Down,
            2 => ScrollDirection::Left,
            3 => ScrollDirection::Right,
            4 => ScrollDirection::Smooth,
            value => ScrollDirection::__Unknown(value),
        }
    }
}

impl StaticType for ScrollDirection {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_scroll_direction_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ScrollDirection {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ScrollDirection {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ScrollDirection {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkSettingAction")]
pub enum SettingAction {
    #[doc(alias = "GDK_SETTING_ACTION_NEW")]
    New,
    #[doc(alias = "GDK_SETTING_ACTION_CHANGED")]
    Changed,
    #[doc(alias = "GDK_SETTING_ACTION_DELETED")]
    Deleted,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SettingAction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SettingAction::{}",
            match *self {
                SettingAction::New => "New",
                SettingAction::Changed => "Changed",
                SettingAction::Deleted => "Deleted",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for SettingAction {
    type GlibType = ffi::GdkSettingAction;

    fn into_glib(self) -> ffi::GdkSettingAction {
        match self {
            SettingAction::New => ffi::GDK_SETTING_ACTION_NEW,
            SettingAction::Changed => ffi::GDK_SETTING_ACTION_CHANGED,
            SettingAction::Deleted => ffi::GDK_SETTING_ACTION_DELETED,
            SettingAction::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkSettingAction> for SettingAction {
    unsafe fn from_glib(value: ffi::GdkSettingAction) -> Self {
        skip_assert_initialized!();
        match value {
            0 => SettingAction::New,
            1 => SettingAction::Changed,
            2 => SettingAction::Deleted,
            value => SettingAction::__Unknown(value),
        }
    }
}

impl StaticType for SettingAction {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_setting_action_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SettingAction {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SettingAction {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SettingAction {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkSubpixelLayout")]
pub enum SubpixelLayout {
    #[doc(alias = "GDK_SUBPIXEL_LAYOUT_UNKNOWN")]
    Unknown,
    #[doc(alias = "GDK_SUBPIXEL_LAYOUT_NONE")]
    None,
    #[doc(alias = "GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB")]
    HorizontalRgb,
    #[doc(alias = "GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR")]
    HorizontalBgr,
    #[doc(alias = "GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB")]
    VerticalRgb,
    #[doc(alias = "GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR")]
    VerticalBgr,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl fmt::Display for SubpixelLayout {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SubpixelLayout::{}",
            match *self {
                SubpixelLayout::Unknown => "Unknown",
                SubpixelLayout::None => "None",
                SubpixelLayout::HorizontalRgb => "HorizontalRgb",
                SubpixelLayout::HorizontalBgr => "HorizontalBgr",
                SubpixelLayout::VerticalRgb => "VerticalRgb",
                SubpixelLayout::VerticalBgr => "VerticalBgr",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
#[doc(hidden)]
impl IntoGlib for SubpixelLayout {
    type GlibType = ffi::GdkSubpixelLayout;

    fn into_glib(self) -> ffi::GdkSubpixelLayout {
        match self {
            SubpixelLayout::Unknown => ffi::GDK_SUBPIXEL_LAYOUT_UNKNOWN,
            SubpixelLayout::None => ffi::GDK_SUBPIXEL_LAYOUT_NONE,
            SubpixelLayout::HorizontalRgb => ffi::GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB,
            SubpixelLayout::HorizontalBgr => ffi::GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR,
            SubpixelLayout::VerticalRgb => ffi::GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB,
            SubpixelLayout::VerticalBgr => ffi::GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR,
            SubpixelLayout::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
#[doc(hidden)]
impl FromGlib<ffi::GdkSubpixelLayout> for SubpixelLayout {
    unsafe fn from_glib(value: ffi::GdkSubpixelLayout) -> Self {
        skip_assert_initialized!();
        match value {
            0 => SubpixelLayout::Unknown,
            1 => SubpixelLayout::None,
            2 => SubpixelLayout::HorizontalRgb,
            3 => SubpixelLayout::HorizontalBgr,
            4 => SubpixelLayout::VerticalRgb,
            5 => SubpixelLayout::VerticalBgr,
            value => SubpixelLayout::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl StaticType for SubpixelLayout {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_subpixel_layout_get_type()) }
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl<'a> FromValueOptional<'a> for SubpixelLayout {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl<'a> FromValue<'a> for SubpixelLayout {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v3_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v3_22")))]
impl SetValue for SubpixelLayout {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkVisibilityState")]
pub enum VisibilityState {
    #[doc(alias = "GDK_VISIBILITY_UNOBSCURED")]
    Unobscured,
    #[doc(alias = "GDK_VISIBILITY_PARTIAL")]
    Partial,
    #[doc(alias = "GDK_VISIBILITY_FULLY_OBSCURED")]
    FullyObscured,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for VisibilityState {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "VisibilityState::{}",
            match *self {
                VisibilityState::Unobscured => "Unobscured",
                VisibilityState::Partial => "Partial",
                VisibilityState::FullyObscured => "FullyObscured",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for VisibilityState {
    type GlibType = ffi::GdkVisibilityState;

    fn into_glib(self) -> ffi::GdkVisibilityState {
        match self {
            VisibilityState::Unobscured => ffi::GDK_VISIBILITY_UNOBSCURED,
            VisibilityState::Partial => ffi::GDK_VISIBILITY_PARTIAL,
            VisibilityState::FullyObscured => ffi::GDK_VISIBILITY_FULLY_OBSCURED,
            VisibilityState::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkVisibilityState> for VisibilityState {
    unsafe fn from_glib(value: ffi::GdkVisibilityState) -> Self {
        skip_assert_initialized!();
        match value {
            0 => VisibilityState::Unobscured,
            1 => VisibilityState::Partial,
            2 => VisibilityState::FullyObscured,
            value => VisibilityState::__Unknown(value),
        }
    }
}

impl StaticType for VisibilityState {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_visibility_state_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for VisibilityState {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for VisibilityState {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for VisibilityState {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkVisualType")]
pub enum VisualType {
    #[doc(alias = "GDK_VISUAL_STATIC_GRAY")]
    StaticGray,
    #[doc(alias = "GDK_VISUAL_GRAYSCALE")]
    Grayscale,
    #[doc(alias = "GDK_VISUAL_STATIC_COLOR")]
    StaticColor,
    #[doc(alias = "GDK_VISUAL_PSEUDO_COLOR")]
    PseudoColor,
    #[doc(alias = "GDK_VISUAL_TRUE_COLOR")]
    TrueColor,
    #[doc(alias = "GDK_VISUAL_DIRECT_COLOR")]
    DirectColor,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for VisualType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "VisualType::{}",
            match *self {
                VisualType::StaticGray => "StaticGray",
                VisualType::Grayscale => "Grayscale",
                VisualType::StaticColor => "StaticColor",
                VisualType::PseudoColor => "PseudoColor",
                VisualType::TrueColor => "TrueColor",
                VisualType::DirectColor => "DirectColor",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for VisualType {
    type GlibType = ffi::GdkVisualType;

    fn into_glib(self) -> ffi::GdkVisualType {
        match self {
            VisualType::StaticGray => ffi::GDK_VISUAL_STATIC_GRAY,
            VisualType::Grayscale => ffi::GDK_VISUAL_GRAYSCALE,
            VisualType::StaticColor => ffi::GDK_VISUAL_STATIC_COLOR,
            VisualType::PseudoColor => ffi::GDK_VISUAL_PSEUDO_COLOR,
            VisualType::TrueColor => ffi::GDK_VISUAL_TRUE_COLOR,
            VisualType::DirectColor => ffi::GDK_VISUAL_DIRECT_COLOR,
            VisualType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkVisualType> for VisualType {
    unsafe fn from_glib(value: ffi::GdkVisualType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => VisualType::StaticGray,
            1 => VisualType::Grayscale,
            2 => VisualType::StaticColor,
            3 => VisualType::PseudoColor,
            4 => VisualType::TrueColor,
            5 => VisualType::DirectColor,
            value => VisualType::__Unknown(value),
        }
    }
}

impl StaticType for VisualType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_visual_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for VisualType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for VisualType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for VisualType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkWindowEdge")]
pub enum WindowEdge {
    #[doc(alias = "GDK_WINDOW_EDGE_NORTH_WEST")]
    NorthWest,
    #[doc(alias = "GDK_WINDOW_EDGE_NORTH")]
    North,
    #[doc(alias = "GDK_WINDOW_EDGE_NORTH_EAST")]
    NorthEast,
    #[doc(alias = "GDK_WINDOW_EDGE_WEST")]
    West,
    #[doc(alias = "GDK_WINDOW_EDGE_EAST")]
    East,
    #[doc(alias = "GDK_WINDOW_EDGE_SOUTH_WEST")]
    SouthWest,
    #[doc(alias = "GDK_WINDOW_EDGE_SOUTH")]
    South,
    #[doc(alias = "GDK_WINDOW_EDGE_SOUTH_EAST")]
    SouthEast,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for WindowEdge {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "WindowEdge::{}",
            match *self {
                WindowEdge::NorthWest => "NorthWest",
                WindowEdge::North => "North",
                WindowEdge::NorthEast => "NorthEast",
                WindowEdge::West => "West",
                WindowEdge::East => "East",
                WindowEdge::SouthWest => "SouthWest",
                WindowEdge::South => "South",
                WindowEdge::SouthEast => "SouthEast",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for WindowEdge {
    type GlibType = ffi::GdkWindowEdge;

    fn into_glib(self) -> ffi::GdkWindowEdge {
        match self {
            WindowEdge::NorthWest => ffi::GDK_WINDOW_EDGE_NORTH_WEST,
            WindowEdge::North => ffi::GDK_WINDOW_EDGE_NORTH,
            WindowEdge::NorthEast => ffi::GDK_WINDOW_EDGE_NORTH_EAST,
            WindowEdge::West => ffi::GDK_WINDOW_EDGE_WEST,
            WindowEdge::East => ffi::GDK_WINDOW_EDGE_EAST,
            WindowEdge::SouthWest => ffi::GDK_WINDOW_EDGE_SOUTH_WEST,
            WindowEdge::South => ffi::GDK_WINDOW_EDGE_SOUTH,
            WindowEdge::SouthEast => ffi::GDK_WINDOW_EDGE_SOUTH_EAST,
            WindowEdge::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkWindowEdge> for WindowEdge {
    unsafe fn from_glib(value: ffi::GdkWindowEdge) -> Self {
        skip_assert_initialized!();
        match value {
            0 => WindowEdge::NorthWest,
            1 => WindowEdge::North,
            2 => WindowEdge::NorthEast,
            3 => WindowEdge::West,
            4 => WindowEdge::East,
            5 => WindowEdge::SouthWest,
            6 => WindowEdge::South,
            7 => WindowEdge::SouthEast,
            value => WindowEdge::__Unknown(value),
        }
    }
}

impl StaticType for WindowEdge {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_window_edge_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for WindowEdge {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for WindowEdge {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for WindowEdge {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkWindowType")]
pub enum WindowType {
    #[doc(alias = "GDK_WINDOW_ROOT")]
    Root,
    #[doc(alias = "GDK_WINDOW_TOPLEVEL")]
    Toplevel,
    #[doc(alias = "GDK_WINDOW_CHILD")]
    Child,
    #[doc(alias = "GDK_WINDOW_TEMP")]
    Temp,
    #[doc(alias = "GDK_WINDOW_FOREIGN")]
    Foreign,
    #[doc(alias = "GDK_WINDOW_OFFSCREEN")]
    Offscreen,
    #[doc(alias = "GDK_WINDOW_SUBSURFACE")]
    Subsurface,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for WindowType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "WindowType::{}",
            match *self {
                WindowType::Root => "Root",
                WindowType::Toplevel => "Toplevel",
                WindowType::Child => "Child",
                WindowType::Temp => "Temp",
                WindowType::Foreign => "Foreign",
                WindowType::Offscreen => "Offscreen",
                WindowType::Subsurface => "Subsurface",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for WindowType {
    type GlibType = ffi::GdkWindowType;

    fn into_glib(self) -> ffi::GdkWindowType {
        match self {
            WindowType::Root => ffi::GDK_WINDOW_ROOT,
            WindowType::Toplevel => ffi::GDK_WINDOW_TOPLEVEL,
            WindowType::Child => ffi::GDK_WINDOW_CHILD,
            WindowType::Temp => ffi::GDK_WINDOW_TEMP,
            WindowType::Foreign => ffi::GDK_WINDOW_FOREIGN,
            WindowType::Offscreen => ffi::GDK_WINDOW_OFFSCREEN,
            WindowType::Subsurface => ffi::GDK_WINDOW_SUBSURFACE,
            WindowType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkWindowType> for WindowType {
    unsafe fn from_glib(value: ffi::GdkWindowType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => WindowType::Root,
            1 => WindowType::Toplevel,
            2 => WindowType::Child,
            3 => WindowType::Temp,
            4 => WindowType::Foreign,
            5 => WindowType::Offscreen,
            6 => WindowType::Subsurface,
            value => WindowType::__Unknown(value),
        }
    }
}

impl StaticType for WindowType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_window_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for WindowType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for WindowType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for WindowType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkWindowTypeHint")]
pub enum WindowTypeHint {
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_NORMAL")]
    Normal,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_DIALOG")]
    Dialog,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_MENU")]
    Menu,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_TOOLBAR")]
    Toolbar,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_SPLASHSCREEN")]
    Splashscreen,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_UTILITY")]
    Utility,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_DOCK")]
    Dock,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_DESKTOP")]
    Desktop,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU")]
    DropdownMenu,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_POPUP_MENU")]
    PopupMenu,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_TOOLTIP")]
    Tooltip,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_NOTIFICATION")]
    Notification,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_COMBO")]
    Combo,
    #[doc(alias = "GDK_WINDOW_TYPE_HINT_DND")]
    Dnd,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for WindowTypeHint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "WindowTypeHint::{}",
            match *self {
                WindowTypeHint::Normal => "Normal",
                WindowTypeHint::Dialog => "Dialog",
                WindowTypeHint::Menu => "Menu",
                WindowTypeHint::Toolbar => "Toolbar",
                WindowTypeHint::Splashscreen => "Splashscreen",
                WindowTypeHint::Utility => "Utility",
                WindowTypeHint::Dock => "Dock",
                WindowTypeHint::Desktop => "Desktop",
                WindowTypeHint::DropdownMenu => "DropdownMenu",
                WindowTypeHint::PopupMenu => "PopupMenu",
                WindowTypeHint::Tooltip => "Tooltip",
                WindowTypeHint::Notification => "Notification",
                WindowTypeHint::Combo => "Combo",
                WindowTypeHint::Dnd => "Dnd",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for WindowTypeHint {
    type GlibType = ffi::GdkWindowTypeHint;

    fn into_glib(self) -> ffi::GdkWindowTypeHint {
        match self {
            WindowTypeHint::Normal => ffi::GDK_WINDOW_TYPE_HINT_NORMAL,
            WindowTypeHint::Dialog => ffi::GDK_WINDOW_TYPE_HINT_DIALOG,
            WindowTypeHint::Menu => ffi::GDK_WINDOW_TYPE_HINT_MENU,
            WindowTypeHint::Toolbar => ffi::GDK_WINDOW_TYPE_HINT_TOOLBAR,
            WindowTypeHint::Splashscreen => ffi::GDK_WINDOW_TYPE_HINT_SPLASHSCREEN,
            WindowTypeHint::Utility => ffi::GDK_WINDOW_TYPE_HINT_UTILITY,
            WindowTypeHint::Dock => ffi::GDK_WINDOW_TYPE_HINT_DOCK,
            WindowTypeHint::Desktop => ffi::GDK_WINDOW_TYPE_HINT_DESKTOP,
            WindowTypeHint::DropdownMenu => ffi::GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU,
            WindowTypeHint::PopupMenu => ffi::GDK_WINDOW_TYPE_HINT_POPUP_MENU,
            WindowTypeHint::Tooltip => ffi::GDK_WINDOW_TYPE_HINT_TOOLTIP,
            WindowTypeHint::Notification => ffi::GDK_WINDOW_TYPE_HINT_NOTIFICATION,
            WindowTypeHint::Combo => ffi::GDK_WINDOW_TYPE_HINT_COMBO,
            WindowTypeHint::Dnd => ffi::GDK_WINDOW_TYPE_HINT_DND,
            WindowTypeHint::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkWindowTypeHint> for WindowTypeHint {
    unsafe fn from_glib(value: ffi::GdkWindowTypeHint) -> Self {
        skip_assert_initialized!();
        match value {
            0 => WindowTypeHint::Normal,
            1 => WindowTypeHint::Dialog,
            2 => WindowTypeHint::Menu,
            3 => WindowTypeHint::Toolbar,
            4 => WindowTypeHint::Splashscreen,
            5 => WindowTypeHint::Utility,
            6 => WindowTypeHint::Dock,
            7 => WindowTypeHint::Desktop,
            8 => WindowTypeHint::DropdownMenu,
            9 => WindowTypeHint::PopupMenu,
            10 => WindowTypeHint::Tooltip,
            11 => WindowTypeHint::Notification,
            12 => WindowTypeHint::Combo,
            13 => WindowTypeHint::Dnd,
            value => WindowTypeHint::__Unknown(value),
        }
    }
}

impl StaticType for WindowTypeHint {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_window_type_hint_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for WindowTypeHint {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for WindowTypeHint {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for WindowTypeHint {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GdkWindowWindowClass")]
pub enum WindowWindowClass {
    #[doc(alias = "GDK_INPUT_OUTPUT")]
    InputOutput,
    #[doc(alias = "GDK_INPUT_ONLY")]
    InputOnly,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for WindowWindowClass {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "WindowWindowClass::{}",
            match *self {
                WindowWindowClass::InputOutput => "InputOutput",
                WindowWindowClass::InputOnly => "InputOnly",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for WindowWindowClass {
    type GlibType = ffi::GdkWindowWindowClass;

    fn into_glib(self) -> ffi::GdkWindowWindowClass {
        match self {
            WindowWindowClass::InputOutput => ffi::GDK_INPUT_OUTPUT,
            WindowWindowClass::InputOnly => ffi::GDK_INPUT_ONLY,
            WindowWindowClass::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkWindowWindowClass> for WindowWindowClass {
    unsafe fn from_glib(value: ffi::GdkWindowWindowClass) -> Self {
        skip_assert_initialized!();
        match value {
            0 => WindowWindowClass::InputOutput,
            1 => WindowWindowClass::InputOnly,
            value => WindowWindowClass::__Unknown(value),
        }
    }
}

impl StaticType for WindowWindowClass {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gdk_window_window_class_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for WindowWindowClass {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for WindowWindowClass {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for WindowWindowClass {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}
