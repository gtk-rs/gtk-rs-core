// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, Converter, FileInfo, ZlibCompressorFormat};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GZlibCompressor")]
    pub struct ZlibCompressor(Object<ffi::GZlibCompressor, ffi::GZlibCompressorClass>) @implements Converter;

    match fn {
        type_ => || ffi::g_zlib_compressor_get_type(),
    }
}

impl ZlibCompressor {
    #[doc(alias = "g_zlib_compressor_new")]
    pub fn new(format: ZlibCompressorFormat, level: i32) -> ZlibCompressor {
        unsafe { from_glib_full(ffi::g_zlib_compressor_new(format.into_glib(), level)) }
    }

    #[doc(alias = "g_zlib_compressor_get_file_info")]
    #[doc(alias = "get_file_info")]
    #[doc(alias = "file-info")]
    pub fn file_info(&self) -> Option<FileInfo> {
        unsafe { from_glib_none(ffi::g_zlib_compressor_get_file_info(self.to_glib_none().0)) }
    }

    #[doc(alias = "g_zlib_compressor_set_file_info")]
    #[doc(alias = "file-info")]
    pub fn set_file_info(&self, file_info: Option<&FileInfo>) {
        unsafe {
            ffi::g_zlib_compressor_set_file_info(self.to_glib_none().0, file_info.to_glib_none().0);
        }
    }

    pub fn format(&self) -> ZlibCompressorFormat {
        ObjectExt::property(self, "format")
    }

    pub fn level(&self) -> i32 {
        ObjectExt::property(self, "level")
    }

    #[doc(alias = "file-info")]
    pub fn connect_file_info_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_file_info_trampoline<F: Fn(&ZlibCompressor) + 'static>(
            this: *mut ffi::GZlibCompressor,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::file-info\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_file_info_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}
