// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GFilenameCompleter")]
    pub struct FilenameCompleter(Object<ffi::GFilenameCompleter, ffi::GFilenameCompleterClass>);

    match fn {
        type_ => || ffi::g_filename_completer_get_type(),
    }
}

impl FilenameCompleter {
    #[doc(alias = "g_filename_completer_new")]
    pub fn new() -> FilenameCompleter {
        unsafe { from_glib_full(ffi::g_filename_completer_new()) }
    }

    #[doc(alias = "g_filename_completer_get_completion_suffix")]
    #[doc(alias = "get_completion_suffix")]
    pub fn completion_suffix(&self, initial_text: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::g_filename_completer_get_completion_suffix(
                self.to_glib_none().0,
                initial_text.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_filename_completer_get_completions")]
    #[doc(alias = "get_completions")]
    pub fn completions(&self, initial_text: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::g_filename_completer_get_completions(
                self.to_glib_none().0,
                initial_text.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_filename_completer_set_dirs_only")]
    pub fn set_dirs_only(&self, dirs_only: bool) {
        unsafe {
            ffi::g_filename_completer_set_dirs_only(self.to_glib_none().0, dirs_only.into_glib());
        }
    }

    #[doc(alias = "got-completion-data")]
    pub fn connect_got_completion_data<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn got_completion_data_trampoline<F: Fn(&FilenameCompleter) + 'static>(
            this: *mut ffi::GFilenameCompleter,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"got-completion-data\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    got_completion_data_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for FilenameCompleter {
    fn default() -> Self {
        Self::new()
    }
}
