// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::DBusConnection;
use crate::DBusObjectManager;
use crate::DBusObjectSkeleton;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "GDBusObjectManagerServer")]
    pub struct DBusObjectManagerServer(Object<ffi::GDBusObjectManagerServer, ffi::GDBusObjectManagerServerClass>) @implements DBusObjectManager;

    match fn {
        type_ => || ffi::g_dbus_object_manager_server_get_type(),
    }
}

impl DBusObjectManagerServer {
    #[doc(alias = "g_dbus_object_manager_server_new")]
    pub fn new(object_path: &str) -> DBusObjectManagerServer {
        unsafe {
            from_glib_full(ffi::g_dbus_object_manager_server_new(
                object_path.to_glib_none().0,
            ))
        }
    }
}

pub const NONE_DBUS_OBJECT_MANAGER_SERVER: Option<&DBusObjectManagerServer> = None;

pub trait DBusObjectManagerServerExt: 'static {
    #[doc(alias = "g_dbus_object_manager_server_export")]
    fn export<P: IsA<DBusObjectSkeleton>>(&self, object: &P);

    #[doc(alias = "g_dbus_object_manager_server_export_uniquely")]
    fn export_uniquely<P: IsA<DBusObjectSkeleton>>(&self, object: &P);

    #[doc(alias = "g_dbus_object_manager_server_get_connection")]
    #[doc(alias = "get_connection")]
    fn connection(&self) -> DBusConnection;

    #[doc(alias = "g_dbus_object_manager_server_is_exported")]
    fn is_exported<P: IsA<DBusObjectSkeleton>>(&self, object: &P) -> bool;

    #[doc(alias = "g_dbus_object_manager_server_set_connection")]
    fn set_connection(&self, connection: Option<&DBusConnection>);

    #[doc(alias = "g_dbus_object_manager_server_unexport")]
    fn unexport(&self, object_path: &str) -> bool;

    #[doc(alias = "connection")]
    fn connect_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DBusObjectManagerServer>> DBusObjectManagerServerExt for O {
    fn export<P: IsA<DBusObjectSkeleton>>(&self, object: &P) {
        unsafe {
            ffi::g_dbus_object_manager_server_export(
                self.as_ref().to_glib_none().0,
                object.as_ref().to_glib_none().0,
            );
        }
    }

    fn export_uniquely<P: IsA<DBusObjectSkeleton>>(&self, object: &P) {
        unsafe {
            ffi::g_dbus_object_manager_server_export_uniquely(
                self.as_ref().to_glib_none().0,
                object.as_ref().to_glib_none().0,
            );
        }
    }

    fn connection(&self) -> DBusConnection {
        unsafe {
            from_glib_full(ffi::g_dbus_object_manager_server_get_connection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_exported<P: IsA<DBusObjectSkeleton>>(&self, object: &P) -> bool {
        unsafe {
            from_glib(ffi::g_dbus_object_manager_server_is_exported(
                self.as_ref().to_glib_none().0,
                object.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_connection(&self, connection: Option<&DBusConnection>) {
        unsafe {
            ffi::g_dbus_object_manager_server_set_connection(
                self.as_ref().to_glib_none().0,
                connection.to_glib_none().0,
            );
        }
    }

    fn unexport(&self, object_path: &str) -> bool {
        unsafe {
            from_glib(ffi::g_dbus_object_manager_server_unexport(
                self.as_ref().to_glib_none().0,
                object_path.to_glib_none().0,
            ))
        }
    }

    fn connect_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_connection_trampoline<
            P: IsA<DBusObjectManagerServer>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GDBusObjectManagerServer,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DBusObjectManagerServer::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connection_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DBusObjectManagerServer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DBusObjectManagerServer")
    }
}
