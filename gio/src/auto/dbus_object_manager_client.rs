// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{
    ffi, AsyncInitable, AsyncResult, DBusConnection, DBusObjectManager,
    DBusObjectManagerClientFlags, DBusObjectProxy, DBusProxy, Initable,
};
use glib::{
    object::ObjectType as _,
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GDBusObjectManagerClient")]
    pub struct DBusObjectManagerClient(Object<ffi::GDBusObjectManagerClient, ffi::GDBusObjectManagerClientClass>) @implements AsyncInitable, DBusObjectManager, Initable;

    match fn {
        type_ => || ffi::g_dbus_object_manager_client_get_type(),
    }
}

impl DBusObjectManagerClient {
    pub const NONE: Option<&'static DBusObjectManagerClient> = None;
}

impl std::fmt::Display for DBusObjectManagerClient {
    #[inline]
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(&DBusObjectManagerClientExt::name(self))
    }
}

unsafe impl Send for DBusObjectManagerClient {}
unsafe impl Sync for DBusObjectManagerClient {}

pub trait DBusObjectManagerClientExt: IsA<DBusObjectManagerClient> + 'static {
    #[doc(alias = "g_dbus_object_manager_client_get_connection")]
    #[doc(alias = "get_connection")]
    fn connection(&self) -> DBusConnection {
        unsafe {
            from_glib_none(ffi::g_dbus_object_manager_client_get_connection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_dbus_object_manager_client_get_flags")]
    #[doc(alias = "get_flags")]
    fn flags(&self) -> DBusObjectManagerClientFlags {
        unsafe {
            from_glib(ffi::g_dbus_object_manager_client_get_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_dbus_object_manager_client_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::g_dbus_object_manager_client_get_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_dbus_object_manager_client_get_name_owner")]
    #[doc(alias = "get_name_owner")]
    #[doc(alias = "name-owner")]
    fn name_owner(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::g_dbus_object_manager_client_get_name_owner(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //#[doc(alias = "interface-proxy-properties-changed")]
    //fn connect_interface_proxy_properties_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Empty ctype invalidated_properties: *.CArray TypeId { ns_id: 0, id: 28 }
    //}

    #[doc(alias = "interface-proxy-signal")]
    fn connect_interface_proxy_signal<
        F: Fn(&Self, &DBusObjectProxy, &DBusProxy, &str, &str, &glib::Variant) + Send + Sync + 'static,
    >(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn interface_proxy_signal_trampoline<
            P: IsA<DBusObjectManagerClient>,
            F: Fn(&P, &DBusObjectProxy, &DBusProxy, &str, &str, &glib::Variant)
                + Send
                + Sync
                + 'static,
        >(
            this: *mut ffi::GDBusObjectManagerClient,
            object_proxy: *mut ffi::GDBusObjectProxy,
            interface_proxy: *mut ffi::GDBusProxy,
            sender_name: *mut std::ffi::c_char,
            signal_name: *mut std::ffi::c_char,
            parameters: *mut glib::ffi::GVariant,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                DBusObjectManagerClient::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_borrow(object_proxy),
                &from_glib_borrow(interface_proxy),
                &glib::GString::from_glib_borrow(sender_name),
                &glib::GString::from_glib_borrow(signal_name),
                &from_glib_borrow(parameters),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"interface-proxy-signal".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    interface_proxy_signal_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "name-owner")]
    fn connect_name_owner_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_owner_trampoline<
            P: IsA<DBusObjectManagerClient>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GDBusObjectManagerClient,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DBusObjectManagerClient::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::name-owner".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_name_owner_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<DBusObjectManagerClient>> DBusObjectManagerClientExt for O {}
