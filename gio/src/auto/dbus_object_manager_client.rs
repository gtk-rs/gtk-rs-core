// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::AsyncResult;
use crate::BusType;
use crate::Cancellable;
use crate::DBusConnection;
use crate::DBusObjectManager;
use crate::DBusObjectManagerClientFlags;
use crate::Initable;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "GDBusObjectManagerClient")]
    pub struct DBusObjectManagerClient(Object<ffi::GDBusObjectManagerClient, ffi::GDBusObjectManagerClientClass>) @implements DBusObjectManager, Initable;

    match fn {
        type_ => || ffi::g_dbus_object_manager_client_get_type(),
    }
}

impl DBusObjectManagerClient {
    #[doc(alias = "g_dbus_object_manager_client_new_for_bus_sync")]
    #[doc(alias = "new_for_bus_sync")]
    pub fn for_bus_sync<P: IsA<Cancellable>>(
        bus_type: BusType,
        flags: DBusObjectManagerClientFlags,
        name: &str,
        object_path: &str,
        get_proxy_type_func: Option<
            Box_<
                dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type + 'static,
            >,
        >,
        cancellable: Option<&P>,
    ) -> Result<DBusObjectManagerClient, glib::Error> {
        let get_proxy_type_func_data: Box_<
            Option<
                Box_<
                    dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type
                        + 'static,
                >,
            >,
        > = Box_::new(get_proxy_type_func);
        unsafe extern "C" fn get_proxy_type_func_func<P: IsA<Cancellable>>(
            manager: *mut ffi::GDBusObjectManagerClient,
            object_path: *const libc::c_char,
            interface_name: *const libc::c_char,
            user_data: glib::ffi::gpointer,
        ) -> glib::ffi::GType {
            let manager = from_glib_borrow(manager);
            let object_path: Borrowed<glib::GString> = from_glib_borrow(object_path);
            let interface_name: Borrowed<Option<glib::GString>> = from_glib_borrow(interface_name);
            let callback: &Option<
                Box_<
                    dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type
                        + 'static,
                >,
            > = &*(user_data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(
                    &manager,
                    object_path.as_str(),
                    interface_name.as_ref().as_deref(),
                )
            } else {
                panic!("cannot get closure...")
            };
            res.into_glib()
        }
        let get_proxy_type_func = if get_proxy_type_func_data.is_some() {
            Some(get_proxy_type_func_func::<P> as _)
        } else {
            None
        };
        unsafe extern "C" fn get_proxy_type_destroy_notify_func<P: IsA<Cancellable>>(
            data: glib::ffi::gpointer,
        ) {
            let _callback: Box_<
                Option<
                    Box_<
                        dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type
                            + 'static,
                    >,
                >,
            > = Box_::from_raw(data as *mut _);
        }
        let destroy_call6 = Some(get_proxy_type_destroy_notify_func::<P> as _);
        let super_callback0: Box_<
            Option<
                Box_<
                    dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type
                        + 'static,
                >,
            >,
        > = get_proxy_type_func_data;
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_dbus_object_manager_client_new_for_bus_sync(
                bus_type.into_glib(),
                flags.into_glib(),
                name.to_glib_none().0,
                object_path.to_glib_none().0,
                get_proxy_type_func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call6,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "g_dbus_object_manager_client_new_sync")]
    pub fn new_sync<P: IsA<Cancellable>>(
        connection: &DBusConnection,
        flags: DBusObjectManagerClientFlags,
        name: Option<&str>,
        object_path: &str,
        get_proxy_type_func: Option<
            Box_<
                dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type + 'static,
            >,
        >,
        cancellable: Option<&P>,
    ) -> Result<DBusObjectManagerClient, glib::Error> {
        let get_proxy_type_func_data: Box_<
            Option<
                Box_<
                    dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type
                        + 'static,
                >,
            >,
        > = Box_::new(get_proxy_type_func);
        unsafe extern "C" fn get_proxy_type_func_func<P: IsA<Cancellable>>(
            manager: *mut ffi::GDBusObjectManagerClient,
            object_path: *const libc::c_char,
            interface_name: *const libc::c_char,
            user_data: glib::ffi::gpointer,
        ) -> glib::ffi::GType {
            let manager = from_glib_borrow(manager);
            let object_path: Borrowed<glib::GString> = from_glib_borrow(object_path);
            let interface_name: Borrowed<Option<glib::GString>> = from_glib_borrow(interface_name);
            let callback: &Option<
                Box_<
                    dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type
                        + 'static,
                >,
            > = &*(user_data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(
                    &manager,
                    object_path.as_str(),
                    interface_name.as_ref().as_deref(),
                )
            } else {
                panic!("cannot get closure...")
            };
            res.into_glib()
        }
        let get_proxy_type_func = if get_proxy_type_func_data.is_some() {
            Some(get_proxy_type_func_func::<P> as _)
        } else {
            None
        };
        unsafe extern "C" fn get_proxy_type_destroy_notify_func<P: IsA<Cancellable>>(
            data: glib::ffi::gpointer,
        ) {
            let _callback: Box_<
                Option<
                    Box_<
                        dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type
                            + 'static,
                    >,
                >,
            > = Box_::from_raw(data as *mut _);
        }
        let destroy_call6 = Some(get_proxy_type_destroy_notify_func::<P> as _);
        let super_callback0: Box_<
            Option<
                Box_<
                    dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type
                        + 'static,
                >,
            >,
        > = get_proxy_type_func_data;
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_dbus_object_manager_client_new_sync(
                connection.to_glib_none().0,
                flags.into_glib(),
                name.to_glib_none().0,
                object_path.to_glib_none().0,
                get_proxy_type_func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call6,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //#[doc(alias = "g_dbus_object_manager_client_new")]
    //pub fn new<P: IsA<Cancellable>, Q: FnOnce(Result<DBusObjectManagerClient, glib::Error>) + Send + 'static>(connection: &DBusConnection, flags: DBusObjectManagerClientFlags, name: &str, object_path: &str, get_proxy_type_func: Option<Box_<dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type + 'static>>, get_proxy_type_destroy_notify: Fn() + 'static, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call ffi:g_dbus_object_manager_client_new() }
    //}

    //
    //pub fn new_future(connection: &DBusConnection, flags: DBusObjectManagerClientFlags, name: &str, object_path: &str, get_proxy_type_func: Option<Box_<dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type + 'static>>, get_proxy_type_destroy_notify: Fn() + 'static) -> Pin<Box_<dyn std::future::Future<Output = Result<, >> + 'static>> {

    //let connection = connection.clone();
    //let name = String::from(name);
    //let object_path = String::from(object_path);
    //let get_proxy_type_func = get_proxy_type_func.map(ToOwned::to_owned);
    //let get_proxy_type_destroy_notify = get_proxy_type_destroy_notify.map(ToOwned::to_owned);
    //Box_::pin(crate::GioFuture::new(&(), move |_obj, cancellable, send| {
    //    Self::new(
    //        &connection,
    //        flags,
    //        &name,
    //        &object_path,
    //        get_proxy_type_func.as_ref().map(::std::borrow::Borrow::borrow),
    //        get_proxy_type_destroy_notify.as_ref().map(::std::borrow::Borrow::borrow),
    //        Some(cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );
    //}))
    //}

    //#[doc(alias = "g_dbus_object_manager_client_new_for_bus")]
    //#[doc(alias = "new_for_bus")]
    //pub fn for_bus<P: IsA<Cancellable>, Q: FnOnce(Result<DBusObjectManagerClient, glib::Error>) + Send + 'static>(bus_type: BusType, flags: DBusObjectManagerClientFlags, name: &str, object_path: &str, get_proxy_type_func: Option<Box_<dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type + 'static>>, get_proxy_type_destroy_notify: Fn() + 'static, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call ffi:g_dbus_object_manager_client_new_for_bus() }
    //}

    //
    //pub fn for_bus_future(bus_type: BusType, flags: DBusObjectManagerClientFlags, name: &str, object_path: &str, get_proxy_type_func: Option<Box_<dyn Fn(&DBusObjectManagerClient, &str, Option<&str>) -> glib::types::Type + 'static>>, get_proxy_type_destroy_notify: Fn() + 'static) -> Pin<Box_<dyn std::future::Future<Output = Result<, >> + 'static>> {

    //let name = String::from(name);
    //let object_path = String::from(object_path);
    //let get_proxy_type_func = get_proxy_type_func.map(ToOwned::to_owned);
    //let get_proxy_type_destroy_notify = get_proxy_type_destroy_notify.map(ToOwned::to_owned);
    //Box_::pin(crate::GioFuture::new(&(), move |_obj, cancellable, send| {
    //    Self::for_bus(
    //        bus_type,
    //        flags,
    //        &name,
    //        &object_path,
    //        get_proxy_type_func.as_ref().map(::std::borrow::Borrow::borrow),
    //        get_proxy_type_destroy_notify.as_ref().map(::std::borrow::Borrow::borrow),
    //        Some(cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );
    //}))
    //}
}

impl fmt::Display for DBusObjectManagerClient {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(&DBusObjectManagerClientExt::name(self))
    }
}

pub const NONE_DBUS_OBJECT_MANAGER_CLIENT: Option<&DBusObjectManagerClient> = None;

pub trait DBusObjectManagerClientExt: 'static {
    #[doc(alias = "g_dbus_object_manager_client_get_connection")]
    #[doc(alias = "get_connection")]
    fn connection(&self) -> DBusConnection;

    #[doc(alias = "g_dbus_object_manager_client_get_flags")]
    #[doc(alias = "get_flags")]
    fn flags(&self) -> DBusObjectManagerClientFlags;

    #[doc(alias = "g_dbus_object_manager_client_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> glib::GString;

    #[doc(alias = "g_dbus_object_manager_client_get_name_owner")]
    #[doc(alias = "get_name_owner")]
    fn name_owner(&self) -> Option<glib::GString>;

    //#[doc(alias = "get-proxy-type-destroy-notify")]
    //fn get_proxy_type_destroy_notify(&self) -> /*Unimplemented*/Fundamental: Pointer;

    //#[doc(alias = "get-proxy-type-func")]
    //fn get_proxy_type_func(&self) -> /*Unimplemented*/Fundamental: Pointer;

    //#[doc(alias = "get-proxy-type-user-data")]
    //fn get_proxy_type_user_data(&self) -> /*Unimplemented*/Fundamental: Pointer;

    //#[doc(alias = "interface-proxy-properties-changed")]
    //fn connect_interface_proxy_properties_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //#[doc(alias = "interface-proxy-signal")]
    //fn connect_interface_proxy_signal<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "name-owner")]
    fn connect_name_owner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DBusObjectManagerClient>> DBusObjectManagerClientExt for O {
    fn connection(&self) -> DBusConnection {
        unsafe {
            from_glib_none(ffi::g_dbus_object_manager_client_get_connection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn flags(&self) -> DBusObjectManagerClientFlags {
        unsafe {
            from_glib(ffi::g_dbus_object_manager_client_get_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn name(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::g_dbus_object_manager_client_get_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn name_owner(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::g_dbus_object_manager_client_get_name_owner(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn get_proxy_type_destroy_notify(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"get-proxy-type-destroy-notify\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `get-proxy-type-destroy-notify` getter")
    //    }
    //}

    //fn get_proxy_type_func(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"get-proxy-type-func\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `get-proxy-type-func` getter")
    //    }
    //}

    //fn get_proxy_type_user_data(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"get-proxy-type-user-data\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `get-proxy-type-user-data` getter")
    //    }
    //}

    //fn connect_interface_proxy_properties_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored object_proxy: Gio.DBusObjectProxy
    //    Empty ctype invalidated_properties: *.CArray TypeId { ns_id: 0, id: 28 }
    //}

    //fn connect_interface_proxy_signal<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored object_proxy: Gio.DBusObjectProxy
    //}

    fn connect_name_owner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_owner_trampoline<
            P: IsA<DBusObjectManagerClient>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GDBusObjectManagerClient,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DBusObjectManagerClient::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name-owner\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_name_owner_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}
