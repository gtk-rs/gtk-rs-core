// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, Cancellable};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GInitable")]
    pub struct Initable(Interface<ffi::GInitable, ffi::GInitableIface>);

    match fn {
        type_ => || ffi::g_initable_get_type(),
    }
}

impl Initable {
    pub const NONE: Option<&'static Initable> = None;
}

pub trait InitableExt: IsA<Initable> + 'static {
    #[doc(alias = "g_initable_init")]
    unsafe fn init(&self, cancellable: Option<&impl IsA<Cancellable>>) -> Result<(), glib::Error> {
        let mut error = std::ptr::null_mut();
        let is_ok = ffi::g_initable_init(
            self.as_ref().to_glib_none().0,
            cancellable.map(|p| p.as_ref()).to_glib_none().0,
            &mut error,
        );
        debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
        if error.is_null() {
            Ok(())
        } else {
            Err(from_glib_full(error))
        }
    }
}

impl<O: IsA<Initable>> InitableExt for O {}
