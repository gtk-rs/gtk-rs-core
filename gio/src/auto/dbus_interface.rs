// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, DBusInterfaceInfo, DBusObject};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GDBusInterface")]
    pub struct DBusInterface(Interface<ffi::GDBusInterface, ffi::GDBusInterfaceIface>);

    match fn {
        type_ => || ffi::g_dbus_interface_get_type(),
    }
}

impl DBusInterface {
    pub const NONE: Option<&'static DBusInterface> = None;
}

pub trait DBusInterfaceExt: IsA<DBusInterface> + 'static {
    #[doc(alias = "g_dbus_interface_dup_object")]
    #[doc(alias = "dup_object")]
    fn get(&self) -> Option<DBusObject> {
        unsafe {
            from_glib_full(ffi::g_dbus_interface_dup_object(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_dbus_interface_get_info")]
    #[doc(alias = "get_info")]
    fn info(&self) -> DBusInterfaceInfo {
        unsafe {
            from_glib_none(ffi::g_dbus_interface_get_info(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_dbus_interface_set_object")]
    fn set_object(&self, object: Option<&impl IsA<DBusObject>>) {
        unsafe {
            ffi::g_dbus_interface_set_object(
                self.as_ref().to_glib_none().0,
                object.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }
}

impl<O: IsA<DBusInterface>> DBusInterfaceExt for O {}
