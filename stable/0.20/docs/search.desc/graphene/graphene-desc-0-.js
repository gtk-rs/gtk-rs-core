searchState.loadedDescShard("graphene", 0, "Rust Graphene bindings\nA 3D box, described as the volume between a minimum and a …\nRotate in the default order; the default order is one of …\nThe ray is entering the intersected object\nDescribe a rotation using Euler angles.\nSpecify the order of the rotations on each axis.\nA 3D volume delimited by 2D clip planes.\nThe ray is leaving the intersected object\nA structure capable of holding a 4x4 matrix.\nNo intersection\nA 2D plane that extends infinitely in a 3D volume.\nA point with two coordinates.\nA point with three components: X, Y, and Z.\nA 4 vertex quadrilateral, as represented by four <code>Point</code>.\nA quaternion.\nA ray emitted from an origin in a given direction.\nThe type of intersection.\nThe location and size of a rectangle region.\nDefines a relative rotation along the X, Y, and X axes …\nDefines a relative rotation along the X, Y, and Z axes …\nDefines a relative rotation along the X, Z, and X axes …\nDefines a relative rotation along the X, Z, and Y axes …\nDefines a relative rotation along the Y, X, and Y axes …\nDefines a relative rotation along the Y, X, and Z axes …\nDefines a relative rotation along the Y, Z, and X axes …\nDefines a relative rotation along the Y, Z, and Y axes …\nDefines a relative rotation along the Z, X, and Y axes …\nDefines a relative rotation along the Z, X, and Z axes …\nDefines a relative rotation along the Z, Y, and X axes …\nDefines a relative rotation along the Z, Y, and Z axes …\nA size.\nA sphere, represented by its center and radius.\nDefines a static rotation along the X, Y, and X axes …\nDefines a static rotation along the X, Y, and Z axes …\nDefines a static rotation along the X, Z, and X axes …\nDefines a static rotation along the X, Z, and Y axes …\nDefines a static rotation along the Y, X, and Y axes …\nDefines a static rotation along the Y, X, and Z axes …\nDefines a static rotation along the Y, Z, and X axes …\nDefines a static rotation along the Y, Z, and Y axes …\nDefines a static rotation along the Z, X, and Y axes …\nDefines a static rotation along the Z, X, and Z axes …\nDefines a static rotation along the Z, Y, and X axes …\nDefines a static rotation along the Z, Y, and Z axes …\nA triangle.\nA structure capable of holding a vector with two …\nA structure capable of holding a vector with three …\nA structure capable of holding a vector with four …\nRotate in the X, Y, and Z order. Deprecated in Graphene …\nRotate in the X, Z, and Y order. Deprecated in Graphene …\nRotate in the Y, X, and Z order. Deprecated in Graphene …\nRotate in the Y, Z, and X order. Deprecated in Graphene …\nRotate in the Z, X, and Y order. Deprecated in Graphene …\nRotate in the Z, Y, and X order. Deprecated in Graphene …\nAdds two <code>Quaternion</code> <code>self</code> and <code>b</code>.\nAdds each component of the two passed vectors and places …\nAdds each component of the two given vectors.\nAdds each component of the two given vectors.\nRetrieves the first component of the Euler angle vector, …\nCompute the area of given normalized rectangle.\nComputes the area of the given <code>Triangle</code>.\nComputes the barycentric coordinates of the given point <code>p</code>.\nRetrieves the second component of the Euler angle vector, …\nRetrieves the coordinates of the bottom-left corner of the …\nRetrieves the coordinates of the bottom-right corner of …\nComputes the bounding box capable of containing the given …\nComputes the bounding box of the given <code>Triangle</code>.\nComputes the bounding <code>Sphere</code> capable of containing the …\nComputes the bounding rectangle of <code>self</code> and places it into …\nRetrieves the coordinates of the center of a <code>Box</code>.\nRetrieves the coordinates of the center of the given …\nRetrieves the coordinates of the center of a <code>Sphere</code>.\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nComputes the point on the given <code>Ray</code> that is closest to the …\nRetrieves the distance along the normal vector of the …\nChecks if the given <code>Quad</code> contains the given <code>Point</code>.\nChecks whether the <code>Box</code> <code>self</code> contains the given <code>Box</code> <code>b</code>.\nChecks whether <code>self</code> contains the given <code>point</code>.\nChecks whether a point is inside the volume defined by the …\nChecks whether a <code>Rect</code> contains the given coordinates.\nChecks whether the given <code>point</code> is contained in the volume …\nChecks whether the given triangle <code>self</code> contains the point <code>p</code>…\nChecks whether a <code>Rect</code> fully contains the given rectangle.\nComputes the cross product of the two given <code>Point3D</code>.\nComputes the cross product of the two given vectors.\nDecomposes a transformation matrix into its component …\nRetrieves the size of the <code>self</code> on the Z axis.\nComputes the determinant of the given matrix.\nRetrieves the direction of the given <code>Ray</code>.\nComputes the distance of <code>point</code> from a <code>Plane</code>.\nComputes the distance between <code>self</code> and <code>b</code>.\nComputes the distance between the two given <code>Point3D</code>.\nComputes the distance of the given <code>point</code> from the surface …\nComputes the distance of the origin of the given <code>Ray</code> from …\nComputes the distance of the closest approach between the …\nDivides each component of the first operand <code>self</code> by the …\nDivides each component of the first operand <code>self</code> by the …\nDivides each component of the first operand <code>self</code> by the …\nComputes the dot product of the two given <code>Point3D</code>.\nComputes the dot product of two <code>Quaternion</code>.\nComputes the dot product of the two given vectors.\nComputes the dot product of the two given vectors.\nComputes the dot product of the two given vectors.\nA degenerate <code>Box</code> that can only be expanded.\nChecks whether the two given <code>Matrix</code> matrices are …\nExpands the dimensions of <code>self</code> to include the coordinates …\nExpands a <code>Rect</code> to contain the given <code>Point</code>.\nExpands the dimensions of <code>self</code> by the given <code>scalar</code> value.\nExpands the dimensions of <code>self</code> to include the coordinates …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes a <code>Matrix</code> from the values of an affine …\nInitializes a <code>Quaternion</code> using an <code>angle</code> on a specific <code>axis</code>.\nInitializes a <code>Quaternion</code> using the values of the Euler …\nInitializes a <code>Quaternion</code> using the given <code>Euler</code>.\nInitializes a <code>Matrix</code> with the given array of floating …\nInitializes a <code>Triangle</code> using the three given arrays of …\nInitializes <code>self</code> with the contents of the given array.\nInitializes a <code>Vec3</code> with the values from an array.\nInitializes a <code>Vec4</code> with the values inside the given array.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nInitializes a <code>Euler</code> using the given rotation matrix.\nInitializes a <code>Frustum</code> using the given <code>matrix</code>.\nInitializes a <code>Quaternion</code> using the rotation components of …\nInitializes the given <code>Plane</code> using the given normal vector …\nInitializes a <code>Triangle</code> using the three given 3D points.\nInitializes the given <code>Box</code> with the given array of vertices.\nInitializes the given <code>Plane</code> using the 3 provided co-planar …\nInitializes a <code>Quad</code> using an array of points.\nInitializes the given <code>Sphere</code> using the given array of 3D …\nInitializes a <code>Euler</code> using the given normalized quaternion.\nInitializes a <code>Euler</code> using the given angles and order of …\nInitializes a <code>Quaternion</code> using the values of the Euler …\nInitializes a <code>Quad</code> using the four corners of the given <code>Rect</code>…\nInitializes <code>self</code> with the coordinates inside the given <code>Vec2</code>…\nInitializes a <code>Vec4</code> using the components of a <code>Vec2</code> and the …\nInitializes the given <code>Box</code> with two vertices stored inside …\nInitializes a <code>Euler</code> using the angles contained in a <code>Vec3</code>.\nInitializes a <code>Point3D</code> using the components of a <code>Vec3</code>.\nInitializes the given <code>Ray</code> using the given vectors.\nInitializes a <code>Triangle</code> using the three given vectors.\nInitializes a <code>Vec4</code> using the components of a <code>Vec3</code> and the …\nInitializes a <code>Matrix</code> with the given four row vectors.\nInitializes the given <code>Plane</code> using the components of the …\nInitializes a <code>Quaternion</code> with the values from <code>src</code>.\nInitializes the given <code>Box</code> with the given array of vertices.\nInitializes the given <code>Sphere</code> using the given array of 3D …\nRetrieves the third component of the Euler angle vector, …\nRetrieves the size of the <code>self</code> on the Y axis.\nRetrieves the normalized height of the given rectangle.\nA degenerate <code>Box</code> that cannot be expanded.\nChanges the given rectangle to be smaller, or larger …\nChanges the given rectangle to be smaller, or larger …\nLinearly interpolates the two given <code>Matrix</code> by …\nLinearly interpolates the coordinates of <code>self</code> and <code>b</code> using …\nLinearly interpolates each component of <code>self</code> and <code>b</code> using …\nLinearly interpolates the origin and size of the two given …\nLinearly interpolates the two given <code>Size</code> using the given …\nLinearly interpolates <code>self</code> and <code>v2</code> using the given <code>factor</code>.\nLinearly interpolates <code>self</code> and <code>v2</code> using the given <code>factor</code>.\nLinearly interpolates <code>self</code> and <code>v2</code> using the given <code>factor</code>.\nIntersects the given <code>Ray</code> <code>self</code> with the given <code>Box</code> <code>b</code>.\nIntersects the given <code>Ray</code> <code>self</code> with the given <code>Sphere</code> <code>s</code>.\nIntersects the given <code>Ray</code> <code>self</code> with the given <code>Triangle</code> <code>t</code>.\nIntersects the two given <code>Box</code>.\nComputes the intersection of the two given rectangles.\nChecks whether the given <code>box_</code> intersects a plane of a …\nChecks whether the given <code>Ray</code> <code>self</code> intersects the given <code>Box</code> …\nChecks whether the given <code>sphere</code> intersects a plane of a …\nChecks if the given <code>Ray</code> <code>self</code> intersects the given <code>Sphere</code> <code>s</code>.\nChecks whether the given <code>Ray</code> <code>self</code> intersects the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the given matrix.\nInverts a <code>Quaternion</code>, and returns the conjugate quaternion …\nChecks whether the given <code>Matrix</code> is compatible with an a 2D …\nChecks whether a <code>Matrix</code> has a visible back face.\nChecks whether the sphere has a zero radius.\nChecks whether the given <code>Matrix</code> is the identity matrix.\nChecks whether a matrix is singular.\nComputes the length of the vector represented by the …\nComputes the length of the given vector.\nRetrieves the length of the given vector <code>self</code>.\nComputes the length of the given <code>Vec4</code>.\nRetrieves the coordinates of the maximum point of the given\nCompares the two given vectors and places the maximum …\nCompares each component of the two given vectors and …\nCompares each component of the two given vectors and …\nComputes the coordinates of the midpoint of the given …\nRetrieves the coordinates of the minimum point of the given\nCompares the two given vectors and places the minimum …\nCompares each component of the two given vectors and …\nCompares each component of the two given vectors and …\nA <code>Box</code> with the minimum vertex set at (-1, -1, -1) and the …\nMultiplies two <code>Matrix</code>.\nMultiplies two <code>Quaternion</code> <code>self</code> and <code>b</code>.\nMultiplies each component of the two passed vectors and …\nMultiplies each component of the two given vectors.\nMultiplies each component of the two given vectors.\nCompares the two given <code>Matrix</code> matrices and checks whether …\nChecks whether the two points <code>self</code> and <code>b</code> are within the …\nChecks whether the two points are near each other, within …\nCompares the two given <code>Vec2</code> vectors and checks whether …\nCompares the two given <code>Vec3</code> vectors and checks whether …\nCompares the two given <code>Vec4</code> vectors and checks whether …\nNegates the normal vector and constant of a <code>Plane</code>, …\nNegates the given <code>Vec2</code>.\nNegates the given <code>Vec3</code>.\nNegates the given <code>Vec4</code>.\nInitializes the given <code>Box</code> with two vertices.\nInitializes a <code>Euler</code> using the given angles.\nInitializes the given <code>Frustum</code> using the provided clipping …\nInitializes the given <code>Plane</code> using the given <code>normal</code> vector …\nInitializes <code>self</code> to the given <code>x</code> and <code>y</code> coordinates.\nInitializes a <code>Point3D</code> with the given coordinates.\nInitializes a <code>Quad</code> with the given points.\nInitializes a <code>Quaternion</code> using the given four values.\nInitializes the given <code>Ray</code> using the given <code>origin</code> and …\nInitializes the given <code>Rect</code> with the given values.\nInitializes a <code>Size</code> using the given <code>width</code> and <code>height</code>.\nInitializes the given <code>Sphere</code> with the given <code>center</code> and …\nInitializes a <code>Vec2</code> using the given values.\nInitializes a <code>Vec3</code> using the given values.\nInitializes a <code>Vec4</code> using the given values.\nInitializes a <code>Matrix</code> compatible with <code>Frustum</code>.\nInitializes a <code>Matrix</code> with the identity matrix.\nInitializes a <code>Quaternion</code> using the identity transformation.\nInitializes a <code>Matrix</code> so that it positions the “camera” …\nInitializes a <code>Matrix</code> with an orthographic projection.\nInitializes a <code>Matrix</code> with a perspective projection.\nInitializes <code>self</code> to represent a rotation of <code>angle</code> degrees …\nInitializes a <code>Matrix</code> with the given scaling factors.\nInitializes a <code>Matrix</code> with a skew transformation with the …\nInitializes a <code>Matrix</code> with a translation to the given …\nRetrieves the normal vector pointing towards the origin of …\nComputes the normal vector of the given <code>Triangle</code>.\nNormalizes the given <code>Matrix</code>.\nNormalizes the vector of the given <code>Plane</code>, and adjusts the …\nComputes the normalization of the vector represented by the\nNormalizes a <code>Quaternion</code>.\nNormalizes the passed rectangle.\nComputes the normalized vector for the given vector <code>self</code>.\nNormalizes the given <code>Vec3</code>.\nNormalizes the given <code>Vec4</code>.\nNormalizes the passed rectangle.\nNormalizes the coordinates of a <code>Point3D</code> using the given …\nOffsets the origin by <code>d_x</code> and <code>d_y</code>.\nOffsets the origin of the given rectangle by <code>d_x</code> and <code>d_y</code>.\nA <code>Box</code> with the minimum vertex set at (0, 0, 0) and the …\nRetrieves a constant vector with (1, 1) components.\nProvides a constant pointer to a vector with three …\nRetrieves a pointer to a <code>Vec4</code> with all its components set …\nA <code>Box</code> with the minimum vertex set at (-1, -1, -1) and the …\nRetrieves the order used to apply the rotations described …\nRetrieves the origin of the given <code>Ray</code>.\nApplies a perspective of <code>depth</code> to the matrix.\nComputes the plane based on the vertices of the given …\nRetrieves the planes that define the given <code>Frustum</code>.\nRetrieves the point of a <code>Quad</code> at the given index.\nRetrieves the three vertices of the given <code>Triangle</code> and …\nRetrieves the coordinates of a point at the distance <code>t</code> …\nTraits intended for blanket imports.\nPrints the contents of a matrix to the standard error …\nProjects a <code>Point</code> using the matrix <code>self</code>.\nProjects all corners of a <code>Rect</code> using the given matrix.\nProjects a <code>Rect</code> using the given matrix.\nRetrieves the radius of a <code>Sphere</code>.\nReorders a <code>Euler</code> using <code>order</code>.\nAdds a rotation transformation to <code>self</code>, using the given …\nAdds a rotation transformation to <code>self</code>, using the given …\nAdds a rotation transformation to <code>self</code>, using the given …\nAdds a rotation transformation around the X axis to <code>self</code>, …\nAdds a rotation transformation around the Y axis to <code>self</code>, …\nAdds a rotation transformation around the Z axis to <code>self</code>, …\nRounds the origin of the given rectangle to its nearest …\nRetrieves the given row vector at <code>index_</code> inside a matrix.\nAdds a scaling transformation to <code>self</code>, using the three …\nScales the coordinates of the given <code>Point3D</code> by the given …\nScales all the elements of a <code>Quaternion</code> <code>self</code> using the …\nScales the size and origin of a rectangle horizontaly by …\nScales the components of a <code>Size</code> using the given <code>factor</code>.\nMultiplies all components of the given vector with the …\nMultiplies all components of the given vector with the …\nMultiplies all components of the given vector with the …\nRetrieves the size of the box on all three axes, and stores\nAdds a skew of <code>factor</code> on the X and Y axis to the given …\nAdds a skew of <code>factor</code> on the X and Z axis to the given …\nAdds a skew of <code>factor</code> on the Y and Z axis to the given …\nInterpolates between the two given quaternions using a …\nSubtracts from each component of the first operand <code>self</code> the\nSubtracts from each component of the first operand <code>self</code> the\nSubtracts from each component of the first operand <code>self</code> the\nConverts a <code>Matrix</code> to an affine transformation matrix, if …\nConverts a quaternion into an <code>angle</code>, <code>axis</code> pair.\nConverts a <code>Quaternion</code> to its corresponding rotations on …\nConverts a <code>Matrix</code> to an array of floating point values.\nStores the components of <code>self</code> into an array.\nCopies the components of a <code>Vec3</code> into the given array.\nStores the components of the given <code>Vec4</code> into an array of …\nConverts a <code>Euler</code> into a transformation matrix expressing …\nConverts a quaternion into a transformation matrix …\nConverts a <code>Euler</code> into a <code>Quaternion</code>.\nConverts a <code>Quaternion</code> to its corresponding rotations on …\nStores the coordinates of the given <code>Point</code> into a <code>Vec2</code>.\nRetrieves the angles of a <code>Euler</code> and initializes a <code>Vec3</code> …\nStores the coordinates of a <code>Point3D</code> into a <code>Vec3</code>.\nCopies the components of a <code>Quaternion</code> into a <code>Vec4</code>.\nRetrieves the coordinates of the top-left corner of the …\nRetrieves the coordinates of the top-right corner of the …\nTransforms a <code>Plane</code> <code>self</code> using the given <code>matrix</code> and …\nTransforms each corner of a <code>Rect</code> using the given matrix …\nTransforms the vertices of a <code>Box</code> using the given matrix …\nTransforms the given <code>Point</code> using the matrix <code>self</code>.\nTransforms the given <code>Point3D</code> using the matrix <code>self</code>.\nTransform a <code>Ray</code> using the given matrix <code>self</code>.\nTransforms each corner of a <code>Rect</code> using the given matrix …\nTransforms a <code>Sphere</code> using the given matrix <code>self</code>. The …\nTransforms the given <code>Vec3</code> using the matrix <code>self</code>.\nTransforms the given <code>Vec4</code> using the matrix <code>self</code>.\nAdds a translation transformation to <code>self</code> using the …\nTranslates the center of the given <code>Sphere</code> using the <code>point</code> …\nTransposes the given matrix.\nUnions the two given <code>Box</code>.\nComputes the union of the two given rectangles.\nUnprojects the given <code>point</code> using the <code>self</code> matrix and a …\nUndoes the transformation on the corners of a <code>Rect</code> using …\nUndoes the transformation of a <code>Point</code> using the given …\nComputes the UV coordinates of the given point <code>p</code>.\nRetrieves the value at the given <code>row</code> and <code>col</code> index.\nComputes the vertices of the given <code>Box</code>.\nComputes the four vertices of a <code>Rect</code>.\nRetrieves the three vertices of the given <code>Triangle</code>.\nRetrieves the value of the fourth component of the given …\nRetrieves a pointer to a <code>Vec4</code> with its components set to …\nRetrieves the size of the <code>self</code> on the X axis.\nRetrieves the normalized width of the given rectangle.\nInitializes a <code>Euler</code> with the given angles and <code>order</code>.\nRetrieves the rotation angle on the X axis, in degrees.\nRetrieves the normalized X coordinate of the origin of the …\nRetrieves the X component of the <code>Vec2</code>.\nRetrieves the first component of the given vector <code>self</code>.\nRetrieves the value of the first component of the given …\nRetrieves a constant vector with (1, 0) components.\nProvides a constant pointer to a vector with three …\nRetrieves a pointer to a <code>Vec4</code> with its components set to …\nRetrieves the scaling factor on the X axis in <code>self</code>.\nRetrieves the translation component on the X axis from <code>self</code>…\nCreates a <code>Vec2</code> that contains the first and second …\nCreates a <code>Vec2</code> that contains the first two components of …\nCreates a <code>Vec3</code> that contains the first two components of …\nCreates a <code>Vec3</code> that contains the first three components of …\nConverts a <code>Vec3</code> in a <code>Vec4</code> using 0.0 as the value for the …\nConverts a <code>Vec3</code> in a <code>Vec4</code> using 1.0 as the value for the …\nConverts a <code>Vec3</code> in a <code>Vec4</code> using <code>w</code> as the value of the …\nRetrieves the rotation angle on the Y axis, in degrees.\nRetrieves the normalized Y coordinate of the origin of the …\nRetrieves the Y component of the <code>Vec2</code>.\nRetrieves the second component of the given vector <code>self</code>.\nRetrieves the value of the second component of the given …\nRetrieves a constant vector with (0, 1) components.\nProvides a constant pointer to a vector with three …\nRetrieves a pointer to a <code>Vec4</code> with its components set to …\nRetrieves the scaling factor on the Y axis in <code>self</code>.\nRetrieves the translation component on the Y axis from <code>self</code>…\nRetrieves the rotation angle on the Z axis, in degrees.\nRetrieves the third component of the given vector <code>self</code>.\nRetrieves the value of the third component of the given …\nProvides a constant pointer to a vector with three …\nRetrieves a pointer to a <code>Vec4</code> with its components set to …\nRetrieves the scaling factor on the Z axis in <code>self</code>.\nRetrieves the translation component on the Z axis from <code>self</code>…\nA <code>Box</code> with both the minimum and maximum vertices set at …\nReturns a point fixed at (0, 0).\nRetrieves a constant point with all three coordinates set …\nReturns a degenerate rectangle with origin fixed at (0, 0) …\nA constant pointer to a zero <code>Size</code>, useful for equality …\nRetrieves a constant vector with (0, 0) components.\nProvides a constant pointer to a vector with three …\nRetrieves a pointer to a <code>Vec4</code> with all its components set …")