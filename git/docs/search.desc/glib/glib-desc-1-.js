searchState.loadedDescShard("glib", 1, "Trait for class methods on <code>Object</code> and subclasses of it.\nAutomatically implemented by <code>ObjectSubclass</code> variants of …\nImplemented by types representing <code>glib::Object</code> and …\n<code>Value</code> type checker for object types.\nA weak reference to the object it was created for that can …\nA weak reference to an object.\nA handle to disconnect a weak ref notify closure.\nAdd a callback to be notified when the Object is disposed.\nAdd a callback to be notified when the Object is disposed.\nSet the binding flags to <code>BIDIRECTIONAL</code>.\nBind property <code>source_property</code> on this object to the …\nBlock a given signal handler.\nBuild the object with the provided properties.\nEstablish the property binding.\nCreate a new object builder for a specific type.\nCreate a new object builder for a specific type.\nReturns the class of the object.\nReturns the class of the object in the given type <code>T</code>.\nMakes a clone of this shared reference.\nMakes a clone of this shared reference.\nComparison for two GObjects.\nComparison for two GObjects.\nConnect to the signal <code>signal_name</code> on this object.\nConnect a closure to the signal <code>signal_name</code> on this object.\nConnect a closure to the signal <code>signal_id</code> on this object.\nConnect to the signal <code>signal_id</code> on this object.\nConnect to the signal <code>signal_name</code> on this object.\nConnect to the signal <code>signal_id</code> on this object.\nConnect to the <code>notify</code> signal of the object.\nConnect to the <code>notify</code> signal of the object.\nConnect to the <code>notify</code> signal of the object.\nConnect to the signal <code>signal_name</code> on this object.\nConnect to the signal <code>signal_id</code> on this object.\nReturn previously set arbitrary data of this object with …\nGets the default interface struct for <code>Self</code>.\nDisconnect a previously connected signal handler.\nTries to downcast to a subclass or interface implementor <code>T</code>.\nTries to downcast to a reference of its subclass or …\nCasts this class to a reference to a child type’s class …\nCasts this class to a mutable reference to a child type’…\nDowngrade this object to a weak reference.\nDowngrade to a weak reference.\nTries to cast to an object of type <code>T</code>. This handles …\nTries to cast to reference to an object of type <code>T</code>. This …\nEmit signal by signal id.\nEmit signal by its name.\nEmit signal by its name with details.\nEmit signal by its name with details.\nEmit signal by its name.\nEmit signal by signal id with details.\nEmit signal by signal id with details.\nSame as <code>Self::emit</code> but takes <code>Value</code> for the arguments.\nEquality for two GObjects.\nEquality for two GObjects.\nGet the <code>ParamSpec</code> of the property <code>property_name</code> of this …\nGet the <code>ParamSpec</code> of the property <code>property_name</code> of this …\nGet the <code>ParamSpec</code> of the property <code>property_name</code> of this …\nBind the properties with the given flags.\nFreeze all property notifications until the return guard …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the interface struct for <code>Self</code> of <code>klass</code>.\nGets the class struct for <code>Self</code> of <code>type_</code>.\nGets the default interface struct for <code>Self</code>.\nCheck if the object has a property <code>property_name</code> of the …\nCheck if the object class has a property <code>property_name</code> of …\nCheck if this interface has a property <code>property_name</code> of …\nHashes the memory address of this object.\nHashes the memory address of this object.\nGet the type id for the instance type of this interface.\nReturns the interface <code>T</code> of the object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the binding flags to <code>INVERT_BOOLEAN</code>.\nReturns <code>true</code> if the object is an instance of (can be cast …\nReturn all <code>ParamSpec</code> of the properties of this object.\nReturn all <code>ParamSpec</code> of the properties of this object …\nReturn all <code>ParamSpec</code> of the properties of this interface.\nCreate a new instance of an object with the default …\nCreate a new empty weak reference.\nCreates a new borrowed object reference.\nCreate a new instance of an object of the given type with …\nNotify that the given property has changed its value.\nNotify that the given property has changed its value.\nReturns the <code>ObjectClass</code> of the object.\nGets the parent class struct, if any.\nGets the parent interface struct, if any.\nPartial comparison for two GObjects.\nPartial comparison for two GObjects.\nGets the property <code>property_name</code> of the object and cast it …\nSets property <code>name</code> to the given value <code>value</code>.\nSets property <code>name</code> using the given <code>ValueType</code> <code>V</code> built from …\nSets property <code>name</code> to the given inner value if the …\nSets property <code>name</code> using the given <code>ValueType</code> <code>V</code> built from …\nSets property <code>name</code> to the given inner value if <code>value</code> is …\nGet the type of the property <code>property_name</code> of this object.\nGet the type of the property <code>property_name</code> of this object …\nGet the type of the property <code>property_name</code> of this …\nGets the property <code>property_name</code> of the object.\nReturn previously set arbitrary data of this object with …\nReturns the strong reference count of this object.\nRuns the dispose mechanism of the object.\nSet this weak reference to the given object.\nSet arbitrary data on this object with the given <code>key</code>.\nSets multiple properties of the object at once.\nSets multiple properties of the object at once.\nSets the property <code>property_name</code> of the object to value …\nSets the property <code>property_name</code> of the object to value …\nSet arbitrary data on this object with the given <code>key</code>.\nRetrieve previously set arbitrary data of this object with …\nRetrieve previously set arbitrary data of this object with …\nStop emission of the currently emitted signal.\nStop emission of the currently emitted signal by the …\nSet the binding flags to <code>SYNC_CREATE</code>.\nTransform changed property values from the target object …\nTransform changed property values from the target object …\nTransform changed property values from the source object …\nTransform changed property values from the source object …\nReturns the type of the object.\nGets the type of this builder.\nGet the type id for this class.\nGet the type id for this interface.\nUnblock a given signal handler.\nCasts to <code>T</code> unconditionally.\nCasts to <code>&amp;T</code> unconditionally.\nUpcasts an object to a superclass or interface <code>T</code>.\nUpcasts an object to a reference of its superclass or …\nCasts this class to a reference to a parent type’s class.\nCasts this class to a mutable reference to a parent type’…\nTry to upgrade this weak reference to a strong reference.\nTry to upgrade this weak reference to a strong reference.\nLimits the lifetime of <code>closure</code> to the lifetime of the …\nCreate a new instance of an object of the given type with …\nCreate a new instance of an object with the default …\nA trait implemented by the various <code>ParamSpec</code> builder types.\nPreferred value to be used as setter for the associated …\nTrait containing all <code>TypePlugin</code> methods.\nDefault: <code>None</code>\nDefault: <code>None</code>\nDefault: <code>None</code>\nCalls the <code>complete_interface_info</code> function from the …\nCalls the <code>complete_interface_info</code> function from the …\nCalls the <code>complete_type_info</code> function from the …\nCalls the <code>complete_type_info</code> function from the …\nMark the property as construct\nMark the property as construct\nMark the property as construct\nMark the property as construct only\nMark the property as construct only\nMark the property as construct only\nImplementation detail.\nMark the property as deprecated\nMark the property as deprecated\nMark the property as deprecated\nMark the property as explicit notify\nMark the property as explicit notify\nMark the property as explicit notify\nDefault: <code>glib::ParamFlags::READWRITE</code>\nDefault: <code>glib::ParamFlags::READWRITE</code>\nDefault: <code>glib::ParamFlags::READWRITE</code>\nMark the property as lax validation\nMark the property as lax validation\nMark the property as lax validation\nBy default, the nickname of its redirect target will be …\nBy default, the nickname of its redirect target will be …\nBy default, the nickname of its redirect target will be …\nMark the property as read only and drops the READWRITE …\nMark the property as read only and drops the READWRITE …\nMark the property as read only and drops the READWRITE …\nMark the property as readwrite, it is the default value.\nMark the property as readwrite, it is the default value.\nMark the property as readwrite, it is the default value.\nImplementation detail.\nImplementation detail.\nImplementation detail.\nCalls the <code>unuse_plugin</code> function from the <code>GTypePluginClass</code> …\nCalls the <code>unuse_plugin</code> function from the <code>GTypePluginClass</code> …\nCalls the <code>use_plugin</code> function from the <code>GTypePluginClass</code> of …\nCalls the <code>use_plugin</code> function from the <code>GTypePluginClass</code> of …\nMark the property as write only and drops the READWRITE …\nMark the property as write only and drops the READWRITE …\nMark the property as write only and drops the READWRITE …\nA type that can be used as a property. It covers every …\nA container type implementing this trait can be read by …\nA container type implementing this trait can be written by …\nA container type implementing this trait can be written by …\nEncapsulates memory management logic for shared types.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nWhether to invoke the other event handlers.\nThe id of a signal that is returned by <code>connect</code>.\nReturns the internal signal handler ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is a <code>Proceed</code> variant.\nReturns <code>true</code> if this is a <code>Stop</code> variant.\nProcess identificator\nThe priority of sources\nThe id of a source that is returned by <code>idle_add</code> and …\nReturns the internal source ID.\nAdds a closure to be called by the main loop the returned …\nAdds a closure to be called by the main loop the returned …\nAdds a closure to be called by the main loop the returned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a closure to be called by the default main loop when …\nAdds a closure to be called by the default main loop when …\nAdds a closure to be called by the default main loop when …\nAdds a closure to be called by the default main loop when …\nAdds a closure to be called by the default main loop when …\nAdds a closure to be called by the default main loop when …\nAdds a closure to be called by the main loop the return …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemoves the source with the given id <code>source_id</code> from the …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the default main loop at …\nAdds a closure to be called by the main loop the returned …\nAdds a closure to be called by the main loop the returned …\nAdds a closure to be called by the main loop the returned …\nAdds a closure to be called by the main loop the returned …\nAdds a closure to be called by the main loop the returned …\nAdds a closure to be called by the default main loop …\nAdds a closure to be called by the default main loop …\nAdds a closure to be called by the default main loop …\nAdds a closure to be called by the default main loop …\nAdds a closure to be called by the main loop the returned …\nReference-counted wrapper around an <code>ObjectSubclass</code> …\nWeak reference to an <code>ObjectSubclass</code> reference.\nThis module contains basic instance and class structs to …\nModule for registering boxed types for Rust types.\nDowngrade to a weak reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new reference-counting wrapper around <code>imp</code>.\nModule that contains all types needed for creating a …\nPrelude that re-exports all important traits from this …\nModule for registering shared types for Rust types.\nModule that contains the basic infrastructure for …\nUpgrade to a strong reference, if possible.\nA basic class struct that does not store any additional …\nA basic instance struct that does not store any additional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllow name conflicts for this boxed type.\nTrait for defining boxed types.\nBoxed type name.\nRegister a boxed <code>glib::Type</code> ID for <code>T</code>.\nAllow name conflicts for this class.\nThe C class struct.\n<code>GObject</code> type name.\nThe central trait for defining a <code>GObject</code> interface.\nType methods required for an <code>ObjectInterface</code> …\nTrait for a type list of prerequisite object types.\nPrerequisites for this interface.\nGet interface from an instance.\nGet interface from an instance.\nInterface initialization.\nProperties installed for this interface.\nRegisters a <code>glib::Type</code> ID for <code>T::Class</code> as a dynamic type.\nRegister a <code>glib::Type</code> ID for <code>T::Class</code>.\nSignals installed for this interface.\nReturns the <code>glib::Type</code> ID of the interface.\nAdditional type initialization.\nReturns the list of types for this list.\nTrait containing only the property related functions of …\nExtension trait for <code>glib::Object</code>’s class struct.\nTrait for implementors of <code>glib::Object</code> subclasses.\nConstructed.\nProperties installed for this type.\nSimilar to <code>ObjectImpl</code> but auto-generated by the <code>Properties</code> …\nSimilar to <code>ObjectImpl</code> but auto-generated by the <code>Properties</code> …\nemits property change notification for a bunch of …\nDisposes of the object.\nFunction to be called when property change is notified for …\nChain up to the parent class’ implementation of …\nChain up to the parent class’ implementation of …\nChain up to the parent class’ implementation of …\nProperties installed for this type.\nProperty getter.\nProperty setter.\nChain up to parent class signal handler.\nSignals installed for this type.\nAllow name conflicts for this boxed type.\nThe inner type\nShared type name.\nThe inner refcounted type\nTrait for defining shared types.\nProvides access to a raw pointer to InnerType\nConverts a raw pointer to InnerType to a RefCounted object\nConstructs a SharedType from a RefCountedType\nConverts the RefCounted object to a raw pointer to …\nConverts the SharedType into its inner RefCountedType\nThe function used to increment the inner type refcount\nRegister a boxed <code>glib::Type</code> ID for <code>T</code>.\nSignal metadata.\nBuilder for signals.\nToken passed to signal class handlers.\nSignal ID.\nSignal invocation hint passed to signal accumulators.\nIn-depth information of a specific signal\nAccumulator for the return values of the signal.\nAction signals are signals that may freely be emitted on …\nBuild the signal.\nCreate a new builder for a signal.\nClass handler for this signal.\nThe signal is deprecated and will be removed in a future …\nThis signal supports “::detail” appendices to the …\nExplicitly set all flags.\nFlags of the signal.\nThe signal flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind a SignalId by its <code>name</code>, and the <code>type</code> it connects to.\nVarargs signal emission will always collect the arguments, …\nThe number of parameters the user callback takes.\nName of the signal.\nFind the signal name.\nCreate a new Signal Identifier.\nNo emissions hooks are supported for this signal.\nSignals being emitted for an object while currently being …\nThe signal’s parameters.\nParameter types of the signal.\nThe parameters for the user callback.\nQueries more in-depth information about the current signal.\nThe signal’s returned value type.\nReturn type of the signal.\nThe return type for the user callback.\nThe signal’s returned value type.\nRun the signal class handler in the last emission stage.\nRun the signal class handler in the first emission stage.\nRun the signal class handler in the third emission stage.\nSignal ID.\nThe ID of the signal.\nThe name of the signal.\nType this signal was registered for.\nThe instance type this signal can be emitted for.\nLoads the module, registers one or more object subclasses …\nUnloads the module (see <code>TypeModuleExt::unuse</code>).\nIf this subclass is an abstract class or not.\nAllow name conflicts for this class.\nThe C class struct.\nTrait implemented by structs that implement a <code>GObject</code> C …\nHelper trait for macros to access a subclass or its …\nAn object that is currently being initialized.\nA newly registered <code>glib::Type</code> that is currently still …\nThe C instance struct.\nTrait implemented by structs that implement a <code>GObject</code> C …\nTrait implemented by any type implementing <code>InstanceStruct</code> …\nTrait for a type list of interfaces.\nTrait implemented by structs that implement a …\nList of interfaces implemented by this type.\nTrait for implementable interfaces.\nTrait for subclassable class structs.\n<code>GObject</code> type name.\nThe central trait for subclassing a <code>GObject</code> type.\nExtension methods for all <code>ObjectSubclass</code> impls.\nTrait implemented by any type implementing <code>ObjectSubclassIs</code>…\nType methods required for an <code>ObjectSubclass</code> implementation.\nParent Rust type to inherit from.\nCorresponding object subclass type for this instance …\nCorresponding object subclass type for this class struct.\nCorresponding object interface type for this class struct.\nWrapper around this subclass defined with <code>wrapper!</code>\nType-specific data that is filled in during type creation.\nReturns a pointer to the object.\nReturns a reference to the object.\nReturns the class struct for this specific instance.\nReturns a pointer to the class implementation specific …\nGets a mutable reference of the class implementation …\nOverride the vfuncs of all parent types.\nOverride the virtual methods of this class for the given …\nClass initialization.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the implementation from an instance.\nReturns the implementation from an instance.\nReturns the list of types and corresponding interface …\nReturns the implementation for from this instance struct, …\nReturns the implementation (the private Rust struct) of …\nReturns the offset of the private implementation struct in …\nReturns the corresponding object instance.\nReturns a pointer to the instance implementation specific …\nRuns <code>instance_init</code> on each of the <code>IsImplementable</code> items.\nInstance specific initialization.\nInstance specific initialization.\nInstance specific initialization.\nPerforms additional instance initialization.\nSet up default implementations for interface vfuncs.\nOverride the virtual methods of this interface for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor.\nReturns the corresponding object instance.\nReturns a pointer to the native parent class.\nReturns a pointer to the native parent interface struct …\nReturns a new reference-counted wrapper around <code>self</code>.\nRegisters a <code>glib::Type</code> ID for <code>T</code> as a dynamic type.\nRegister a <code>glib::Type</code> ID for <code>T</code>.\nSets class specific implementation data.\nSets instance specific implementation data.\nReturns the <code>glib::Type</code> ID of the subclass.\nReturns the type ID.\nStorage for the type-specific data used during …\nAdditional type initialization.\nConstructor.\nThread guard that only gives access to the contained value …\nReturns the argument unchanged.\nReturn a mutable reference to the contained value from the …\nReturn a reference to the contained value from the thread …\nCalls <code>U::from(self)</code>.\nReturn the contained value from the thread guard.\nReturns <code>true</code> if the current thread owns the value, i.e. it …\nCreate a new thread guard around <code>value</code>.\nReturns a unique ID for the current thread.\nWrapper around values representing borrowed C memory.\nTranslate a simple type.\nTranslate from a container.\nTranslate from a pointer type by borrowing, without …\nTranslate from a container of pointers.\nTranslate from a pointer type which is annotated with …\nTranslate from a pointer type which is annotated with …\nError type for <code>TryFromGlib</code> when the Glib value is None.\nError type for <code>TryFromGlib</code> when the Glib value can be None …\nProvides the default pointer type to be used in some …\nA trait to accept both &amp;str or &amp;GStr as an argument.\nTranslate a simple type.\nTranslate to a pointer.\nA trait to accept both Option&lt;&amp;str&gt; or Option&lt;&amp;GStr&gt; as an …\nA Rust type <code>T</code> for which <code>Option&lt;T&gt;</code> translates to the same …\nA pointer\nHelper type that stores temporary values used for …\nTranslate to a pointer.\nTranslate to a pointer with a mutable borrow.\nTrait for types that have the same memory representation …\nTrait for types that have the same memory representation …\nTranslate from a Glib type which can result in an …\nA trait for creating an uninitialized value. Handy for …\nUnsafe variant of the <code>From</code> trait.\nOverrides pointer constness.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTranslate a simple type.\nTranslate from a pointer type, borrowing the pointer.\nSafety\nTransfer: container.\nTransfer: container.\nTranslate from a pointer type, transfer: full (assume …\nSafety\nTransfer: full.\nTransfer: full.\nTranslate from a pointer type, transfer: none.\nSafety\nTransfer: none.\nTransfer: none.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransfer: full.\nExtracts the contained value.\nReturns <code>true</code> if <code>self</code> is the <code>Invalid</code> variant.\nReturns <code>true</code> if <code>self</code> is the <code>None</code> variant.\nOverrides pointer mutability.\nCreates a new borrowed value.\nBuilds the <code>None</code> variant.\nTransfer: container.\nTransfer: full.\nTransfer: none.\nTransfer: none.\nTranslate from a Glib type which can result in an …\nReturns an uninitialized value.\nSafety\nThe fundamental type corresponding to <code>bool</code>\nThe fundamental type from which all boxed types are derived\nThe fundamental type from which all enumeration types are …\nThe fundamental type corresponding to <code>f32</code>\nThe fundamental type corresponding to <code>f64</code>\nThe fundamental type from which all flags types are derived\nThe fundamental type corresponding to <code>i32</code>\nThe fundamental type corresponding to <code>i64</code>\nThe fundamental type corresponding to <code>i8</code>\nThe fundamental type from which all interfaces are derived\nAn invalid <code>Type</code> used as error return value in some …\nThe fundamental type corresponding to C <code>long</code>\nThe fundamental type from which all objects are derived\nThe fundamental type from which all <code>GParamSpec</code> types are …\nThe fundamental type corresponding to a pointer\nThe target of a Pointer\nA GLib pointer\nThe fundamental type corresponding to <code>String</code>\nTypes that are supported by GLib dynamic typing.\nA GLib or GLib-based library type\nThe fundamental type corresponding to <code>u32</code>\nThe fundamental type corresponding to <code>u64</code>\nThe fundamental type corresponding to <code>u8</code>\nThe fundamental type corresponding to the unit type <code>()</code>\nThe fundamental type corresponding to C <code>unsigned long</code>\nThe fundamental type of GVariant\nEnsures that the type has been registered with the type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that the type is not <code>INVALID</code>\nReturns the type identifier of <code>Self</code>.\nA <code>Value</code> containing another <code>Value</code>.\nValue type checker.\nTrait to retrieve the contained value from a <code>Value</code>.\nTrait for types that implement <code>FromValue</code> and are Optional.\nGeneric <code>Value</code> type checker for types.\nGeneric <code>Value</code> type checker for optional types.\nAn error returned from the <code>get</code> function on a <code>Value</code> for …\nA version of <code>Value</code> for storing <code>Send</code> types, that implements …\nConverts to <code>SendValue</code>.\nTrait to convert a value to a <code>Value</code>.\nTrait to convert an <code>Option</code> to a <code>Value</code> for optional types.\nType to get the <code>Type</code> from.\nA generic value capable of carrying various types.\nA type that can be stored in <code>Value</code>s.\nTrait for <code>Value</code> type checkers.\nAn error returned from the <code>get</code> function on a <code>Value</code> for …\nAn error returned from the <code>get</code> function on a <code>Value</code> for …\nA type that can be stored in <code>Value</code>s and is optional.\nWrapped <code>Value</code> type checker for optional types.\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCreates a new <code>Value</code> that is initialized for a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nCreates a new <code>String</code>-typed <code>Value</code> from a <code>&#39;static</code> string …\nCreates a new <code>String</code>-typed <code>Value</code> from a <code>&#39;static</code> string.\nCreates a new <code>Value</code> that is initialized with <code>type_</code>.\nCreates a new <code>Value</code> that is initialized with <code>type_</code>.\nGet the contained value from a <code>Value</code>.\nTries to get a value of type <code>T</code>.\nTries to get a value of an owned type <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>Value</code> and returns the corresponding <code>GValue</code>.\nConsumes <code>SendValue</code> and returns the corresponding <code>GValue</code>.\nConverts a <code>Value</code> into a <code>SendValue</code>.\nReturns <code>true</code> if the type of the value corresponds to <code>T</code> or …\nReturns <code>true</code> if the type of the value corresponds to <code>type_</code> …\nReturns a <code>SendValue</code> clone of <code>self</code>.\nConvert a value to a <code>Value</code>.\nConvert an <code>Option</code> to a <code>Value</code>.\nTries to transform the value into a value of the target …\nTries to transform the value into a value of the target …\nConverts a <code>Value</code> into a <code>SendValue</code>. This fails if <code>self</code> does …\nReturns the type of the value.\nReturns whether <code>Value</code>s of type <code>src</code> can be transformed to …\nReturns the type identifier of <code>self</code>.\nA Dictionary entry.\nWrapper type for fixed size type arrays.\nTrait for fixed size variant types.\nExtracts a value.\nA wrapper type around <code>Variant</code> handles.\nA wrapper type around <code>Variant</code> object paths.\nA wrapper type around <code>Variant</code> signatures.\nReturns <code>VariantType</code> of <code>Self</code>.\nConverts to <code>Variant</code>.\nA generic immutable value capable of carrying various …\nAn error returned from the <code>try_get</code> function on a <code>Variant</code> …\nCreates a new Variant array from a fixed array.\nCreates a new Variant array from children.\nCreates a new Variant array from children with the …\nCreate an iterator over borrowed strings from a GVariant …\nExtract the value of a maybe Variant.\nReturn the inner pointer to the underlying C value.\nUnboxes self.\nReturns a copy of the variant in the opposite endianness. …\nRead a child item out of a container <code>Variant</code> instance.\nReads a child item out of a container <code>Variant</code> instance.\nReturns the classification of the variant. Classifies …\nMakes a clone of this shared reference.\nReturns the serialized form of a GVariant instance. …\nReturns the serialized form of a GVariant instance. …\nTries to extract a <code>&amp;[T]</code> from a variant of array type with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new serialized-mode GVariant instance. …\nConstructs a new serialized-mode GVariant instance.\nConstructs a new serialized-mode GVariant instance with a …\nConstructs a new serialized-mode GVariant instance with a …\nConstructs a new serialized-mode GVariant instance. …\nConstructs a new serialized-mode GVariant instance.\nConstructs a new serialized-mode GVariant instance with a …\nConstructs a new serialized-mode GVariant instance with a …\nCreates a new dictionary entry Variant.\nBorrows the underlying C value.\nCreates a new maybe Variant.\nCreates a new maybe Variant with Nothing.\nCreates a new maybe Variant from a child.\nTries to extract a value.\nBoxes value.\nTries to extract a value of type <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the type of the value corresponds to <code>T</code>.\nReturn whether this Variant is a container type. Checks if …\nReturn whether this Variant is in normal form. Checks if …\nReturn whether input string is a valid …\nReturn whether input string is a valid …\nReturns <code>true</code> if the type of the value corresponds to <code>type_</code>.\nCreate an iterator over items in the variant.\nDetermines the number of children in a container GVariant …\nReturns a copy of the variant in normal form. Gets a …\nParses a GVariant from the text representation produced by …\nPretty-print the contents of this variant in a …\nReturns the size of serialized form of a GVariant instance.\nReturns the <code>VariantType</code> corresponding to <code>Self</code>.\nStores the serialized form of a GVariant instance into the …\nTries to extract a <code>&amp;str</code>.\nReturns a <code>Variant</code> clone of <code>self</code>.\nTry to read a child item out of a container <code>Variant</code> …\nTry to read a child item out of a container <code>Variant</code> …\nTries to extract a value of type <code>T</code>.\nCreates a new Variant tuple from children.\nReturns the type of the value. Determines the type of …")