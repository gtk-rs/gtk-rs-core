searchState.loadedDescShard("glib", 1, "Trait for a type list of interfaces.\nTrait implemented by structs that implement a …\nList of interfaces implemented by this type.\nTrait for implementable interfaces.\nTrait for subclassable class structs.\n<code>GObject</code> type name.\nThe central trait for subclassing a <code>GObject</code> type.\nExtension methods for all <code>ObjectSubclass</code> impls.\nTrait implemented by any type implementing <code>ObjectSubclassIs</code>…\nType methods required for an <code>ObjectSubclass</code> implementation.\nParent Rust type to inherit from.\nCorresponding object subclass type for this instance …\nCorresponding object subclass type for this class struct.\nCorresponding object interface type for this class struct.\nWrapper around this subclass defined with <code>wrapper!</code>\nType-specific data that is filled in during type creation.\nReturns a pointer to the object.\nReturns a reference to the object.\nReturns the class struct for this specific instance.\nReturns a pointer to the class implementation specific …\nGets a mutable reference of the class implementation …\nOverride the vfuncs of all parent types.\nOverride the virtual methods of this class for the given …\nClass initialization.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the implementation from an instance.\nReturns the list of types and corresponding interface …\nReturns the implementation for from this instance struct, …\nReturns the implementation (the private Rust struct) of …\nReturns the offset of the private implementation struct in …\nReturns a pointer to the instance implementation specific …\nRuns <code>instance_init</code> on each of the <code>IsImplementable</code> items.\nInstance specific initialization.\nInstance specific initialization.\nInstance specific initialization.\nPerforms additional instance initialization.\nSet up default implementations for interface vfuncs.\nOverride the virtual methods of this interface for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor.\nReturns the corresponding object instance.\nReturns a pointer to the native parent class.\nReturns a pointer to the native parent interface struct …\nReturns a new reference-counted wrapper around <code>self</code>.\nRegisters a <code>glib::Type</code> ID for <code>T</code> as a dynamic type.\nRegister a <code>glib::Type</code> ID for <code>T</code>.\nSets class specific implementation data.\nSets instance specific implementation data.\nReturns the <code>glib::Type</code> ID of the subclass.\nReturns the type ID.\nStorage for the type-specific data used during …\nAdditional type initialization.\nConstructor.\nThread guard that only gives access to the contained value …\nReturns the argument unchanged.\nReturn a mutable reference to the contained value from the …\nReturn a reference to the contained value from the thread …\nCalls <code>U::from(self)</code>.\nReturn the contained value from the thread guard.\nReturns <code>true</code> if the current thread owns the value, i.e. it …\nCreate a new thread guard around <code>value</code>.\nReturns a unique ID for the current thread.\nWrapper around values representing borrowed C memory.\nTranslate a simple type.\nTranslate from a container.\nTranslate from a pointer type by borrowing, without …\nTranslate from a container of pointers.\nTranslate from a pointer type which is annotated with …\nTranslate from a pointer type which is annotated with …\nError type for <code>TryFromGlib</code> when the Glib value is None.\nError type for <code>TryFromGlib</code> when the Glib value can be None …\nProvides the default pointer type to be used in some …\nA trait to accept both &amp;str or &amp;GStr as an argument.\nTranslate a simple type.\nTranslate to a pointer.\nA trait to accept both Option&lt;&amp;str&gt; or Option&lt;&amp;GStr&gt; as an …\nA Rust type <code>T</code> for which <code>Option&lt;T&gt;</code> translates to the same …\nA pointer\nHelper type that stores temporary values used for …\nTranslate to a pointer.\nTranslate to a pointer with a mutable borrow.\nTrait for types that have the same memory representation …\nTrait for types that have the same memory representation …\nTranslate from a Glib type which can result in an …\nA trait for creating an uninitialized value. Handy for …\nUnsafe variant of the <code>From</code> trait.\nOverrides pointer constness.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTranslate a simple type.\nTranslate from a pointer type, borrowing the pointer.\nSafety\nTransfer: container.\nTransfer: container.\nTranslate from a pointer type, transfer: full (assume …\nSafety\nTransfer: full.\nTransfer: full.\nTranslate from a pointer type, transfer: none.\nSafety\nTransfer: none.\nTransfer: none.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransfer: full.\nExtracts the contained value.\nReturns <code>true</code> if <code>self</code> is the <code>Invalid</code> variant.\nReturns <code>true</code> if <code>self</code> is the <code>None</code> variant.\nOverrides pointer mutability.\nCreates a new borrowed value.\nBuilds the <code>None</code> variant.\nTransfer: container.\nTransfer: full.\nTransfer: none.\nTransfer: none.\nTranslate from a Glib type which can result in an …\nReturns an uninitialized value.\nSafety\nThe fundamental type corresponding to <code>bool</code>\nThe fundamental type from which all boxed types are derived\nThe fundamental type from which all enumeration types are …\nThe fundamental type corresponding to <code>f32</code>\nThe fundamental type corresponding to <code>f64</code>\nThe fundamental type from which all flags types are derived\nThe fundamental type corresponding to <code>i32</code>\nThe fundamental type corresponding to <code>i64</code>\nThe fundamental type corresponding to <code>i8</code>\nThe fundamental type from which all interfaces are derived\nAn invalid <code>Type</code> used as error return value in some …\nThe fundamental type corresponding to C <code>long</code>\nThe fundamental type from which all objects are derived\nThe fundamental type from which all <code>GParamSpec</code> types are …\nThe fundamental type corresponding to a pointer\nThe target of a Pointer\nA GLib pointer\nThe fundamental type corresponding to <code>String</code>\nTypes that are supported by GLib dynamic typing.\nA GLib or GLib-based library type\nThe fundamental type corresponding to <code>u32</code>\nThe fundamental type corresponding to <code>u64</code>\nThe fundamental type corresponding to <code>u8</code>\nThe fundamental type corresponding to the unit type <code>()</code>\nThe fundamental type corresponding to C <code>unsigned long</code>\nThe fundamental type of GVariant\nEnsures that the type has been registered with the type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that the type is not <code>INVALID</code>\nReturns the type identifier of <code>Self</code>.\nA <code>Value</code> containing another <code>Value</code>.\nValue type checker.\nTrait to retrieve the contained value from a <code>Value</code>.\nTrait for types that implement <code>FromValue</code> and are Optional.\nGeneric <code>Value</code> type checker for types.\nGeneric <code>Value</code> type checker for optional types.\nAn error returned from the <code>get</code> function on a <code>Value</code> for …\nA version of <code>Value</code> for storing <code>Send</code> types, that implements …\nConverts to <code>SendValue</code>.\nTrait to convert a value to a <code>Value</code>.\nTrait to convert an <code>Option</code> to a <code>Value</code> for optional types.\nType to get the <code>Type</code> from.\nA generic value capable of carrying various types.\nA type that can be stored in <code>Value</code>s.\nTrait for <code>Value</code> type checkers.\nAn error returned from the <code>get</code> function on a <code>Value</code> for …\nAn error returned from the <code>get</code> function on a <code>Value</code> for …\nA type that can be stored in <code>Value</code>s and is optional.\nWrapped <code>Value</code> type checker for optional types.\nCopies the inline boxed type by value with the …\nCopies the inline boxed type by value with the …\nCreates a new <code>Value</code> that is initialized for a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nCreates a new <code>String</code>-typed <code>Value</code> from a <code>&#39;static</code> string …\nCreates a new <code>String</code>-typed <code>Value</code> from a <code>&#39;static</code> string.\nCreates a new <code>Value</code> that is initialized with <code>type_</code>.\nCreates a new <code>Value</code> that is initialized with <code>type_</code>.\nGet the contained value from a <code>Value</code>.\nTries to get a value of type <code>T</code>.\nTries to get a value of an owned type <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>Value</code> and returns the corresponding <code>GValue</code>.\nConsumes <code>SendValue</code> and returns the corresponding <code>GValue</code>.\nConverts a <code>Value</code> into a <code>SendValue</code>.\nReturns <code>true</code> if the type of the value corresponds to <code>T</code> or …\nReturns <code>true</code> if the type of the value corresponds to <code>type_</code> …\nReturns a <code>SendValue</code> clone of <code>self</code>.\nConvert a value to a <code>Value</code>.\nConvert an <code>Option</code> to a <code>Value</code>.\nTries to transform the value into a value of the target …\nTries to transform the value into a value of the target …\nConverts a <code>Value</code> into a <code>SendValue</code>. This fails if <code>self</code> does …\nReturns the type of the value.\nReturns whether <code>Value</code>s of type <code>src</code> can be transformed to …\nReturns the type identifier of <code>self</code>.\nA Dictionary entry.\nWrapper type for fixed size type arrays.\nTrait for fixed size variant types.\nExtracts a value.\nA wrapper type around <code>Variant</code> handles.\nA wrapper type around <code>Variant</code> object paths.\nA wrapper type around <code>Variant</code> signatures.\nReturns <code>VariantType</code> of <code>Self</code>.\nConverts to <code>Variant</code>.\nA generic immutable value capable of carrying various …\nAn error returned from the <code>try_get</code> function on a <code>Variant</code> …\nCreates a new Variant array from a fixed array.\nCreates a new Variant array from children.\nCreates a new Variant array from children with the …\nCreate an iterator over borrowed strings from a GVariant …\nExtract the value of a maybe Variant.\nReturn the inner pointer to the underlying C value.\nUnboxes self.\nReturns a copy of the variant in the opposite endianness.\nRead a child item out of a container <code>Variant</code> instance.\nReads a child item out of a container <code>Variant</code> instance.\nReturns the classification of the variant.\nMakes a clone of this shared reference.\nReturns the serialized form of a GVariant instance.\nReturns the serialized form of a GVariant instance.\nTries to extract a <code>&amp;[T]</code> from a variant of array type with …\nConsume a given <code>VariantDict</code> and call <code>VariantDict::end</code> on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new serialized-mode GVariant instance.\nConstructs a new serialized-mode GVariant instance.\nConstructs a new serialized-mode GVariant instance with a …\nConstructs a new serialized-mode GVariant instance with a …\nConstructs a new serialized-mode GVariant instance.\nConstructs a new serialized-mode GVariant instance.\nConstructs a new serialized-mode GVariant instance with a …\nConstructs a new serialized-mode GVariant instance with a …\nCreates a new dictionary entry Variant.\nBorrows the underlying C value.\nCreates a new maybe Variant.\nCreates a new maybe Variant with Nothing.\nCreates a new maybe Variant from a child.\nTries to extract a value.\nBoxes value.\nTries to extract a value of type <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the type of the value corresponds to <code>T</code>.\nReturn whether this Variant is a container type.\nReturn whether this Variant is in normal form.\nReturn whether input string is a valid …\nReturn whether input string is a valid …\nReturns <code>true</code> if the type of the value corresponds to <code>type_</code>.\nCreate an iterator over items in the variant.\nDetermines the number of children in a container GVariant …\nReturns a copy of the variant in normal form.\nParses a GVariant from the text representation produced by …\nPretty-print the contents of this variant in a …\nReturns the size of serialized form of a GVariant instance.\nReturns the <code>VariantType</code> corresponding to <code>Self</code>.\nStores the serialized form of a GVariant instance into the …\nTries to extract a <code>&amp;str</code>.\nReturns a <code>Variant</code> clone of <code>self</code>.\nTry to read a child item out of a container <code>Variant</code> …\nTry to read a child item out of a container <code>Variant</code> …\nTries to extract a value of type <code>T</code>.\nCreates a new Variant tuple from children.\nReturns the type of the value.")