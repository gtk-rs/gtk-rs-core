searchState.loadedDescShard("glib", 1, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>Value</code> and returns the corresponding <code>GValue</code>.\nConsumes <code>SendValue</code> and returns the corresponding <code>GValue</code>.\nConverts a <code>Value</code> into a <code>SendValue</code>.\nReturns <code>true</code> if the type of the value corresponds to <code>T</code> or …\nReturns <code>true</code> if the type of the value corresponds to <code>type_</code> …\nReturns a <code>SendValue</code> clone of <code>self</code>.\nConvert a value to a <code>Value</code>.\nConvert an <code>Option</code> to a <code>Value</code>.\nTries to transform the value into a value of the target …\nTries to transform the value into a value of the target …\nConverts a <code>Value</code> into a <code>SendValue</code>. This fails if <code>self</code> does …\nReturns the type of the value.\nReturns whether <code>Value</code>s of type <code>src</code> can be transformed to …\nReturns the type identifier of <code>self</code>.\nA Dictionary entry.\nWrapper type for fixed size type arrays.\nTrait for fixed size variant types.\nExtracts a value.\nA wrapper type around <code>Variant</code> handles.\nA wrapper type around <code>Variant</code> object paths.\nA wrapper type around <code>Variant</code> signatures.\nReturns <code>VariantType</code> of <code>Self</code>.\nConverts to <code>Variant</code>.\nA generic immutable value capable of carrying various …\nAn error returned from the <code>try_get</code> function on a <code>Variant</code> …\nCreates a new Variant array from a fixed array.\nCreates a new Variant array from children.\nCreates a new Variant array from children with the …\nCreate an iterator over borrowed strings from a GVariant …\nExtract the value of a maybe Variant.\nReturn the inner pointer to the underlying C value.\nUnboxes self.\nReturns a copy of the variant in the opposite endianness. …\nRead a child item out of a container <code>Variant</code> instance.\nReads a child item out of a container <code>Variant</code> instance.\nReturns the classification of the variant. Classifies …\nMakes a clone of this shared reference.\nReturns the serialized form of a GVariant instance. …\nReturns the serialized form of a GVariant instance. …\nTries to extract a <code>&amp;[T]</code> from a variant of array type with …\nConsume a given <code>VariantDict</code> and call <code>VariantDict::end</code> on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new serialized-mode GVariant instance. …\nConstructs a new serialized-mode GVariant instance.\nConstructs a new serialized-mode GVariant instance with a …\nConstructs a new serialized-mode GVariant instance with a …\nConstructs a new serialized-mode GVariant instance. …\nConstructs a new serialized-mode GVariant instance.\nConstructs a new serialized-mode GVariant instance with a …\nConstructs a new serialized-mode GVariant instance with a …\nCreates a new dictionary entry Variant.\nBorrows the underlying C value.\nCreates a new maybe Variant.\nCreates a new maybe Variant with Nothing.\nCreates a new maybe Variant from a child.\nTries to extract a value.\nBoxes value.\nTries to extract a value of type <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the type of the value corresponds to <code>T</code>.\nReturn whether this Variant is a container type. Checks if …\nReturn whether this Variant is in normal form. Checks if …\nReturn whether input string is a valid …\nReturn whether input string is a valid …\nReturns <code>true</code> if the type of the value corresponds to <code>type_</code>.\nCreate an iterator over items in the variant.\nDetermines the number of children in a container GVariant …\nReturns a copy of the variant in normal form. Gets a …\nParses a GVariant from the text representation produced by …\nPretty-print the contents of this variant in a …\nReturns the size of serialized form of a GVariant instance.\nReturns the <code>VariantType</code> corresponding to <code>Self</code>.\nStores the serialized form of a GVariant instance into the …\nTries to extract a <code>&amp;str</code>.\nReturns a <code>Variant</code> clone of <code>self</code>.\nTry to read a child item out of a container <code>Variant</code> …\nTry to read a child item out of a container <code>Variant</code> …\nTries to extract a value of type <code>T</code>.\nCreates a new Variant tuple from children.\nReturns the type of the value. Determines the type of …")