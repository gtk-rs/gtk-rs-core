// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Language;
use crate::Matrix;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoAlignment")]
pub enum Alignment {
    #[doc(alias = "PANGO_ALIGN_LEFT")]
    Left,
    #[doc(alias = "PANGO_ALIGN_CENTER")]
    Center,
    #[doc(alias = "PANGO_ALIGN_RIGHT")]
    Right,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Alignment {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Alignment::{}",
            match *self {
                Alignment::Left => "Left",
                Alignment::Center => "Center",
                Alignment::Right => "Right",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Alignment {
    type GlibType = ffi::PangoAlignment;

    fn into_glib(self) -> ffi::PangoAlignment {
        match self {
            Alignment::Left => ffi::PANGO_ALIGN_LEFT,
            Alignment::Center => ffi::PANGO_ALIGN_CENTER,
            Alignment::Right => ffi::PANGO_ALIGN_RIGHT,
            Alignment::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoAlignment> for Alignment {
    unsafe fn from_glib(value: ffi::PangoAlignment) -> Self {
        match value {
            0 => Alignment::Left,
            1 => Alignment::Center,
            2 => Alignment::Right,
            value => Alignment::__Unknown(value),
        }
    }
}

impl StaticType for Alignment {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_alignment_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Alignment {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Alignment {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Alignment {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoAttrType")]
pub enum AttrType {
    #[doc(alias = "PANGO_ATTR_INVALID")]
    Invalid,
    #[doc(alias = "PANGO_ATTR_LANGUAGE")]
    Language,
    #[doc(alias = "PANGO_ATTR_FAMILY")]
    Family,
    #[doc(alias = "PANGO_ATTR_STYLE")]
    Style,
    #[doc(alias = "PANGO_ATTR_WEIGHT")]
    Weight,
    #[doc(alias = "PANGO_ATTR_VARIANT")]
    Variant,
    #[doc(alias = "PANGO_ATTR_STRETCH")]
    Stretch,
    #[doc(alias = "PANGO_ATTR_SIZE")]
    Size,
    #[doc(alias = "PANGO_ATTR_FONT_DESC")]
    FontDesc,
    #[doc(alias = "PANGO_ATTR_FOREGROUND")]
    Foreground,
    #[doc(alias = "PANGO_ATTR_BACKGROUND")]
    Background,
    #[doc(alias = "PANGO_ATTR_UNDERLINE")]
    Underline,
    #[doc(alias = "PANGO_ATTR_STRIKETHROUGH")]
    Strikethrough,
    #[doc(alias = "PANGO_ATTR_RISE")]
    Rise,
    #[doc(alias = "PANGO_ATTR_SHAPE")]
    Shape,
    #[doc(alias = "PANGO_ATTR_SCALE")]
    Scale,
    #[doc(alias = "PANGO_ATTR_FALLBACK")]
    Fallback,
    #[doc(alias = "PANGO_ATTR_LETTER_SPACING")]
    LetterSpacing,
    #[doc(alias = "PANGO_ATTR_UNDERLINE_COLOR")]
    UnderlineColor,
    #[doc(alias = "PANGO_ATTR_STRIKETHROUGH_COLOR")]
    StrikethroughColor,
    #[doc(alias = "PANGO_ATTR_ABSOLUTE_SIZE")]
    AbsoluteSize,
    #[doc(alias = "PANGO_ATTR_GRAVITY")]
    Gravity,
    #[doc(alias = "PANGO_ATTR_GRAVITY_HINT")]
    GravityHint,
    #[doc(alias = "PANGO_ATTR_FONT_FEATURES")]
    FontFeatures,
    #[doc(alias = "PANGO_ATTR_FOREGROUND_ALPHA")]
    ForegroundAlpha,
    #[doc(alias = "PANGO_ATTR_BACKGROUND_ALPHA")]
    BackgroundAlpha,
    #[doc(alias = "PANGO_ATTR_ALLOW_BREAKS")]
    AllowBreaks,
    #[doc(alias = "PANGO_ATTR_SHOW")]
    Show,
    #[doc(alias = "PANGO_ATTR_INSERT_HYPHENS")]
    InsertHyphens,
    #[doc(alias = "PANGO_ATTR_OVERLINE")]
    Overline,
    #[doc(alias = "PANGO_ATTR_OVERLINE_COLOR")]
    OverlineColor,
    #[doc(hidden)]
    __Unknown(i32),
}

impl AttrType {
    #[doc(alias = "pango_attr_type_get_name")]
    pub fn get_name(self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::pango_attr_type_get_name(self.into_glib())) }
    }
}

impl fmt::Display for AttrType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "AttrType::{}",
            match *self {
                AttrType::Invalid => "Invalid",
                AttrType::Language => "Language",
                AttrType::Family => "Family",
                AttrType::Style => "Style",
                AttrType::Weight => "Weight",
                AttrType::Variant => "Variant",
                AttrType::Stretch => "Stretch",
                AttrType::Size => "Size",
                AttrType::FontDesc => "FontDesc",
                AttrType::Foreground => "Foreground",
                AttrType::Background => "Background",
                AttrType::Underline => "Underline",
                AttrType::Strikethrough => "Strikethrough",
                AttrType::Rise => "Rise",
                AttrType::Shape => "Shape",
                AttrType::Scale => "Scale",
                AttrType::Fallback => "Fallback",
                AttrType::LetterSpacing => "LetterSpacing",
                AttrType::UnderlineColor => "UnderlineColor",
                AttrType::StrikethroughColor => "StrikethroughColor",
                AttrType::AbsoluteSize => "AbsoluteSize",
                AttrType::Gravity => "Gravity",
                AttrType::GravityHint => "GravityHint",
                AttrType::FontFeatures => "FontFeatures",
                AttrType::ForegroundAlpha => "ForegroundAlpha",
                AttrType::BackgroundAlpha => "BackgroundAlpha",
                AttrType::AllowBreaks => "AllowBreaks",
                AttrType::Show => "Show",
                AttrType::InsertHyphens => "InsertHyphens",
                AttrType::Overline => "Overline",
                AttrType::OverlineColor => "OverlineColor",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for AttrType {
    type GlibType = ffi::PangoAttrType;

    fn into_glib(self) -> ffi::PangoAttrType {
        match self {
            AttrType::Invalid => ffi::PANGO_ATTR_INVALID,
            AttrType::Language => ffi::PANGO_ATTR_LANGUAGE,
            AttrType::Family => ffi::PANGO_ATTR_FAMILY,
            AttrType::Style => ffi::PANGO_ATTR_STYLE,
            AttrType::Weight => ffi::PANGO_ATTR_WEIGHT,
            AttrType::Variant => ffi::PANGO_ATTR_VARIANT,
            AttrType::Stretch => ffi::PANGO_ATTR_STRETCH,
            AttrType::Size => ffi::PANGO_ATTR_SIZE,
            AttrType::FontDesc => ffi::PANGO_ATTR_FONT_DESC,
            AttrType::Foreground => ffi::PANGO_ATTR_FOREGROUND,
            AttrType::Background => ffi::PANGO_ATTR_BACKGROUND,
            AttrType::Underline => ffi::PANGO_ATTR_UNDERLINE,
            AttrType::Strikethrough => ffi::PANGO_ATTR_STRIKETHROUGH,
            AttrType::Rise => ffi::PANGO_ATTR_RISE,
            AttrType::Shape => ffi::PANGO_ATTR_SHAPE,
            AttrType::Scale => ffi::PANGO_ATTR_SCALE,
            AttrType::Fallback => ffi::PANGO_ATTR_FALLBACK,
            AttrType::LetterSpacing => ffi::PANGO_ATTR_LETTER_SPACING,
            AttrType::UnderlineColor => ffi::PANGO_ATTR_UNDERLINE_COLOR,
            AttrType::StrikethroughColor => ffi::PANGO_ATTR_STRIKETHROUGH_COLOR,
            AttrType::AbsoluteSize => ffi::PANGO_ATTR_ABSOLUTE_SIZE,
            AttrType::Gravity => ffi::PANGO_ATTR_GRAVITY,
            AttrType::GravityHint => ffi::PANGO_ATTR_GRAVITY_HINT,
            AttrType::FontFeatures => ffi::PANGO_ATTR_FONT_FEATURES,
            AttrType::ForegroundAlpha => ffi::PANGO_ATTR_FOREGROUND_ALPHA,
            AttrType::BackgroundAlpha => ffi::PANGO_ATTR_BACKGROUND_ALPHA,
            AttrType::AllowBreaks => ffi::PANGO_ATTR_ALLOW_BREAKS,
            AttrType::Show => ffi::PANGO_ATTR_SHOW,
            AttrType::InsertHyphens => ffi::PANGO_ATTR_INSERT_HYPHENS,
            AttrType::Overline => ffi::PANGO_ATTR_OVERLINE,
            AttrType::OverlineColor => ffi::PANGO_ATTR_OVERLINE_COLOR,
            AttrType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoAttrType> for AttrType {
    unsafe fn from_glib(value: ffi::PangoAttrType) -> Self {
        match value {
            0 => AttrType::Invalid,
            1 => AttrType::Language,
            2 => AttrType::Family,
            3 => AttrType::Style,
            4 => AttrType::Weight,
            5 => AttrType::Variant,
            6 => AttrType::Stretch,
            7 => AttrType::Size,
            8 => AttrType::FontDesc,
            9 => AttrType::Foreground,
            10 => AttrType::Background,
            11 => AttrType::Underline,
            12 => AttrType::Strikethrough,
            13 => AttrType::Rise,
            14 => AttrType::Shape,
            15 => AttrType::Scale,
            16 => AttrType::Fallback,
            17 => AttrType::LetterSpacing,
            18 => AttrType::UnderlineColor,
            19 => AttrType::StrikethroughColor,
            20 => AttrType::AbsoluteSize,
            21 => AttrType::Gravity,
            22 => AttrType::GravityHint,
            23 => AttrType::FontFeatures,
            24 => AttrType::ForegroundAlpha,
            25 => AttrType::BackgroundAlpha,
            26 => AttrType::AllowBreaks,
            27 => AttrType::Show,
            28 => AttrType::InsertHyphens,
            29 => AttrType::Overline,
            30 => AttrType::OverlineColor,
            value => AttrType::__Unknown(value),
        }
    }
}

impl StaticType for AttrType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_attr_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for AttrType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for AttrType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for AttrType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[cfg_attr(feature = "v1_44", deprecated)]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoBidiType")]
pub enum BidiType {
    #[doc(alias = "PANGO_BIDI_TYPE_L")]
    L,
    #[doc(alias = "PANGO_BIDI_TYPE_LRE")]
    Lre,
    #[doc(alias = "PANGO_BIDI_TYPE_LRO")]
    Lro,
    #[doc(alias = "PANGO_BIDI_TYPE_R")]
    R,
    #[doc(alias = "PANGO_BIDI_TYPE_AL")]
    Al,
    #[doc(alias = "PANGO_BIDI_TYPE_RLE")]
    Rle,
    #[doc(alias = "PANGO_BIDI_TYPE_RLO")]
    Rlo,
    #[doc(alias = "PANGO_BIDI_TYPE_PDF")]
    Pdf,
    #[doc(alias = "PANGO_BIDI_TYPE_EN")]
    En,
    #[doc(alias = "PANGO_BIDI_TYPE_ES")]
    Es,
    #[doc(alias = "PANGO_BIDI_TYPE_ET")]
    Et,
    #[doc(alias = "PANGO_BIDI_TYPE_AN")]
    An,
    #[doc(alias = "PANGO_BIDI_TYPE_CS")]
    Cs,
    #[doc(alias = "PANGO_BIDI_TYPE_NSM")]
    Nsm,
    #[doc(alias = "PANGO_BIDI_TYPE_BN")]
    Bn,
    #[doc(alias = "PANGO_BIDI_TYPE_B")]
    B,
    #[doc(alias = "PANGO_BIDI_TYPE_S")]
    S,
    #[doc(alias = "PANGO_BIDI_TYPE_WS")]
    Ws,
    #[doc(alias = "PANGO_BIDI_TYPE_ON")]
    On,
    #[doc(hidden)]
    __Unknown(i32),
}

impl BidiType {
    #[doc(alias = "pango_bidi_type_for_unichar")]
    pub fn for_unichar(ch: char) -> BidiType {
        unsafe { from_glib(ffi::pango_bidi_type_for_unichar(ch.into_glib())) }
    }
}

impl fmt::Display for BidiType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "BidiType::{}",
            match *self {
                BidiType::L => "L",
                BidiType::Lre => "Lre",
                BidiType::Lro => "Lro",
                BidiType::R => "R",
                BidiType::Al => "Al",
                BidiType::Rle => "Rle",
                BidiType::Rlo => "Rlo",
                BidiType::Pdf => "Pdf",
                BidiType::En => "En",
                BidiType::Es => "Es",
                BidiType::Et => "Et",
                BidiType::An => "An",
                BidiType::Cs => "Cs",
                BidiType::Nsm => "Nsm",
                BidiType::Bn => "Bn",
                BidiType::B => "B",
                BidiType::S => "S",
                BidiType::Ws => "Ws",
                BidiType::On => "On",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for BidiType {
    type GlibType = ffi::PangoBidiType;

    fn into_glib(self) -> ffi::PangoBidiType {
        match self {
            BidiType::L => ffi::PANGO_BIDI_TYPE_L,
            BidiType::Lre => ffi::PANGO_BIDI_TYPE_LRE,
            BidiType::Lro => ffi::PANGO_BIDI_TYPE_LRO,
            BidiType::R => ffi::PANGO_BIDI_TYPE_R,
            BidiType::Al => ffi::PANGO_BIDI_TYPE_AL,
            BidiType::Rle => ffi::PANGO_BIDI_TYPE_RLE,
            BidiType::Rlo => ffi::PANGO_BIDI_TYPE_RLO,
            BidiType::Pdf => ffi::PANGO_BIDI_TYPE_PDF,
            BidiType::En => ffi::PANGO_BIDI_TYPE_EN,
            BidiType::Es => ffi::PANGO_BIDI_TYPE_ES,
            BidiType::Et => ffi::PANGO_BIDI_TYPE_ET,
            BidiType::An => ffi::PANGO_BIDI_TYPE_AN,
            BidiType::Cs => ffi::PANGO_BIDI_TYPE_CS,
            BidiType::Nsm => ffi::PANGO_BIDI_TYPE_NSM,
            BidiType::Bn => ffi::PANGO_BIDI_TYPE_BN,
            BidiType::B => ffi::PANGO_BIDI_TYPE_B,
            BidiType::S => ffi::PANGO_BIDI_TYPE_S,
            BidiType::Ws => ffi::PANGO_BIDI_TYPE_WS,
            BidiType::On => ffi::PANGO_BIDI_TYPE_ON,
            BidiType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoBidiType> for BidiType {
    unsafe fn from_glib(value: ffi::PangoBidiType) -> Self {
        match value {
            0 => BidiType::L,
            1 => BidiType::Lre,
            2 => BidiType::Lro,
            3 => BidiType::R,
            4 => BidiType::Al,
            5 => BidiType::Rle,
            6 => BidiType::Rlo,
            7 => BidiType::Pdf,
            8 => BidiType::En,
            9 => BidiType::Es,
            10 => BidiType::Et,
            11 => BidiType::An,
            12 => BidiType::Cs,
            13 => BidiType::Nsm,
            14 => BidiType::Bn,
            15 => BidiType::B,
            16 => BidiType::S,
            17 => BidiType::Ws,
            18 => BidiType::On,
            value => BidiType::__Unknown(value),
        }
    }
}

impl StaticType for BidiType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_bidi_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for BidiType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for BidiType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for BidiType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoCoverageLevel")]
pub enum CoverageLevel {
    #[doc(alias = "PANGO_COVERAGE_NONE")]
    None,
    #[doc(alias = "PANGO_COVERAGE_FALLBACK")]
    Fallback,
    #[doc(alias = "PANGO_COVERAGE_APPROXIMATE")]
    Approximate,
    #[doc(alias = "PANGO_COVERAGE_EXACT")]
    Exact,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CoverageLevel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "CoverageLevel::{}",
            match *self {
                CoverageLevel::None => "None",
                CoverageLevel::Fallback => "Fallback",
                CoverageLevel::Approximate => "Approximate",
                CoverageLevel::Exact => "Exact",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for CoverageLevel {
    type GlibType = ffi::PangoCoverageLevel;

    fn into_glib(self) -> ffi::PangoCoverageLevel {
        match self {
            CoverageLevel::None => ffi::PANGO_COVERAGE_NONE,
            CoverageLevel::Fallback => ffi::PANGO_COVERAGE_FALLBACK,
            CoverageLevel::Approximate => ffi::PANGO_COVERAGE_APPROXIMATE,
            CoverageLevel::Exact => ffi::PANGO_COVERAGE_EXACT,
            CoverageLevel::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoCoverageLevel> for CoverageLevel {
    unsafe fn from_glib(value: ffi::PangoCoverageLevel) -> Self {
        match value {
            0 => CoverageLevel::None,
            1 => CoverageLevel::Fallback,
            2 => CoverageLevel::Approximate,
            3 => CoverageLevel::Exact,
            value => CoverageLevel::__Unknown(value),
        }
    }
}

impl StaticType for CoverageLevel {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_coverage_level_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for CoverageLevel {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for CoverageLevel {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for CoverageLevel {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoDirection")]
pub enum Direction {
    #[doc(alias = "PANGO_DIRECTION_LTR")]
    Ltr,
    #[doc(alias = "PANGO_DIRECTION_RTL")]
    Rtl,
    #[doc(alias = "PANGO_DIRECTION_TTB_LTR")]
    TtbLtr,
    #[doc(alias = "PANGO_DIRECTION_TTB_RTL")]
    TtbRtl,
    #[doc(alias = "PANGO_DIRECTION_WEAK_LTR")]
    WeakLtr,
    #[doc(alias = "PANGO_DIRECTION_WEAK_RTL")]
    WeakRtl,
    #[doc(alias = "PANGO_DIRECTION_NEUTRAL")]
    Neutral,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Direction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Direction::{}",
            match *self {
                Direction::Ltr => "Ltr",
                Direction::Rtl => "Rtl",
                Direction::TtbLtr => "TtbLtr",
                Direction::TtbRtl => "TtbRtl",
                Direction::WeakLtr => "WeakLtr",
                Direction::WeakRtl => "WeakRtl",
                Direction::Neutral => "Neutral",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Direction {
    type GlibType = ffi::PangoDirection;

    fn into_glib(self) -> ffi::PangoDirection {
        match self {
            Direction::Ltr => ffi::PANGO_DIRECTION_LTR,
            Direction::Rtl => ffi::PANGO_DIRECTION_RTL,
            Direction::TtbLtr => ffi::PANGO_DIRECTION_TTB_LTR,
            Direction::TtbRtl => ffi::PANGO_DIRECTION_TTB_RTL,
            Direction::WeakLtr => ffi::PANGO_DIRECTION_WEAK_LTR,
            Direction::WeakRtl => ffi::PANGO_DIRECTION_WEAK_RTL,
            Direction::Neutral => ffi::PANGO_DIRECTION_NEUTRAL,
            Direction::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoDirection> for Direction {
    unsafe fn from_glib(value: ffi::PangoDirection) -> Self {
        match value {
            0 => Direction::Ltr,
            1 => Direction::Rtl,
            2 => Direction::TtbLtr,
            3 => Direction::TtbRtl,
            4 => Direction::WeakLtr,
            5 => Direction::WeakRtl,
            6 => Direction::Neutral,
            value => Direction::__Unknown(value),
        }
    }
}

impl StaticType for Direction {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_direction_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Direction {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Direction {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Direction {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoEllipsizeMode")]
pub enum EllipsizeMode {
    #[doc(alias = "PANGO_ELLIPSIZE_NONE")]
    None,
    #[doc(alias = "PANGO_ELLIPSIZE_START")]
    Start,
    #[doc(alias = "PANGO_ELLIPSIZE_MIDDLE")]
    Middle,
    #[doc(alias = "PANGO_ELLIPSIZE_END")]
    End,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EllipsizeMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EllipsizeMode::{}",
            match *self {
                EllipsizeMode::None => "None",
                EllipsizeMode::Start => "Start",
                EllipsizeMode::Middle => "Middle",
                EllipsizeMode::End => "End",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for EllipsizeMode {
    type GlibType = ffi::PangoEllipsizeMode;

    fn into_glib(self) -> ffi::PangoEllipsizeMode {
        match self {
            EllipsizeMode::None => ffi::PANGO_ELLIPSIZE_NONE,
            EllipsizeMode::Start => ffi::PANGO_ELLIPSIZE_START,
            EllipsizeMode::Middle => ffi::PANGO_ELLIPSIZE_MIDDLE,
            EllipsizeMode::End => ffi::PANGO_ELLIPSIZE_END,
            EllipsizeMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoEllipsizeMode> for EllipsizeMode {
    unsafe fn from_glib(value: ffi::PangoEllipsizeMode) -> Self {
        match value {
            0 => EllipsizeMode::None,
            1 => EllipsizeMode::Start,
            2 => EllipsizeMode::Middle,
            3 => EllipsizeMode::End,
            value => EllipsizeMode::__Unknown(value),
        }
    }
}

impl StaticType for EllipsizeMode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_ellipsize_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EllipsizeMode {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EllipsizeMode {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EllipsizeMode {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoGravity")]
pub enum Gravity {
    #[doc(alias = "PANGO_GRAVITY_SOUTH")]
    South,
    #[doc(alias = "PANGO_GRAVITY_EAST")]
    East,
    #[doc(alias = "PANGO_GRAVITY_NORTH")]
    North,
    #[doc(alias = "PANGO_GRAVITY_WEST")]
    West,
    #[doc(alias = "PANGO_GRAVITY_AUTO")]
    Auto,
    #[doc(hidden)]
    __Unknown(i32),
}

impl Gravity {
    #[doc(alias = "pango_gravity_get_for_matrix")]
    pub fn get_for_matrix(matrix: Option<&Matrix>) -> Gravity {
        unsafe { from_glib(ffi::pango_gravity_get_for_matrix(matrix.to_glib_none().0)) }
    }

    #[doc(alias = "pango_gravity_get_for_script")]
    pub fn get_for_script(script: Script, base_gravity: Gravity, hint: GravityHint) -> Gravity {
        unsafe {
            from_glib(ffi::pango_gravity_get_for_script(
                script.into_glib(),
                base_gravity.into_glib(),
                hint.into_glib(),
            ))
        }
    }

    #[doc(alias = "pango_gravity_get_for_script_and_width")]
    pub fn get_for_script_and_width(
        script: Script,
        wide: bool,
        base_gravity: Gravity,
        hint: GravityHint,
    ) -> Gravity {
        unsafe {
            from_glib(ffi::pango_gravity_get_for_script_and_width(
                script.into_glib(),
                wide.into_glib(),
                base_gravity.into_glib(),
                hint.into_glib(),
            ))
        }
    }

    #[doc(alias = "pango_gravity_to_rotation")]
    pub fn to_rotation(self) -> f64 {
        unsafe { ffi::pango_gravity_to_rotation(self.into_glib()) }
    }
}

impl fmt::Display for Gravity {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Gravity::{}",
            match *self {
                Gravity::South => "South",
                Gravity::East => "East",
                Gravity::North => "North",
                Gravity::West => "West",
                Gravity::Auto => "Auto",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Gravity {
    type GlibType = ffi::PangoGravity;

    fn into_glib(self) -> ffi::PangoGravity {
        match self {
            Gravity::South => ffi::PANGO_GRAVITY_SOUTH,
            Gravity::East => ffi::PANGO_GRAVITY_EAST,
            Gravity::North => ffi::PANGO_GRAVITY_NORTH,
            Gravity::West => ffi::PANGO_GRAVITY_WEST,
            Gravity::Auto => ffi::PANGO_GRAVITY_AUTO,
            Gravity::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoGravity> for Gravity {
    unsafe fn from_glib(value: ffi::PangoGravity) -> Self {
        match value {
            0 => Gravity::South,
            1 => Gravity::East,
            2 => Gravity::North,
            3 => Gravity::West,
            4 => Gravity::Auto,
            value => Gravity::__Unknown(value),
        }
    }
}

impl StaticType for Gravity {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_gravity_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Gravity {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Gravity {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Gravity {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoGravityHint")]
pub enum GravityHint {
    #[doc(alias = "PANGO_GRAVITY_HINT_NATURAL")]
    Natural,
    #[doc(alias = "PANGO_GRAVITY_HINT_STRONG")]
    Strong,
    #[doc(alias = "PANGO_GRAVITY_HINT_LINE")]
    Line,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for GravityHint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "GravityHint::{}",
            match *self {
                GravityHint::Natural => "Natural",
                GravityHint::Strong => "Strong",
                GravityHint::Line => "Line",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for GravityHint {
    type GlibType = ffi::PangoGravityHint;

    fn into_glib(self) -> ffi::PangoGravityHint {
        match self {
            GravityHint::Natural => ffi::PANGO_GRAVITY_HINT_NATURAL,
            GravityHint::Strong => ffi::PANGO_GRAVITY_HINT_STRONG,
            GravityHint::Line => ffi::PANGO_GRAVITY_HINT_LINE,
            GravityHint::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoGravityHint> for GravityHint {
    unsafe fn from_glib(value: ffi::PangoGravityHint) -> Self {
        match value {
            0 => GravityHint::Natural,
            1 => GravityHint::Strong,
            2 => GravityHint::Line,
            value => GravityHint::__Unknown(value),
        }
    }
}

impl StaticType for GravityHint {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_gravity_hint_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for GravityHint {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for GravityHint {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for GravityHint {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[cfg(any(feature = "v1_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_46")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoOverline")]
pub enum Overline {
    #[doc(alias = "PANGO_OVERLINE_NONE")]
    None,
    #[doc(alias = "PANGO_OVERLINE_SINGLE")]
    Single,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v1_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_46")))]
impl fmt::Display for Overline {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Overline::{}",
            match *self {
                Overline::None => "None",
                Overline::Single => "Single",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v1_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_46")))]
#[doc(hidden)]
impl IntoGlib for Overline {
    type GlibType = ffi::PangoOverline;

    fn into_glib(self) -> ffi::PangoOverline {
        match self {
            Overline::None => ffi::PANGO_OVERLINE_NONE,
            Overline::Single => ffi::PANGO_OVERLINE_SINGLE,
            Overline::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v1_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_46")))]
#[doc(hidden)]
impl FromGlib<ffi::PangoOverline> for Overline {
    unsafe fn from_glib(value: ffi::PangoOverline) -> Self {
        match value {
            0 => Overline::None,
            1 => Overline::Single,
            value => Overline::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v1_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_46")))]
impl StaticType for Overline {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_overline_get_type()) }
    }
}

#[cfg(any(feature = "v1_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_46")))]
impl<'a> FromValueOptional<'a> for Overline {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v1_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_46")))]
impl<'a> FromValue<'a> for Overline {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v1_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_46")))]
impl SetValue for Overline {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoRenderPart")]
pub enum RenderPart {
    #[doc(alias = "PANGO_RENDER_PART_FOREGROUND")]
    Foreground,
    #[doc(alias = "PANGO_RENDER_PART_BACKGROUND")]
    Background,
    #[doc(alias = "PANGO_RENDER_PART_UNDERLINE")]
    Underline,
    #[doc(alias = "PANGO_RENDER_PART_STRIKETHROUGH")]
    Strikethrough,
    #[doc(alias = "PANGO_RENDER_PART_OVERLINE")]
    Overline,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for RenderPart {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "RenderPart::{}",
            match *self {
                RenderPart::Foreground => "Foreground",
                RenderPart::Background => "Background",
                RenderPart::Underline => "Underline",
                RenderPart::Strikethrough => "Strikethrough",
                RenderPart::Overline => "Overline",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for RenderPart {
    type GlibType = ffi::PangoRenderPart;

    fn into_glib(self) -> ffi::PangoRenderPart {
        match self {
            RenderPart::Foreground => ffi::PANGO_RENDER_PART_FOREGROUND,
            RenderPart::Background => ffi::PANGO_RENDER_PART_BACKGROUND,
            RenderPart::Underline => ffi::PANGO_RENDER_PART_UNDERLINE,
            RenderPart::Strikethrough => ffi::PANGO_RENDER_PART_STRIKETHROUGH,
            RenderPart::Overline => ffi::PANGO_RENDER_PART_OVERLINE,
            RenderPart::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoRenderPart> for RenderPart {
    unsafe fn from_glib(value: ffi::PangoRenderPart) -> Self {
        match value {
            0 => RenderPart::Foreground,
            1 => RenderPart::Background,
            2 => RenderPart::Underline,
            3 => RenderPart::Strikethrough,
            4 => RenderPart::Overline,
            value => RenderPart::__Unknown(value),
        }
    }
}

impl StaticType for RenderPart {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_render_part_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for RenderPart {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for RenderPart {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for RenderPart {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoScript")]
pub enum Script {
    #[doc(alias = "PANGO_SCRIPT_INVALID_CODE")]
    InvalidCode,
    #[doc(alias = "PANGO_SCRIPT_COMMON")]
    Common,
    #[doc(alias = "PANGO_SCRIPT_INHERITED")]
    Inherited,
    #[doc(alias = "PANGO_SCRIPT_ARABIC")]
    Arabic,
    #[doc(alias = "PANGO_SCRIPT_ARMENIAN")]
    Armenian,
    #[doc(alias = "PANGO_SCRIPT_BENGALI")]
    Bengali,
    #[doc(alias = "PANGO_SCRIPT_BOPOMOFO")]
    Bopomofo,
    #[doc(alias = "PANGO_SCRIPT_CHEROKEE")]
    Cherokee,
    #[doc(alias = "PANGO_SCRIPT_COPTIC")]
    Coptic,
    #[doc(alias = "PANGO_SCRIPT_CYRILLIC")]
    Cyrillic,
    #[doc(alias = "PANGO_SCRIPT_DESERET")]
    Deseret,
    #[doc(alias = "PANGO_SCRIPT_DEVANAGARI")]
    Devanagari,
    #[doc(alias = "PANGO_SCRIPT_ETHIOPIC")]
    Ethiopic,
    #[doc(alias = "PANGO_SCRIPT_GEORGIAN")]
    Georgian,
    #[doc(alias = "PANGO_SCRIPT_GOTHIC")]
    Gothic,
    #[doc(alias = "PANGO_SCRIPT_GREEK")]
    Greek,
    #[doc(alias = "PANGO_SCRIPT_GUJARATI")]
    Gujarati,
    #[doc(alias = "PANGO_SCRIPT_GURMUKHI")]
    Gurmukhi,
    #[doc(alias = "PANGO_SCRIPT_HAN")]
    Han,
    #[doc(alias = "PANGO_SCRIPT_HANGUL")]
    Hangul,
    #[doc(alias = "PANGO_SCRIPT_HEBREW")]
    Hebrew,
    #[doc(alias = "PANGO_SCRIPT_HIRAGANA")]
    Hiragana,
    #[doc(alias = "PANGO_SCRIPT_KANNADA")]
    Kannada,
    #[doc(alias = "PANGO_SCRIPT_KATAKANA")]
    Katakana,
    #[doc(alias = "PANGO_SCRIPT_KHMER")]
    Khmer,
    #[doc(alias = "PANGO_SCRIPT_LAO")]
    Lao,
    #[doc(alias = "PANGO_SCRIPT_LATIN")]
    Latin,
    #[doc(alias = "PANGO_SCRIPT_MALAYALAM")]
    Malayalam,
    #[doc(alias = "PANGO_SCRIPT_MONGOLIAN")]
    Mongolian,
    #[doc(alias = "PANGO_SCRIPT_MYANMAR")]
    Myanmar,
    #[doc(alias = "PANGO_SCRIPT_OGHAM")]
    Ogham,
    #[doc(alias = "PANGO_SCRIPT_OLD_ITALIC")]
    OldItalic,
    #[doc(alias = "PANGO_SCRIPT_ORIYA")]
    Oriya,
    #[doc(alias = "PANGO_SCRIPT_RUNIC")]
    Runic,
    #[doc(alias = "PANGO_SCRIPT_SINHALA")]
    Sinhala,
    #[doc(alias = "PANGO_SCRIPT_SYRIAC")]
    Syriac,
    #[doc(alias = "PANGO_SCRIPT_TAMIL")]
    Tamil,
    #[doc(alias = "PANGO_SCRIPT_TELUGU")]
    Telugu,
    #[doc(alias = "PANGO_SCRIPT_THAANA")]
    Thaana,
    #[doc(alias = "PANGO_SCRIPT_THAI")]
    Thai,
    #[doc(alias = "PANGO_SCRIPT_TIBETAN")]
    Tibetan,
    #[doc(alias = "PANGO_SCRIPT_CANADIAN_ABORIGINAL")]
    CanadianAboriginal,
    #[doc(alias = "PANGO_SCRIPT_YI")]
    Yi,
    #[doc(alias = "PANGO_SCRIPT_TAGALOG")]
    Tagalog,
    #[doc(alias = "PANGO_SCRIPT_HANUNOO")]
    Hanunoo,
    #[doc(alias = "PANGO_SCRIPT_BUHID")]
    Buhid,
    #[doc(alias = "PANGO_SCRIPT_TAGBANWA")]
    Tagbanwa,
    #[doc(alias = "PANGO_SCRIPT_BRAILLE")]
    Braille,
    #[doc(alias = "PANGO_SCRIPT_CYPRIOT")]
    Cypriot,
    #[doc(alias = "PANGO_SCRIPT_LIMBU")]
    Limbu,
    #[doc(alias = "PANGO_SCRIPT_OSMANYA")]
    Osmanya,
    #[doc(alias = "PANGO_SCRIPT_SHAVIAN")]
    Shavian,
    #[doc(alias = "PANGO_SCRIPT_LINEAR_B")]
    LinearB,
    #[doc(alias = "PANGO_SCRIPT_TAI_LE")]
    TaiLe,
    #[doc(alias = "PANGO_SCRIPT_UGARITIC")]
    Ugaritic,
    #[doc(alias = "PANGO_SCRIPT_NEW_TAI_LUE")]
    NewTaiLue,
    #[doc(alias = "PANGO_SCRIPT_BUGINESE")]
    Buginese,
    #[doc(alias = "PANGO_SCRIPT_GLAGOLITIC")]
    Glagolitic,
    #[doc(alias = "PANGO_SCRIPT_TIFINAGH")]
    Tifinagh,
    #[doc(alias = "PANGO_SCRIPT_SYLOTI_NAGRI")]
    SylotiNagri,
    #[doc(alias = "PANGO_SCRIPT_OLD_PERSIAN")]
    OldPersian,
    #[doc(alias = "PANGO_SCRIPT_KHAROSHTHI")]
    Kharoshthi,
    #[doc(alias = "PANGO_SCRIPT_UNKNOWN")]
    Unknown,
    #[doc(alias = "PANGO_SCRIPT_BALINESE")]
    Balinese,
    #[doc(alias = "PANGO_SCRIPT_CUNEIFORM")]
    Cuneiform,
    #[doc(alias = "PANGO_SCRIPT_PHOENICIAN")]
    Phoenician,
    #[doc(alias = "PANGO_SCRIPT_PHAGS_PA")]
    PhagsPa,
    #[doc(alias = "PANGO_SCRIPT_NKO")]
    Nko,
    #[doc(alias = "PANGO_SCRIPT_KAYAH_LI")]
    KayahLi,
    #[doc(alias = "PANGO_SCRIPT_LEPCHA")]
    Lepcha,
    #[doc(alias = "PANGO_SCRIPT_REJANG")]
    Rejang,
    #[doc(alias = "PANGO_SCRIPT_SUNDANESE")]
    Sundanese,
    #[doc(alias = "PANGO_SCRIPT_SAURASHTRA")]
    Saurashtra,
    #[doc(alias = "PANGO_SCRIPT_CHAM")]
    Cham,
    #[doc(alias = "PANGO_SCRIPT_OL_CHIKI")]
    OlChiki,
    #[doc(alias = "PANGO_SCRIPT_VAI")]
    Vai,
    #[doc(alias = "PANGO_SCRIPT_CARIAN")]
    Carian,
    #[doc(alias = "PANGO_SCRIPT_LYCIAN")]
    Lycian,
    #[doc(alias = "PANGO_SCRIPT_LYDIAN")]
    Lydian,
    #[doc(alias = "PANGO_SCRIPT_BATAK")]
    Batak,
    #[doc(alias = "PANGO_SCRIPT_BRAHMI")]
    Brahmi,
    #[doc(alias = "PANGO_SCRIPT_MANDAIC")]
    Mandaic,
    #[doc(alias = "PANGO_SCRIPT_CHAKMA")]
    Chakma,
    #[doc(alias = "PANGO_SCRIPT_MEROITIC_CURSIVE")]
    MeroiticCursive,
    #[doc(alias = "PANGO_SCRIPT_MEROITIC_HIEROGLYPHS")]
    MeroiticHieroglyphs,
    #[doc(alias = "PANGO_SCRIPT_MIAO")]
    Miao,
    #[doc(alias = "PANGO_SCRIPT_SHARADA")]
    Sharada,
    #[doc(alias = "PANGO_SCRIPT_SORA_SOMPENG")]
    SoraSompeng,
    #[doc(alias = "PANGO_SCRIPT_TAKRI")]
    Takri,
    #[doc(alias = "PANGO_SCRIPT_BASSA_VAH")]
    BassaVah,
    #[doc(alias = "PANGO_SCRIPT_CAUCASIAN_ALBANIAN")]
    CaucasianAlbanian,
    #[doc(alias = "PANGO_SCRIPT_DUPLOYAN")]
    Duployan,
    #[doc(alias = "PANGO_SCRIPT_ELBASAN")]
    Elbasan,
    #[doc(alias = "PANGO_SCRIPT_GRANTHA")]
    Grantha,
    #[doc(alias = "PANGO_SCRIPT_KHOJKI")]
    Khojki,
    #[doc(alias = "PANGO_SCRIPT_KHUDAWADI")]
    Khudawadi,
    #[doc(alias = "PANGO_SCRIPT_LINEAR_A")]
    LinearA,
    #[doc(alias = "PANGO_SCRIPT_MAHAJANI")]
    Mahajani,
    #[doc(alias = "PANGO_SCRIPT_MANICHAEAN")]
    Manichaean,
    #[doc(alias = "PANGO_SCRIPT_MENDE_KIKAKUI")]
    MendeKikakui,
    #[doc(alias = "PANGO_SCRIPT_MODI")]
    Modi,
    #[doc(alias = "PANGO_SCRIPT_MRO")]
    Mro,
    #[doc(alias = "PANGO_SCRIPT_NABATAEAN")]
    Nabataean,
    #[doc(alias = "PANGO_SCRIPT_OLD_NORTH_ARABIAN")]
    OldNorthArabian,
    #[doc(alias = "PANGO_SCRIPT_OLD_PERMIC")]
    OldPermic,
    #[doc(alias = "PANGO_SCRIPT_PAHAWH_HMONG")]
    PahawhHmong,
    #[doc(alias = "PANGO_SCRIPT_PALMYRENE")]
    Palmyrene,
    #[doc(alias = "PANGO_SCRIPT_PAU_CIN_HAU")]
    PauCinHau,
    #[doc(alias = "PANGO_SCRIPT_PSALTER_PAHLAVI")]
    PsalterPahlavi,
    #[doc(alias = "PANGO_SCRIPT_SIDDHAM")]
    Siddham,
    #[doc(alias = "PANGO_SCRIPT_TIRHUTA")]
    Tirhuta,
    #[doc(alias = "PANGO_SCRIPT_WARANG_CITI")]
    WarangCiti,
    #[doc(alias = "PANGO_SCRIPT_AHOM")]
    Ahom,
    #[doc(alias = "PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS")]
    AnatolianHieroglyphs,
    #[doc(alias = "PANGO_SCRIPT_HATRAN")]
    Hatran,
    #[doc(alias = "PANGO_SCRIPT_MULTANI")]
    Multani,
    #[doc(alias = "PANGO_SCRIPT_OLD_HUNGARIAN")]
    OldHungarian,
    #[doc(alias = "PANGO_SCRIPT_SIGNWRITING")]
    Signwriting,
    #[doc(hidden)]
    __Unknown(i32),
}

impl Script {
    #[cfg_attr(feature = "v1_44", deprecated)]
    #[doc(alias = "pango_script_for_unichar")]
    pub fn for_unichar(ch: char) -> Script {
        unsafe { from_glib(ffi::pango_script_for_unichar(ch.into_glib())) }
    }

    #[doc(alias = "pango_script_get_sample_language")]
    pub fn get_sample_language(self) -> Option<Language> {
        unsafe { from_glib_full(ffi::pango_script_get_sample_language(self.into_glib())) }
    }
}

impl fmt::Display for Script {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Script::{}",
            match *self {
                Script::InvalidCode => "InvalidCode",
                Script::Common => "Common",
                Script::Inherited => "Inherited",
                Script::Arabic => "Arabic",
                Script::Armenian => "Armenian",
                Script::Bengali => "Bengali",
                Script::Bopomofo => "Bopomofo",
                Script::Cherokee => "Cherokee",
                Script::Coptic => "Coptic",
                Script::Cyrillic => "Cyrillic",
                Script::Deseret => "Deseret",
                Script::Devanagari => "Devanagari",
                Script::Ethiopic => "Ethiopic",
                Script::Georgian => "Georgian",
                Script::Gothic => "Gothic",
                Script::Greek => "Greek",
                Script::Gujarati => "Gujarati",
                Script::Gurmukhi => "Gurmukhi",
                Script::Han => "Han",
                Script::Hangul => "Hangul",
                Script::Hebrew => "Hebrew",
                Script::Hiragana => "Hiragana",
                Script::Kannada => "Kannada",
                Script::Katakana => "Katakana",
                Script::Khmer => "Khmer",
                Script::Lao => "Lao",
                Script::Latin => "Latin",
                Script::Malayalam => "Malayalam",
                Script::Mongolian => "Mongolian",
                Script::Myanmar => "Myanmar",
                Script::Ogham => "Ogham",
                Script::OldItalic => "OldItalic",
                Script::Oriya => "Oriya",
                Script::Runic => "Runic",
                Script::Sinhala => "Sinhala",
                Script::Syriac => "Syriac",
                Script::Tamil => "Tamil",
                Script::Telugu => "Telugu",
                Script::Thaana => "Thaana",
                Script::Thai => "Thai",
                Script::Tibetan => "Tibetan",
                Script::CanadianAboriginal => "CanadianAboriginal",
                Script::Yi => "Yi",
                Script::Tagalog => "Tagalog",
                Script::Hanunoo => "Hanunoo",
                Script::Buhid => "Buhid",
                Script::Tagbanwa => "Tagbanwa",
                Script::Braille => "Braille",
                Script::Cypriot => "Cypriot",
                Script::Limbu => "Limbu",
                Script::Osmanya => "Osmanya",
                Script::Shavian => "Shavian",
                Script::LinearB => "LinearB",
                Script::TaiLe => "TaiLe",
                Script::Ugaritic => "Ugaritic",
                Script::NewTaiLue => "NewTaiLue",
                Script::Buginese => "Buginese",
                Script::Glagolitic => "Glagolitic",
                Script::Tifinagh => "Tifinagh",
                Script::SylotiNagri => "SylotiNagri",
                Script::OldPersian => "OldPersian",
                Script::Kharoshthi => "Kharoshthi",
                Script::Unknown => "Unknown",
                Script::Balinese => "Balinese",
                Script::Cuneiform => "Cuneiform",
                Script::Phoenician => "Phoenician",
                Script::PhagsPa => "PhagsPa",
                Script::Nko => "Nko",
                Script::KayahLi => "KayahLi",
                Script::Lepcha => "Lepcha",
                Script::Rejang => "Rejang",
                Script::Sundanese => "Sundanese",
                Script::Saurashtra => "Saurashtra",
                Script::Cham => "Cham",
                Script::OlChiki => "OlChiki",
                Script::Vai => "Vai",
                Script::Carian => "Carian",
                Script::Lycian => "Lycian",
                Script::Lydian => "Lydian",
                Script::Batak => "Batak",
                Script::Brahmi => "Brahmi",
                Script::Mandaic => "Mandaic",
                Script::Chakma => "Chakma",
                Script::MeroiticCursive => "MeroiticCursive",
                Script::MeroiticHieroglyphs => "MeroiticHieroglyphs",
                Script::Miao => "Miao",
                Script::Sharada => "Sharada",
                Script::SoraSompeng => "SoraSompeng",
                Script::Takri => "Takri",
                Script::BassaVah => "BassaVah",
                Script::CaucasianAlbanian => "CaucasianAlbanian",
                Script::Duployan => "Duployan",
                Script::Elbasan => "Elbasan",
                Script::Grantha => "Grantha",
                Script::Khojki => "Khojki",
                Script::Khudawadi => "Khudawadi",
                Script::LinearA => "LinearA",
                Script::Mahajani => "Mahajani",
                Script::Manichaean => "Manichaean",
                Script::MendeKikakui => "MendeKikakui",
                Script::Modi => "Modi",
                Script::Mro => "Mro",
                Script::Nabataean => "Nabataean",
                Script::OldNorthArabian => "OldNorthArabian",
                Script::OldPermic => "OldPermic",
                Script::PahawhHmong => "PahawhHmong",
                Script::Palmyrene => "Palmyrene",
                Script::PauCinHau => "PauCinHau",
                Script::PsalterPahlavi => "PsalterPahlavi",
                Script::Siddham => "Siddham",
                Script::Tirhuta => "Tirhuta",
                Script::WarangCiti => "WarangCiti",
                Script::Ahom => "Ahom",
                Script::AnatolianHieroglyphs => "AnatolianHieroglyphs",
                Script::Hatran => "Hatran",
                Script::Multani => "Multani",
                Script::OldHungarian => "OldHungarian",
                Script::Signwriting => "Signwriting",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Script {
    type GlibType = ffi::PangoScript;

    fn into_glib(self) -> ffi::PangoScript {
        match self {
            Script::InvalidCode => ffi::PANGO_SCRIPT_INVALID_CODE,
            Script::Common => ffi::PANGO_SCRIPT_COMMON,
            Script::Inherited => ffi::PANGO_SCRIPT_INHERITED,
            Script::Arabic => ffi::PANGO_SCRIPT_ARABIC,
            Script::Armenian => ffi::PANGO_SCRIPT_ARMENIAN,
            Script::Bengali => ffi::PANGO_SCRIPT_BENGALI,
            Script::Bopomofo => ffi::PANGO_SCRIPT_BOPOMOFO,
            Script::Cherokee => ffi::PANGO_SCRIPT_CHEROKEE,
            Script::Coptic => ffi::PANGO_SCRIPT_COPTIC,
            Script::Cyrillic => ffi::PANGO_SCRIPT_CYRILLIC,
            Script::Deseret => ffi::PANGO_SCRIPT_DESERET,
            Script::Devanagari => ffi::PANGO_SCRIPT_DEVANAGARI,
            Script::Ethiopic => ffi::PANGO_SCRIPT_ETHIOPIC,
            Script::Georgian => ffi::PANGO_SCRIPT_GEORGIAN,
            Script::Gothic => ffi::PANGO_SCRIPT_GOTHIC,
            Script::Greek => ffi::PANGO_SCRIPT_GREEK,
            Script::Gujarati => ffi::PANGO_SCRIPT_GUJARATI,
            Script::Gurmukhi => ffi::PANGO_SCRIPT_GURMUKHI,
            Script::Han => ffi::PANGO_SCRIPT_HAN,
            Script::Hangul => ffi::PANGO_SCRIPT_HANGUL,
            Script::Hebrew => ffi::PANGO_SCRIPT_HEBREW,
            Script::Hiragana => ffi::PANGO_SCRIPT_HIRAGANA,
            Script::Kannada => ffi::PANGO_SCRIPT_KANNADA,
            Script::Katakana => ffi::PANGO_SCRIPT_KATAKANA,
            Script::Khmer => ffi::PANGO_SCRIPT_KHMER,
            Script::Lao => ffi::PANGO_SCRIPT_LAO,
            Script::Latin => ffi::PANGO_SCRIPT_LATIN,
            Script::Malayalam => ffi::PANGO_SCRIPT_MALAYALAM,
            Script::Mongolian => ffi::PANGO_SCRIPT_MONGOLIAN,
            Script::Myanmar => ffi::PANGO_SCRIPT_MYANMAR,
            Script::Ogham => ffi::PANGO_SCRIPT_OGHAM,
            Script::OldItalic => ffi::PANGO_SCRIPT_OLD_ITALIC,
            Script::Oriya => ffi::PANGO_SCRIPT_ORIYA,
            Script::Runic => ffi::PANGO_SCRIPT_RUNIC,
            Script::Sinhala => ffi::PANGO_SCRIPT_SINHALA,
            Script::Syriac => ffi::PANGO_SCRIPT_SYRIAC,
            Script::Tamil => ffi::PANGO_SCRIPT_TAMIL,
            Script::Telugu => ffi::PANGO_SCRIPT_TELUGU,
            Script::Thaana => ffi::PANGO_SCRIPT_THAANA,
            Script::Thai => ffi::PANGO_SCRIPT_THAI,
            Script::Tibetan => ffi::PANGO_SCRIPT_TIBETAN,
            Script::CanadianAboriginal => ffi::PANGO_SCRIPT_CANADIAN_ABORIGINAL,
            Script::Yi => ffi::PANGO_SCRIPT_YI,
            Script::Tagalog => ffi::PANGO_SCRIPT_TAGALOG,
            Script::Hanunoo => ffi::PANGO_SCRIPT_HANUNOO,
            Script::Buhid => ffi::PANGO_SCRIPT_BUHID,
            Script::Tagbanwa => ffi::PANGO_SCRIPT_TAGBANWA,
            Script::Braille => ffi::PANGO_SCRIPT_BRAILLE,
            Script::Cypriot => ffi::PANGO_SCRIPT_CYPRIOT,
            Script::Limbu => ffi::PANGO_SCRIPT_LIMBU,
            Script::Osmanya => ffi::PANGO_SCRIPT_OSMANYA,
            Script::Shavian => ffi::PANGO_SCRIPT_SHAVIAN,
            Script::LinearB => ffi::PANGO_SCRIPT_LINEAR_B,
            Script::TaiLe => ffi::PANGO_SCRIPT_TAI_LE,
            Script::Ugaritic => ffi::PANGO_SCRIPT_UGARITIC,
            Script::NewTaiLue => ffi::PANGO_SCRIPT_NEW_TAI_LUE,
            Script::Buginese => ffi::PANGO_SCRIPT_BUGINESE,
            Script::Glagolitic => ffi::PANGO_SCRIPT_GLAGOLITIC,
            Script::Tifinagh => ffi::PANGO_SCRIPT_TIFINAGH,
            Script::SylotiNagri => ffi::PANGO_SCRIPT_SYLOTI_NAGRI,
            Script::OldPersian => ffi::PANGO_SCRIPT_OLD_PERSIAN,
            Script::Kharoshthi => ffi::PANGO_SCRIPT_KHAROSHTHI,
            Script::Unknown => ffi::PANGO_SCRIPT_UNKNOWN,
            Script::Balinese => ffi::PANGO_SCRIPT_BALINESE,
            Script::Cuneiform => ffi::PANGO_SCRIPT_CUNEIFORM,
            Script::Phoenician => ffi::PANGO_SCRIPT_PHOENICIAN,
            Script::PhagsPa => ffi::PANGO_SCRIPT_PHAGS_PA,
            Script::Nko => ffi::PANGO_SCRIPT_NKO,
            Script::KayahLi => ffi::PANGO_SCRIPT_KAYAH_LI,
            Script::Lepcha => ffi::PANGO_SCRIPT_LEPCHA,
            Script::Rejang => ffi::PANGO_SCRIPT_REJANG,
            Script::Sundanese => ffi::PANGO_SCRIPT_SUNDANESE,
            Script::Saurashtra => ffi::PANGO_SCRIPT_SAURASHTRA,
            Script::Cham => ffi::PANGO_SCRIPT_CHAM,
            Script::OlChiki => ffi::PANGO_SCRIPT_OL_CHIKI,
            Script::Vai => ffi::PANGO_SCRIPT_VAI,
            Script::Carian => ffi::PANGO_SCRIPT_CARIAN,
            Script::Lycian => ffi::PANGO_SCRIPT_LYCIAN,
            Script::Lydian => ffi::PANGO_SCRIPT_LYDIAN,
            Script::Batak => ffi::PANGO_SCRIPT_BATAK,
            Script::Brahmi => ffi::PANGO_SCRIPT_BRAHMI,
            Script::Mandaic => ffi::PANGO_SCRIPT_MANDAIC,
            Script::Chakma => ffi::PANGO_SCRIPT_CHAKMA,
            Script::MeroiticCursive => ffi::PANGO_SCRIPT_MEROITIC_CURSIVE,
            Script::MeroiticHieroglyphs => ffi::PANGO_SCRIPT_MEROITIC_HIEROGLYPHS,
            Script::Miao => ffi::PANGO_SCRIPT_MIAO,
            Script::Sharada => ffi::PANGO_SCRIPT_SHARADA,
            Script::SoraSompeng => ffi::PANGO_SCRIPT_SORA_SOMPENG,
            Script::Takri => ffi::PANGO_SCRIPT_TAKRI,
            Script::BassaVah => ffi::PANGO_SCRIPT_BASSA_VAH,
            Script::CaucasianAlbanian => ffi::PANGO_SCRIPT_CAUCASIAN_ALBANIAN,
            Script::Duployan => ffi::PANGO_SCRIPT_DUPLOYAN,
            Script::Elbasan => ffi::PANGO_SCRIPT_ELBASAN,
            Script::Grantha => ffi::PANGO_SCRIPT_GRANTHA,
            Script::Khojki => ffi::PANGO_SCRIPT_KHOJKI,
            Script::Khudawadi => ffi::PANGO_SCRIPT_KHUDAWADI,
            Script::LinearA => ffi::PANGO_SCRIPT_LINEAR_A,
            Script::Mahajani => ffi::PANGO_SCRIPT_MAHAJANI,
            Script::Manichaean => ffi::PANGO_SCRIPT_MANICHAEAN,
            Script::MendeKikakui => ffi::PANGO_SCRIPT_MENDE_KIKAKUI,
            Script::Modi => ffi::PANGO_SCRIPT_MODI,
            Script::Mro => ffi::PANGO_SCRIPT_MRO,
            Script::Nabataean => ffi::PANGO_SCRIPT_NABATAEAN,
            Script::OldNorthArabian => ffi::PANGO_SCRIPT_OLD_NORTH_ARABIAN,
            Script::OldPermic => ffi::PANGO_SCRIPT_OLD_PERMIC,
            Script::PahawhHmong => ffi::PANGO_SCRIPT_PAHAWH_HMONG,
            Script::Palmyrene => ffi::PANGO_SCRIPT_PALMYRENE,
            Script::PauCinHau => ffi::PANGO_SCRIPT_PAU_CIN_HAU,
            Script::PsalterPahlavi => ffi::PANGO_SCRIPT_PSALTER_PAHLAVI,
            Script::Siddham => ffi::PANGO_SCRIPT_SIDDHAM,
            Script::Tirhuta => ffi::PANGO_SCRIPT_TIRHUTA,
            Script::WarangCiti => ffi::PANGO_SCRIPT_WARANG_CITI,
            Script::Ahom => ffi::PANGO_SCRIPT_AHOM,
            Script::AnatolianHieroglyphs => ffi::PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS,
            Script::Hatran => ffi::PANGO_SCRIPT_HATRAN,
            Script::Multani => ffi::PANGO_SCRIPT_MULTANI,
            Script::OldHungarian => ffi::PANGO_SCRIPT_OLD_HUNGARIAN,
            Script::Signwriting => ffi::PANGO_SCRIPT_SIGNWRITING,
            Script::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoScript> for Script {
    unsafe fn from_glib(value: ffi::PangoScript) -> Self {
        match value {
            -1 => Script::InvalidCode,
            0 => Script::Common,
            1 => Script::Inherited,
            2 => Script::Arabic,
            3 => Script::Armenian,
            4 => Script::Bengali,
            5 => Script::Bopomofo,
            6 => Script::Cherokee,
            7 => Script::Coptic,
            8 => Script::Cyrillic,
            9 => Script::Deseret,
            10 => Script::Devanagari,
            11 => Script::Ethiopic,
            12 => Script::Georgian,
            13 => Script::Gothic,
            14 => Script::Greek,
            15 => Script::Gujarati,
            16 => Script::Gurmukhi,
            17 => Script::Han,
            18 => Script::Hangul,
            19 => Script::Hebrew,
            20 => Script::Hiragana,
            21 => Script::Kannada,
            22 => Script::Katakana,
            23 => Script::Khmer,
            24 => Script::Lao,
            25 => Script::Latin,
            26 => Script::Malayalam,
            27 => Script::Mongolian,
            28 => Script::Myanmar,
            29 => Script::Ogham,
            30 => Script::OldItalic,
            31 => Script::Oriya,
            32 => Script::Runic,
            33 => Script::Sinhala,
            34 => Script::Syriac,
            35 => Script::Tamil,
            36 => Script::Telugu,
            37 => Script::Thaana,
            38 => Script::Thai,
            39 => Script::Tibetan,
            40 => Script::CanadianAboriginal,
            41 => Script::Yi,
            42 => Script::Tagalog,
            43 => Script::Hanunoo,
            44 => Script::Buhid,
            45 => Script::Tagbanwa,
            46 => Script::Braille,
            47 => Script::Cypriot,
            48 => Script::Limbu,
            49 => Script::Osmanya,
            50 => Script::Shavian,
            51 => Script::LinearB,
            52 => Script::TaiLe,
            53 => Script::Ugaritic,
            54 => Script::NewTaiLue,
            55 => Script::Buginese,
            56 => Script::Glagolitic,
            57 => Script::Tifinagh,
            58 => Script::SylotiNagri,
            59 => Script::OldPersian,
            60 => Script::Kharoshthi,
            61 => Script::Unknown,
            62 => Script::Balinese,
            63 => Script::Cuneiform,
            64 => Script::Phoenician,
            65 => Script::PhagsPa,
            66 => Script::Nko,
            67 => Script::KayahLi,
            68 => Script::Lepcha,
            69 => Script::Rejang,
            70 => Script::Sundanese,
            71 => Script::Saurashtra,
            72 => Script::Cham,
            73 => Script::OlChiki,
            74 => Script::Vai,
            75 => Script::Carian,
            76 => Script::Lycian,
            77 => Script::Lydian,
            78 => Script::Batak,
            79 => Script::Brahmi,
            80 => Script::Mandaic,
            81 => Script::Chakma,
            82 => Script::MeroiticCursive,
            83 => Script::MeroiticHieroglyphs,
            84 => Script::Miao,
            85 => Script::Sharada,
            86 => Script::SoraSompeng,
            87 => Script::Takri,
            88 => Script::BassaVah,
            89 => Script::CaucasianAlbanian,
            90 => Script::Duployan,
            91 => Script::Elbasan,
            92 => Script::Grantha,
            93 => Script::Khojki,
            94 => Script::Khudawadi,
            95 => Script::LinearA,
            96 => Script::Mahajani,
            97 => Script::Manichaean,
            98 => Script::MendeKikakui,
            99 => Script::Modi,
            100 => Script::Mro,
            101 => Script::Nabataean,
            102 => Script::OldNorthArabian,
            103 => Script::OldPermic,
            104 => Script::PahawhHmong,
            105 => Script::Palmyrene,
            106 => Script::PauCinHau,
            107 => Script::PsalterPahlavi,
            108 => Script::Siddham,
            109 => Script::Tirhuta,
            110 => Script::WarangCiti,
            111 => Script::Ahom,
            112 => Script::AnatolianHieroglyphs,
            113 => Script::Hatran,
            114 => Script::Multani,
            115 => Script::OldHungarian,
            116 => Script::Signwriting,
            value => Script::__Unknown(value),
        }
    }
}

impl StaticType for Script {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_script_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Script {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Script {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Script {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoStretch")]
pub enum Stretch {
    #[doc(alias = "PANGO_STRETCH_ULTRA_CONDENSED")]
    UltraCondensed,
    #[doc(alias = "PANGO_STRETCH_EXTRA_CONDENSED")]
    ExtraCondensed,
    #[doc(alias = "PANGO_STRETCH_CONDENSED")]
    Condensed,
    #[doc(alias = "PANGO_STRETCH_SEMI_CONDENSED")]
    SemiCondensed,
    #[doc(alias = "PANGO_STRETCH_NORMAL")]
    Normal,
    #[doc(alias = "PANGO_STRETCH_SEMI_EXPANDED")]
    SemiExpanded,
    #[doc(alias = "PANGO_STRETCH_EXPANDED")]
    Expanded,
    #[doc(alias = "PANGO_STRETCH_EXTRA_EXPANDED")]
    ExtraExpanded,
    #[doc(alias = "PANGO_STRETCH_ULTRA_EXPANDED")]
    UltraExpanded,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Stretch {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Stretch::{}",
            match *self {
                Stretch::UltraCondensed => "UltraCondensed",
                Stretch::ExtraCondensed => "ExtraCondensed",
                Stretch::Condensed => "Condensed",
                Stretch::SemiCondensed => "SemiCondensed",
                Stretch::Normal => "Normal",
                Stretch::SemiExpanded => "SemiExpanded",
                Stretch::Expanded => "Expanded",
                Stretch::ExtraExpanded => "ExtraExpanded",
                Stretch::UltraExpanded => "UltraExpanded",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Stretch {
    type GlibType = ffi::PangoStretch;

    fn into_glib(self) -> ffi::PangoStretch {
        match self {
            Stretch::UltraCondensed => ffi::PANGO_STRETCH_ULTRA_CONDENSED,
            Stretch::ExtraCondensed => ffi::PANGO_STRETCH_EXTRA_CONDENSED,
            Stretch::Condensed => ffi::PANGO_STRETCH_CONDENSED,
            Stretch::SemiCondensed => ffi::PANGO_STRETCH_SEMI_CONDENSED,
            Stretch::Normal => ffi::PANGO_STRETCH_NORMAL,
            Stretch::SemiExpanded => ffi::PANGO_STRETCH_SEMI_EXPANDED,
            Stretch::Expanded => ffi::PANGO_STRETCH_EXPANDED,
            Stretch::ExtraExpanded => ffi::PANGO_STRETCH_EXTRA_EXPANDED,
            Stretch::UltraExpanded => ffi::PANGO_STRETCH_ULTRA_EXPANDED,
            Stretch::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoStretch> for Stretch {
    unsafe fn from_glib(value: ffi::PangoStretch) -> Self {
        match value {
            0 => Stretch::UltraCondensed,
            1 => Stretch::ExtraCondensed,
            2 => Stretch::Condensed,
            3 => Stretch::SemiCondensed,
            4 => Stretch::Normal,
            5 => Stretch::SemiExpanded,
            6 => Stretch::Expanded,
            7 => Stretch::ExtraExpanded,
            8 => Stretch::UltraExpanded,
            value => Stretch::__Unknown(value),
        }
    }
}

impl StaticType for Stretch {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_stretch_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Stretch {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Stretch {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Stretch {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoStyle")]
pub enum Style {
    #[doc(alias = "PANGO_STYLE_NORMAL")]
    Normal,
    #[doc(alias = "PANGO_STYLE_OBLIQUE")]
    Oblique,
    #[doc(alias = "PANGO_STYLE_ITALIC")]
    Italic,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Style {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Style::{}",
            match *self {
                Style::Normal => "Normal",
                Style::Oblique => "Oblique",
                Style::Italic => "Italic",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Style {
    type GlibType = ffi::PangoStyle;

    fn into_glib(self) -> ffi::PangoStyle {
        match self {
            Style::Normal => ffi::PANGO_STYLE_NORMAL,
            Style::Oblique => ffi::PANGO_STYLE_OBLIQUE,
            Style::Italic => ffi::PANGO_STYLE_ITALIC,
            Style::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoStyle> for Style {
    unsafe fn from_glib(value: ffi::PangoStyle) -> Self {
        match value {
            0 => Style::Normal,
            1 => Style::Oblique,
            2 => Style::Italic,
            value => Style::__Unknown(value),
        }
    }
}

impl StaticType for Style {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_style_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Style {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Style {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Style {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoTabAlign")]
pub enum TabAlign {
    #[doc(alias = "PANGO_TAB_LEFT")]
    Left,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TabAlign {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "TabAlign::{}",
            match *self {
                TabAlign::Left => "Left",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for TabAlign {
    type GlibType = ffi::PangoTabAlign;

    fn into_glib(self) -> ffi::PangoTabAlign {
        match self {
            TabAlign::Left => ffi::PANGO_TAB_LEFT,
            TabAlign::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoTabAlign> for TabAlign {
    unsafe fn from_glib(value: ffi::PangoTabAlign) -> Self {
        match value {
            0 => TabAlign::Left,
            value => TabAlign::__Unknown(value),
        }
    }
}

impl StaticType for TabAlign {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_tab_align_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for TabAlign {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for TabAlign {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for TabAlign {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoUnderline")]
pub enum Underline {
    #[doc(alias = "PANGO_UNDERLINE_NONE")]
    None,
    #[doc(alias = "PANGO_UNDERLINE_SINGLE")]
    Single,
    #[doc(alias = "PANGO_UNDERLINE_DOUBLE")]
    Double,
    #[doc(alias = "PANGO_UNDERLINE_LOW")]
    Low,
    #[doc(alias = "PANGO_UNDERLINE_ERROR")]
    Error,
    #[doc(alias = "PANGO_UNDERLINE_SINGLE_LINE")]
    SingleLine,
    #[doc(alias = "PANGO_UNDERLINE_DOUBLE_LINE")]
    DoubleLine,
    #[doc(alias = "PANGO_UNDERLINE_ERROR_LINE")]
    ErrorLine,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Underline {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Underline::{}",
            match *self {
                Underline::None => "None",
                Underline::Single => "Single",
                Underline::Double => "Double",
                Underline::Low => "Low",
                Underline::Error => "Error",
                Underline::SingleLine => "SingleLine",
                Underline::DoubleLine => "DoubleLine",
                Underline::ErrorLine => "ErrorLine",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Underline {
    type GlibType = ffi::PangoUnderline;

    fn into_glib(self) -> ffi::PangoUnderline {
        match self {
            Underline::None => ffi::PANGO_UNDERLINE_NONE,
            Underline::Single => ffi::PANGO_UNDERLINE_SINGLE,
            Underline::Double => ffi::PANGO_UNDERLINE_DOUBLE,
            Underline::Low => ffi::PANGO_UNDERLINE_LOW,
            Underline::Error => ffi::PANGO_UNDERLINE_ERROR,
            Underline::SingleLine => ffi::PANGO_UNDERLINE_SINGLE_LINE,
            Underline::DoubleLine => ffi::PANGO_UNDERLINE_DOUBLE_LINE,
            Underline::ErrorLine => ffi::PANGO_UNDERLINE_ERROR_LINE,
            Underline::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoUnderline> for Underline {
    unsafe fn from_glib(value: ffi::PangoUnderline) -> Self {
        match value {
            0 => Underline::None,
            1 => Underline::Single,
            2 => Underline::Double,
            3 => Underline::Low,
            4 => Underline::Error,
            5 => Underline::SingleLine,
            6 => Underline::DoubleLine,
            7 => Underline::ErrorLine,
            value => Underline::__Unknown(value),
        }
    }
}

impl StaticType for Underline {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_underline_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Underline {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Underline {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Underline {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoVariant")]
pub enum Variant {
    #[doc(alias = "PANGO_VARIANT_NORMAL")]
    Normal,
    #[doc(alias = "PANGO_VARIANT_SMALL_CAPS")]
    SmallCaps,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Variant {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Variant::{}",
            match *self {
                Variant::Normal => "Normal",
                Variant::SmallCaps => "SmallCaps",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Variant {
    type GlibType = ffi::PangoVariant;

    fn into_glib(self) -> ffi::PangoVariant {
        match self {
            Variant::Normal => ffi::PANGO_VARIANT_NORMAL,
            Variant::SmallCaps => ffi::PANGO_VARIANT_SMALL_CAPS,
            Variant::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoVariant> for Variant {
    unsafe fn from_glib(value: ffi::PangoVariant) -> Self {
        match value {
            0 => Variant::Normal,
            1 => Variant::SmallCaps,
            value => Variant::__Unknown(value),
        }
    }
}

impl StaticType for Variant {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_variant_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Variant {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Variant {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Variant {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoWeight")]
pub enum Weight {
    #[doc(alias = "PANGO_WEIGHT_THIN")]
    Thin,
    #[doc(alias = "PANGO_WEIGHT_ULTRALIGHT")]
    Ultralight,
    #[doc(alias = "PANGO_WEIGHT_LIGHT")]
    Light,
    #[doc(alias = "PANGO_WEIGHT_SEMILIGHT")]
    Semilight,
    #[doc(alias = "PANGO_WEIGHT_BOOK")]
    Book,
    #[doc(alias = "PANGO_WEIGHT_NORMAL")]
    Normal,
    #[doc(alias = "PANGO_WEIGHT_MEDIUM")]
    Medium,
    #[doc(alias = "PANGO_WEIGHT_SEMIBOLD")]
    Semibold,
    #[doc(alias = "PANGO_WEIGHT_BOLD")]
    Bold,
    #[doc(alias = "PANGO_WEIGHT_ULTRABOLD")]
    Ultrabold,
    #[doc(alias = "PANGO_WEIGHT_HEAVY")]
    Heavy,
    #[doc(alias = "PANGO_WEIGHT_ULTRAHEAVY")]
    Ultraheavy,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Weight {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Weight::{}",
            match *self {
                Weight::Thin => "Thin",
                Weight::Ultralight => "Ultralight",
                Weight::Light => "Light",
                Weight::Semilight => "Semilight",
                Weight::Book => "Book",
                Weight::Normal => "Normal",
                Weight::Medium => "Medium",
                Weight::Semibold => "Semibold",
                Weight::Bold => "Bold",
                Weight::Ultrabold => "Ultrabold",
                Weight::Heavy => "Heavy",
                Weight::Ultraheavy => "Ultraheavy",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Weight {
    type GlibType = ffi::PangoWeight;

    fn into_glib(self) -> ffi::PangoWeight {
        match self {
            Weight::Thin => ffi::PANGO_WEIGHT_THIN,
            Weight::Ultralight => ffi::PANGO_WEIGHT_ULTRALIGHT,
            Weight::Light => ffi::PANGO_WEIGHT_LIGHT,
            Weight::Semilight => ffi::PANGO_WEIGHT_SEMILIGHT,
            Weight::Book => ffi::PANGO_WEIGHT_BOOK,
            Weight::Normal => ffi::PANGO_WEIGHT_NORMAL,
            Weight::Medium => ffi::PANGO_WEIGHT_MEDIUM,
            Weight::Semibold => ffi::PANGO_WEIGHT_SEMIBOLD,
            Weight::Bold => ffi::PANGO_WEIGHT_BOLD,
            Weight::Ultrabold => ffi::PANGO_WEIGHT_ULTRABOLD,
            Weight::Heavy => ffi::PANGO_WEIGHT_HEAVY,
            Weight::Ultraheavy => ffi::PANGO_WEIGHT_ULTRAHEAVY,
            Weight::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoWeight> for Weight {
    unsafe fn from_glib(value: ffi::PangoWeight) -> Self {
        match value {
            100 => Weight::Thin,
            200 => Weight::Ultralight,
            300 => Weight::Light,
            350 => Weight::Semilight,
            380 => Weight::Book,
            400 => Weight::Normal,
            500 => Weight::Medium,
            600 => Weight::Semibold,
            700 => Weight::Bold,
            800 => Weight::Ultrabold,
            900 => Weight::Heavy,
            1000 => Weight::Ultraheavy,
            value => Weight::__Unknown(value),
        }
    }
}

impl StaticType for Weight {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_weight_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Weight {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Weight {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Weight {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PangoWrapMode")]
pub enum WrapMode {
    #[doc(alias = "PANGO_WRAP_WORD")]
    Word,
    #[doc(alias = "PANGO_WRAP_CHAR")]
    Char,
    #[doc(alias = "PANGO_WRAP_WORD_CHAR")]
    WordChar,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for WrapMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "WrapMode::{}",
            match *self {
                WrapMode::Word => "Word",
                WrapMode::Char => "Char",
                WrapMode::WordChar => "WordChar",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for WrapMode {
    type GlibType = ffi::PangoWrapMode;

    fn into_glib(self) -> ffi::PangoWrapMode {
        match self {
            WrapMode::Word => ffi::PANGO_WRAP_WORD,
            WrapMode::Char => ffi::PANGO_WRAP_CHAR,
            WrapMode::WordChar => ffi::PANGO_WRAP_WORD_CHAR,
            WrapMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PangoWrapMode> for WrapMode {
    unsafe fn from_glib(value: ffi::PangoWrapMode) -> Self {
        match value {
            0 => WrapMode::Word,
            1 => WrapMode::Char,
            2 => WrapMode::WordChar,
            value => WrapMode::__Unknown(value),
        }
    }
}

impl StaticType for WrapMode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::pango_wrap_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for WrapMode {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for WrapMode {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for WrapMode {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.into_glib())
    }
}
