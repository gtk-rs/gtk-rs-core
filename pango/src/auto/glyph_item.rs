// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, AttrList};
use glib::translate::*;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct GlyphItem(Boxed<ffi::PangoGlyphItem>);

    match fn {
        copy => |ptr| ffi::pango_glyph_item_copy(mut_override(ptr)),
        free => |ptr| ffi::pango_glyph_item_free(ptr),
        type_ => || ffi::pango_glyph_item_get_type(),
    }
}

impl GlyphItem {
    #[doc(alias = "pango_glyph_item_apply_attrs")]
    pub fn apply_attrs(self, text: &str, list: &AttrList) -> Vec<GlyphItem> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::pango_glyph_item_apply_attrs(
                self.into_glib_ptr(),
                text.to_glib_none().0,
                list.to_glib_none().0,
            ))
        }
    }

    //#[doc(alias = "pango_glyph_item_letter_space")]
    //pub fn letter_space(&mut self, text: &str, log_attrs: /*Ignored*/&[LogAttr], letter_spacing: i32) {
    //    unsafe { TODO: call ffi:pango_glyph_item_letter_space() }
    //}

    #[doc(alias = "pango_glyph_item_split")]
    #[must_use]
    pub fn split(&mut self, text: &str, split_index: i32) -> Option<GlyphItem> {
        unsafe {
            from_glib_full(ffi::pango_glyph_item_split(
                self.to_glib_none_mut().0,
                text.to_glib_none().0,
                split_index,
            ))
        }
    }
}
