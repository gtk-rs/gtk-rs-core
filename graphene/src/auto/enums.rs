// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "graphene_euler_order_t")]
pub enum EulerOrder {
    #[doc(alias = "GRAPHENE_EULER_ORDER_DEFAULT")]
    Default,
    #[doc(alias = "GRAPHENE_EULER_ORDER_XYZ")]
    Xyz,
    #[doc(alias = "GRAPHENE_EULER_ORDER_YZX")]
    Yzx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_ZXY")]
    Zxy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_XZY")]
    Xzy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_YXZ")]
    Yxz,
    #[doc(alias = "GRAPHENE_EULER_ORDER_ZYX")]
    Zyx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SXYZ")]
    Sxyz,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SXYX")]
    Sxyx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SXZY")]
    Sxzy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SXZX")]
    Sxzx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SYZX")]
    Syzx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SYZY")]
    Syzy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SYXZ")]
    Syxz,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SYXY")]
    Syxy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SZXY")]
    Szxy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SZXZ")]
    Szxz,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SZYX")]
    Szyx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_SZYZ")]
    Szyz,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RZYX")]
    Rzyx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RXYX")]
    Rxyx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RYZX")]
    Ryzx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RXZX")]
    Rxzx,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RXZY")]
    Rxzy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RYZY")]
    Ryzy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RZXY")]
    Rzxy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RYXY")]
    Ryxy,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RYXZ")]
    Ryxz,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RZXZ")]
    Rzxz,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RXYZ")]
    Rxyz,
    #[doc(alias = "GRAPHENE_EULER_ORDER_RZYZ")]
    Rzyz,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EulerOrder {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EulerOrder::{}",
            match *self {
                EulerOrder::Default => "Default",
                EulerOrder::Xyz => "Xyz",
                EulerOrder::Yzx => "Yzx",
                EulerOrder::Zxy => "Zxy",
                EulerOrder::Xzy => "Xzy",
                EulerOrder::Yxz => "Yxz",
                EulerOrder::Zyx => "Zyx",
                EulerOrder::Sxyz => "Sxyz",
                EulerOrder::Sxyx => "Sxyx",
                EulerOrder::Sxzy => "Sxzy",
                EulerOrder::Sxzx => "Sxzx",
                EulerOrder::Syzx => "Syzx",
                EulerOrder::Syzy => "Syzy",
                EulerOrder::Syxz => "Syxz",
                EulerOrder::Syxy => "Syxy",
                EulerOrder::Szxy => "Szxy",
                EulerOrder::Szxz => "Szxz",
                EulerOrder::Szyx => "Szyx",
                EulerOrder::Szyz => "Szyz",
                EulerOrder::Rzyx => "Rzyx",
                EulerOrder::Rxyx => "Rxyx",
                EulerOrder::Ryzx => "Ryzx",
                EulerOrder::Rxzx => "Rxzx",
                EulerOrder::Rxzy => "Rxzy",
                EulerOrder::Ryzy => "Ryzy",
                EulerOrder::Rzxy => "Rzxy",
                EulerOrder::Ryxy => "Ryxy",
                EulerOrder::Ryxz => "Ryxz",
                EulerOrder::Rzxz => "Rzxz",
                EulerOrder::Rxyz => "Rxyz",
                EulerOrder::Rzyz => "Rzyz",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for EulerOrder {
    type GlibType = ffi::graphene_euler_order_t;

    fn into_glib(self) -> ffi::graphene_euler_order_t {
        match self {
            EulerOrder::Default => ffi::GRAPHENE_EULER_ORDER_DEFAULT,
            EulerOrder::Xyz => ffi::GRAPHENE_EULER_ORDER_XYZ,
            EulerOrder::Yzx => ffi::GRAPHENE_EULER_ORDER_YZX,
            EulerOrder::Zxy => ffi::GRAPHENE_EULER_ORDER_ZXY,
            EulerOrder::Xzy => ffi::GRAPHENE_EULER_ORDER_XZY,
            EulerOrder::Yxz => ffi::GRAPHENE_EULER_ORDER_YXZ,
            EulerOrder::Zyx => ffi::GRAPHENE_EULER_ORDER_ZYX,
            EulerOrder::Sxyz => ffi::GRAPHENE_EULER_ORDER_SXYZ,
            EulerOrder::Sxyx => ffi::GRAPHENE_EULER_ORDER_SXYX,
            EulerOrder::Sxzy => ffi::GRAPHENE_EULER_ORDER_SXZY,
            EulerOrder::Sxzx => ffi::GRAPHENE_EULER_ORDER_SXZX,
            EulerOrder::Syzx => ffi::GRAPHENE_EULER_ORDER_SYZX,
            EulerOrder::Syzy => ffi::GRAPHENE_EULER_ORDER_SYZY,
            EulerOrder::Syxz => ffi::GRAPHENE_EULER_ORDER_SYXZ,
            EulerOrder::Syxy => ffi::GRAPHENE_EULER_ORDER_SYXY,
            EulerOrder::Szxy => ffi::GRAPHENE_EULER_ORDER_SZXY,
            EulerOrder::Szxz => ffi::GRAPHENE_EULER_ORDER_SZXZ,
            EulerOrder::Szyx => ffi::GRAPHENE_EULER_ORDER_SZYX,
            EulerOrder::Szyz => ffi::GRAPHENE_EULER_ORDER_SZYZ,
            EulerOrder::Rzyx => ffi::GRAPHENE_EULER_ORDER_RZYX,
            EulerOrder::Rxyx => ffi::GRAPHENE_EULER_ORDER_RXYX,
            EulerOrder::Ryzx => ffi::GRAPHENE_EULER_ORDER_RYZX,
            EulerOrder::Rxzx => ffi::GRAPHENE_EULER_ORDER_RXZX,
            EulerOrder::Rxzy => ffi::GRAPHENE_EULER_ORDER_RXZY,
            EulerOrder::Ryzy => ffi::GRAPHENE_EULER_ORDER_RYZY,
            EulerOrder::Rzxy => ffi::GRAPHENE_EULER_ORDER_RZXY,
            EulerOrder::Ryxy => ffi::GRAPHENE_EULER_ORDER_RYXY,
            EulerOrder::Ryxz => ffi::GRAPHENE_EULER_ORDER_RYXZ,
            EulerOrder::Rzxz => ffi::GRAPHENE_EULER_ORDER_RZXZ,
            EulerOrder::Rxyz => ffi::GRAPHENE_EULER_ORDER_RXYZ,
            EulerOrder::Rzyz => ffi::GRAPHENE_EULER_ORDER_RZYZ,
            EulerOrder::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::graphene_euler_order_t> for EulerOrder {
    unsafe fn from_glib(value: ffi::graphene_euler_order_t) -> Self {
        skip_assert_initialized!();
        match value {
            -1 => EulerOrder::Default,
            0 => EulerOrder::Xyz,
            1 => EulerOrder::Yzx,
            2 => EulerOrder::Zxy,
            3 => EulerOrder::Xzy,
            4 => EulerOrder::Yxz,
            5 => EulerOrder::Zyx,
            6 => EulerOrder::Sxyz,
            7 => EulerOrder::Sxyx,
            8 => EulerOrder::Sxzy,
            9 => EulerOrder::Sxzx,
            10 => EulerOrder::Syzx,
            11 => EulerOrder::Syzy,
            12 => EulerOrder::Syxz,
            13 => EulerOrder::Syxy,
            14 => EulerOrder::Szxy,
            15 => EulerOrder::Szxz,
            16 => EulerOrder::Szyx,
            17 => EulerOrder::Szyz,
            18 => EulerOrder::Rzyx,
            19 => EulerOrder::Rxyx,
            20 => EulerOrder::Ryzx,
            21 => EulerOrder::Rxzx,
            22 => EulerOrder::Rxzy,
            23 => EulerOrder::Ryzy,
            24 => EulerOrder::Rzxy,
            25 => EulerOrder::Ryxy,
            26 => EulerOrder::Ryxz,
            27 => EulerOrder::Rzxz,
            28 => EulerOrder::Rxyz,
            29 => EulerOrder::Rzyz,
            value => EulerOrder::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "graphene_ray_intersection_kind_t")]
pub enum RayIntersectionKind {
    #[doc(alias = "GRAPHENE_RAY_INTERSECTION_KIND_NONE")]
    None,
    #[doc(alias = "GRAPHENE_RAY_INTERSECTION_KIND_ENTER")]
    Enter,
    #[doc(alias = "GRAPHENE_RAY_INTERSECTION_KIND_LEAVE")]
    Leave,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl fmt::Display for RayIntersectionKind {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "RayIntersectionKind::{}",
            match *self {
                RayIntersectionKind::None => "None",
                RayIntersectionKind::Enter => "Enter",
                RayIntersectionKind::Leave => "Leave",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
#[doc(hidden)]
impl IntoGlib for RayIntersectionKind {
    type GlibType = ffi::graphene_ray_intersection_kind_t;

    fn into_glib(self) -> ffi::graphene_ray_intersection_kind_t {
        match self {
            RayIntersectionKind::None => ffi::GRAPHENE_RAY_INTERSECTION_KIND_NONE,
            RayIntersectionKind::Enter => ffi::GRAPHENE_RAY_INTERSECTION_KIND_ENTER,
            RayIntersectionKind::Leave => ffi::GRAPHENE_RAY_INTERSECTION_KIND_LEAVE,
            RayIntersectionKind::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
#[doc(hidden)]
impl FromGlib<ffi::graphene_ray_intersection_kind_t> for RayIntersectionKind {
    unsafe fn from_glib(value: ffi::graphene_ray_intersection_kind_t) -> Self {
        skip_assert_initialized!();
        match value {
            0 => RayIntersectionKind::None,
            1 => RayIntersectionKind::Enter,
            2 => RayIntersectionKind::Leave,
            value => RayIntersectionKind::__Unknown(value),
        }
    }
}
